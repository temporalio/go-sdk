// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: workflowservice/service.proto

package workflowservice

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// WorkflowServiceYARPCClient is the YARPC client-side interface for the WorkflowService service.
type WorkflowServiceYARPCClient interface {
	RegisterDomain(context.Context, *RegisterDomainRequest, ...yarpc.CallOption) (*RegisterDomainResponse, error)
	DescribeDomain(context.Context, *DescribeDomainRequest, ...yarpc.CallOption) (*DescribeDomainResponse, error)
	ListDomains(context.Context, *ListDomainsRequest, ...yarpc.CallOption) (*ListDomainsResponse, error)
	UpdateDomain(context.Context, *UpdateDomainRequest, ...yarpc.CallOption) (*UpdateDomainResponse, error)
	DeprecateDomain(context.Context, *DeprecateDomainRequest, ...yarpc.CallOption) (*DeprecateDomainResponse, error)
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest, ...yarpc.CallOption) (*StartWorkflowExecutionResponse, error)
	GetWorkflowExecutionHistory(context.Context, *GetWorkflowExecutionHistoryRequest, ...yarpc.CallOption) (*GetWorkflowExecutionHistoryResponse, error)
	PollForDecisionTask(context.Context, *PollForDecisionTaskRequest, ...yarpc.CallOption) (*PollForDecisionTaskResponse, error)
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest, ...yarpc.CallOption) (*RespondDecisionTaskCompletedResponse, error)
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest, ...yarpc.CallOption) (*RespondDecisionTaskFailedResponse, error)
	PollForActivityTask(context.Context, *PollForActivityTaskRequest, ...yarpc.CallOption) (*PollForActivityTaskResponse, error)
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest, ...yarpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error)
	RecordActivityTaskHeartbeatByID(context.Context, *RecordActivityTaskHeartbeatByIDRequest, ...yarpc.CallOption) (*RecordActivityTaskHeartbeatByIDResponse, error)
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest, ...yarpc.CallOption) (*RespondActivityTaskCompletedResponse, error)
	RespondActivityTaskCompletedByID(context.Context, *RespondActivityTaskCompletedByIDRequest, ...yarpc.CallOption) (*RespondActivityTaskCompletedByIDResponse, error)
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest, ...yarpc.CallOption) (*RespondActivityTaskFailedResponse, error)
	RespondActivityTaskFailedByID(context.Context, *RespondActivityTaskFailedByIDRequest, ...yarpc.CallOption) (*RespondActivityTaskFailedByIDResponse, error)
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest, ...yarpc.CallOption) (*RespondActivityTaskCanceledResponse, error)
	RespondActivityTaskCanceledByID(context.Context, *RespondActivityTaskCanceledByIDRequest, ...yarpc.CallOption) (*RespondActivityTaskCanceledByIDResponse, error)
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest, ...yarpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error)
	SignalWorkflowExecution(context.Context, *SignalWorkflowExecutionRequest, ...yarpc.CallOption) (*SignalWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecution(context.Context, *SignalWithStartWorkflowExecutionRequest, ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionResponse, error)
	ResetWorkflowExecution(context.Context, *ResetWorkflowExecutionRequest, ...yarpc.CallOption) (*ResetWorkflowExecutionResponse, error)
	TerminateWorkflowExecution(context.Context, *TerminateWorkflowExecutionRequest, ...yarpc.CallOption) (*TerminateWorkflowExecutionResponse, error)
	ListOpenWorkflowExecutions(context.Context, *ListOpenWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListOpenWorkflowExecutionsResponse, error)
	ListClosedWorkflowExecutions(context.Context, *ListClosedWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListClosedWorkflowExecutionsResponse, error)
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListWorkflowExecutionsResponse, error)
	ListArchivedWorkflowExecutions(context.Context, *ListArchivedWorkflowExecutionsRequest, ...yarpc.CallOption) (*ListArchivedWorkflowExecutionsResponse, error)
	ScanWorkflowExecutions(context.Context, *ScanWorkflowExecutionsRequest, ...yarpc.CallOption) (*ScanWorkflowExecutionsResponse, error)
	CountWorkflowExecutions(context.Context, *CountWorkflowExecutionsRequest, ...yarpc.CallOption) (*CountWorkflowExecutionsResponse, error)
	GetSearchAttributes(context.Context, *GetSearchAttributesRequest, ...yarpc.CallOption) (*GetSearchAttributesResponse, error)
	RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest, ...yarpc.CallOption) (*RespondQueryTaskCompletedResponse, error)
	ResetStickyTaskList(context.Context, *ResetStickyTaskListRequest, ...yarpc.CallOption) (*ResetStickyTaskListResponse, error)
	QueryWorkflow(context.Context, *QueryWorkflowRequest, ...yarpc.CallOption) (*QueryWorkflowResponse, error)
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest, ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error)
	DescribeTaskList(context.Context, *DescribeTaskListRequest, ...yarpc.CallOption) (*DescribeTaskListResponse, error)
	GetReplicationMessages(context.Context, *GetReplicationMessagesRequest, ...yarpc.CallOption) (*GetReplicationMessagesResponse, error)
	GetDomainReplicationMessages(context.Context, *GetDomainReplicationMessagesRequest, ...yarpc.CallOption) (*GetDomainReplicationMessagesResponse, error)
	ReapplyEvents(context.Context, *ReapplyEventsRequest, ...yarpc.CallOption) (*ReapplyEventsResponse, error)
}

func newWorkflowServiceYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) WorkflowServiceYARPCClient {
	return &_WorkflowServiceYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "workflowservice.WorkflowService",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewWorkflowServiceYARPCClient builds a new YARPC client for the WorkflowService service.
func NewWorkflowServiceYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) WorkflowServiceYARPCClient {
	return newWorkflowServiceYARPCClient(clientConfig, nil, options...)
}

// WorkflowServiceYARPCServer is the YARPC server-side interface for the WorkflowService service.
type WorkflowServiceYARPCServer interface {
	RegisterDomain(context.Context, *RegisterDomainRequest) (*RegisterDomainResponse, error)
	DescribeDomain(context.Context, *DescribeDomainRequest) (*DescribeDomainResponse, error)
	ListDomains(context.Context, *ListDomainsRequest) (*ListDomainsResponse, error)
	UpdateDomain(context.Context, *UpdateDomainRequest) (*UpdateDomainResponse, error)
	DeprecateDomain(context.Context, *DeprecateDomainRequest) (*DeprecateDomainResponse, error)
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest) (*StartWorkflowExecutionResponse, error)
	GetWorkflowExecutionHistory(context.Context, *GetWorkflowExecutionHistoryRequest) (*GetWorkflowExecutionHistoryResponse, error)
	PollForDecisionTask(context.Context, *PollForDecisionTaskRequest) (*PollForDecisionTaskResponse, error)
	RespondDecisionTaskCompleted(context.Context, *RespondDecisionTaskCompletedRequest) (*RespondDecisionTaskCompletedResponse, error)
	RespondDecisionTaskFailed(context.Context, *RespondDecisionTaskFailedRequest) (*RespondDecisionTaskFailedResponse, error)
	PollForActivityTask(context.Context, *PollForActivityTaskRequest) (*PollForActivityTaskResponse, error)
	RecordActivityTaskHeartbeat(context.Context, *RecordActivityTaskHeartbeatRequest) (*RecordActivityTaskHeartbeatResponse, error)
	RecordActivityTaskHeartbeatByID(context.Context, *RecordActivityTaskHeartbeatByIDRequest) (*RecordActivityTaskHeartbeatByIDResponse, error)
	RespondActivityTaskCompleted(context.Context, *RespondActivityTaskCompletedRequest) (*RespondActivityTaskCompletedResponse, error)
	RespondActivityTaskCompletedByID(context.Context, *RespondActivityTaskCompletedByIDRequest) (*RespondActivityTaskCompletedByIDResponse, error)
	RespondActivityTaskFailed(context.Context, *RespondActivityTaskFailedRequest) (*RespondActivityTaskFailedResponse, error)
	RespondActivityTaskFailedByID(context.Context, *RespondActivityTaskFailedByIDRequest) (*RespondActivityTaskFailedByIDResponse, error)
	RespondActivityTaskCanceled(context.Context, *RespondActivityTaskCanceledRequest) (*RespondActivityTaskCanceledResponse, error)
	RespondActivityTaskCanceledByID(context.Context, *RespondActivityTaskCanceledByIDRequest) (*RespondActivityTaskCanceledByIDResponse, error)
	RequestCancelWorkflowExecution(context.Context, *RequestCancelWorkflowExecutionRequest) (*RequestCancelWorkflowExecutionResponse, error)
	SignalWorkflowExecution(context.Context, *SignalWorkflowExecutionRequest) (*SignalWorkflowExecutionResponse, error)
	SignalWithStartWorkflowExecution(context.Context, *SignalWithStartWorkflowExecutionRequest) (*SignalWithStartWorkflowExecutionResponse, error)
	ResetWorkflowExecution(context.Context, *ResetWorkflowExecutionRequest) (*ResetWorkflowExecutionResponse, error)
	TerminateWorkflowExecution(context.Context, *TerminateWorkflowExecutionRequest) (*TerminateWorkflowExecutionResponse, error)
	ListOpenWorkflowExecutions(context.Context, *ListOpenWorkflowExecutionsRequest) (*ListOpenWorkflowExecutionsResponse, error)
	ListClosedWorkflowExecutions(context.Context, *ListClosedWorkflowExecutionsRequest) (*ListClosedWorkflowExecutionsResponse, error)
	ListWorkflowExecutions(context.Context, *ListWorkflowExecutionsRequest) (*ListWorkflowExecutionsResponse, error)
	ListArchivedWorkflowExecutions(context.Context, *ListArchivedWorkflowExecutionsRequest) (*ListArchivedWorkflowExecutionsResponse, error)
	ScanWorkflowExecutions(context.Context, *ScanWorkflowExecutionsRequest) (*ScanWorkflowExecutionsResponse, error)
	CountWorkflowExecutions(context.Context, *CountWorkflowExecutionsRequest) (*CountWorkflowExecutionsResponse, error)
	GetSearchAttributes(context.Context, *GetSearchAttributesRequest) (*GetSearchAttributesResponse, error)
	RespondQueryTaskCompleted(context.Context, *RespondQueryTaskCompletedRequest) (*RespondQueryTaskCompletedResponse, error)
	ResetStickyTaskList(context.Context, *ResetStickyTaskListRequest) (*ResetStickyTaskListResponse, error)
	QueryWorkflow(context.Context, *QueryWorkflowRequest) (*QueryWorkflowResponse, error)
	DescribeWorkflowExecution(context.Context, *DescribeWorkflowExecutionRequest) (*DescribeWorkflowExecutionResponse, error)
	DescribeTaskList(context.Context, *DescribeTaskListRequest) (*DescribeTaskListResponse, error)
	GetReplicationMessages(context.Context, *GetReplicationMessagesRequest) (*GetReplicationMessagesResponse, error)
	GetDomainReplicationMessages(context.Context, *GetDomainReplicationMessagesRequest) (*GetDomainReplicationMessagesResponse, error)
	ReapplyEvents(context.Context, *ReapplyEventsRequest) (*ReapplyEventsResponse, error)
}

type buildWorkflowServiceYARPCProceduresParams struct {
	Server      WorkflowServiceYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildWorkflowServiceYARPCProcedures(params buildWorkflowServiceYARPCProceduresParams) []transport.Procedure {
	handler := &_WorkflowServiceYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "workflowservice.WorkflowService",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "RegisterDomain",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RegisterDomain,
							NewRequest:  newWorkflowServiceServiceRegisterDomainYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeDomain",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeDomain,
							NewRequest:  newWorkflowServiceServiceDescribeDomainYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListDomains",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListDomains,
							NewRequest:  newWorkflowServiceServiceListDomainsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "UpdateDomain",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.UpdateDomain,
							NewRequest:  newWorkflowServiceServiceUpdateDomainYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DeprecateDomain",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DeprecateDomain,
							NewRequest:  newWorkflowServiceServiceDeprecateDomainYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "StartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.StartWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceStartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetWorkflowExecutionHistory",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetWorkflowExecutionHistory,
							NewRequest:  newWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "PollForDecisionTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PollForDecisionTask,
							NewRequest:  newWorkflowServiceServicePollForDecisionTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondDecisionTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondDecisionTaskCompleted,
							NewRequest:  newWorkflowServiceServiceRespondDecisionTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondDecisionTaskFailed",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondDecisionTaskFailed,
							NewRequest:  newWorkflowServiceServiceRespondDecisionTaskFailedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "PollForActivityTask",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.PollForActivityTask,
							NewRequest:  newWorkflowServiceServicePollForActivityTaskYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordActivityTaskHeartbeat",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordActivityTaskHeartbeat,
							NewRequest:  newWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RecordActivityTaskHeartbeatByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RecordActivityTaskHeartbeatByID,
							NewRequest:  newWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCompleted,
							NewRequest:  newWorkflowServiceServiceRespondActivityTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCompletedByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCompletedByID,
							NewRequest:  newWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskFailed",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskFailed,
							NewRequest:  newWorkflowServiceServiceRespondActivityTaskFailedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskFailedByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskFailedByID,
							NewRequest:  newWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCanceled",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCanceled,
							NewRequest:  newWorkflowServiceServiceRespondActivityTaskCanceledYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondActivityTaskCanceledByID",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondActivityTaskCanceledByID,
							NewRequest:  newWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RequestCancelWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RequestCancelWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceSignalWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "SignalWithStartWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.SignalWithStartWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceResetWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "TerminateWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.TerminateWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceTerminateWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListOpenWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListOpenWorkflowExecutions,
							NewRequest:  newWorkflowServiceServiceListOpenWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListClosedWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListClosedWorkflowExecutions,
							NewRequest:  newWorkflowServiceServiceListClosedWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListWorkflowExecutions,
							NewRequest:  newWorkflowServiceServiceListWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ListArchivedWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ListArchivedWorkflowExecutions,
							NewRequest:  newWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ScanWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ScanWorkflowExecutions,
							NewRequest:  newWorkflowServiceServiceScanWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "CountWorkflowExecutions",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.CountWorkflowExecutions,
							NewRequest:  newWorkflowServiceServiceCountWorkflowExecutionsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetSearchAttributes",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetSearchAttributes,
							NewRequest:  newWorkflowServiceServiceGetSearchAttributesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "RespondQueryTaskCompleted",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.RespondQueryTaskCompleted,
							NewRequest:  newWorkflowServiceServiceRespondQueryTaskCompletedYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ResetStickyTaskList",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ResetStickyTaskList,
							NewRequest:  newWorkflowServiceServiceResetStickyTaskListYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "QueryWorkflow",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.QueryWorkflow,
							NewRequest:  newWorkflowServiceServiceQueryWorkflowYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeWorkflowExecution",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeWorkflowExecution,
							NewRequest:  newWorkflowServiceServiceDescribeWorkflowExecutionYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "DescribeTaskList",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.DescribeTaskList,
							NewRequest:  newWorkflowServiceServiceDescribeTaskListYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetReplicationMessages,
							NewRequest:  newWorkflowServiceServiceGetReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "GetDomainReplicationMessages",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.GetDomainReplicationMessages,
							NewRequest:  newWorkflowServiceServiceGetDomainReplicationMessagesYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
				{
					MethodName: "ReapplyEvents",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.ReapplyEvents,
							NewRequest:  newWorkflowServiceServiceReapplyEventsYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// BuildWorkflowServiceYARPCProcedures prepares an implementation of the WorkflowService service for YARPC registration.
func BuildWorkflowServiceYARPCProcedures(server WorkflowServiceYARPCServer) []transport.Procedure {
	return buildWorkflowServiceYARPCProcedures(buildWorkflowServiceYARPCProceduresParams{Server: server})
}

// FxWorkflowServiceYARPCClientParams defines the input
// for NewFxWorkflowServiceYARPCClient. It provides the
// paramaters to get a WorkflowServiceYARPCClient in an
// Fx application.
type FxWorkflowServiceYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxWorkflowServiceYARPCClientResult defines the output
// of NewFxWorkflowServiceYARPCClient. It provides a
// WorkflowServiceYARPCClient to an Fx application.
type FxWorkflowServiceYARPCClientResult struct {
	fx.Out

	Client WorkflowServiceYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxWorkflowServiceYARPCClient provides a WorkflowServiceYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    workflowservice.NewFxWorkflowServiceYARPCClient("service-name"),
//    ...
//  )
func NewFxWorkflowServiceYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxWorkflowServiceYARPCClientParams) FxWorkflowServiceYARPCClientResult {
		return FxWorkflowServiceYARPCClientResult{
			Client: newWorkflowServiceYARPCClient(params.Provider.ClientConfig(name), params.AnyResolver, options...),
		}
	}
}

// FxWorkflowServiceYARPCProceduresParams defines the input
// for NewFxWorkflowServiceYARPCProcedures. It provides the
// paramaters to get WorkflowServiceYARPCServer procedures in an
// Fx application.
type FxWorkflowServiceYARPCProceduresParams struct {
	fx.In

	Server      WorkflowServiceYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxWorkflowServiceYARPCProceduresResult defines the output
// of NewFxWorkflowServiceYARPCProcedures. It provides
// WorkflowServiceYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxWorkflowServiceYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxWorkflowServiceYARPCProcedures provides WorkflowServiceYARPCServer procedures to an Fx application.
// It expects a WorkflowServiceYARPCServer to be present in the container.
//
//  fx.Provide(
//    workflowservice.NewFxWorkflowServiceYARPCProcedures(),
//    ...
//  )
func NewFxWorkflowServiceYARPCProcedures() interface{} {
	return func(params FxWorkflowServiceYARPCProceduresParams) FxWorkflowServiceYARPCProceduresResult {
		return FxWorkflowServiceYARPCProceduresResult{
			Procedures: buildWorkflowServiceYARPCProcedures(buildWorkflowServiceYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "workflowservice.WorkflowService",
				FileDescriptors: yarpcFileDescriptorClosure6d5ecb190c8dcb99,
			},
		}
	}
}

type _WorkflowServiceYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_WorkflowServiceYARPCCaller) RegisterDomain(ctx context.Context, request *RegisterDomainRequest, options ...yarpc.CallOption) (*RegisterDomainResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RegisterDomain", request, newWorkflowServiceServiceRegisterDomainYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RegisterDomainResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRegisterDomainYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) DescribeDomain(ctx context.Context, request *DescribeDomainRequest, options ...yarpc.CallOption) (*DescribeDomainResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeDomain", request, newWorkflowServiceServiceDescribeDomainYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeDomainResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceDescribeDomainYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ListDomains(ctx context.Context, request *ListDomainsRequest, options ...yarpc.CallOption) (*ListDomainsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListDomains", request, newWorkflowServiceServiceListDomainsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListDomainsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceListDomainsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) UpdateDomain(ctx context.Context, request *UpdateDomainRequest, options ...yarpc.CallOption) (*UpdateDomainResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "UpdateDomain", request, newWorkflowServiceServiceUpdateDomainYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*UpdateDomainResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceUpdateDomainYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) DeprecateDomain(ctx context.Context, request *DeprecateDomainRequest, options ...yarpc.CallOption) (*DeprecateDomainResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DeprecateDomain", request, newWorkflowServiceServiceDeprecateDomainYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DeprecateDomainResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceDeprecateDomainYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) StartWorkflowExecution(ctx context.Context, request *StartWorkflowExecutionRequest, options ...yarpc.CallOption) (*StartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "StartWorkflowExecution", request, newWorkflowServiceServiceStartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*StartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceStartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) GetWorkflowExecutionHistory(ctx context.Context, request *GetWorkflowExecutionHistoryRequest, options ...yarpc.CallOption) (*GetWorkflowExecutionHistoryResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetWorkflowExecutionHistory", request, newWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetWorkflowExecutionHistoryResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) PollForDecisionTask(ctx context.Context, request *PollForDecisionTaskRequest, options ...yarpc.CallOption) (*PollForDecisionTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PollForDecisionTask", request, newWorkflowServiceServicePollForDecisionTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PollForDecisionTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServicePollForDecisionTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondDecisionTaskCompleted(ctx context.Context, request *RespondDecisionTaskCompletedRequest, options ...yarpc.CallOption) (*RespondDecisionTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondDecisionTaskCompleted", request, newWorkflowServiceServiceRespondDecisionTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondDecisionTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondDecisionTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondDecisionTaskFailed(ctx context.Context, request *RespondDecisionTaskFailedRequest, options ...yarpc.CallOption) (*RespondDecisionTaskFailedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondDecisionTaskFailed", request, newWorkflowServiceServiceRespondDecisionTaskFailedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondDecisionTaskFailedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondDecisionTaskFailedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) PollForActivityTask(ctx context.Context, request *PollForActivityTaskRequest, options ...yarpc.CallOption) (*PollForActivityTaskResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "PollForActivityTask", request, newWorkflowServiceServicePollForActivityTaskYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*PollForActivityTaskResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServicePollForActivityTaskYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RecordActivityTaskHeartbeat(ctx context.Context, request *RecordActivityTaskHeartbeatRequest, options ...yarpc.CallOption) (*RecordActivityTaskHeartbeatResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordActivityTaskHeartbeat", request, newWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordActivityTaskHeartbeatResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RecordActivityTaskHeartbeatByID(ctx context.Context, request *RecordActivityTaskHeartbeatByIDRequest, options ...yarpc.CallOption) (*RecordActivityTaskHeartbeatByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RecordActivityTaskHeartbeatByID", request, newWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RecordActivityTaskHeartbeatByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondActivityTaskCompleted(ctx context.Context, request *RespondActivityTaskCompletedRequest, options ...yarpc.CallOption) (*RespondActivityTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCompleted", request, newWorkflowServiceServiceRespondActivityTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondActivityTaskCompletedByID(ctx context.Context, request *RespondActivityTaskCompletedByIDRequest, options ...yarpc.CallOption) (*RespondActivityTaskCompletedByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCompletedByID", request, newWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCompletedByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondActivityTaskFailed(ctx context.Context, request *RespondActivityTaskFailedRequest, options ...yarpc.CallOption) (*RespondActivityTaskFailedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskFailed", request, newWorkflowServiceServiceRespondActivityTaskFailedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskFailedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskFailedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondActivityTaskFailedByID(ctx context.Context, request *RespondActivityTaskFailedByIDRequest, options ...yarpc.CallOption) (*RespondActivityTaskFailedByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskFailedByID", request, newWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskFailedByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondActivityTaskCanceled(ctx context.Context, request *RespondActivityTaskCanceledRequest, options ...yarpc.CallOption) (*RespondActivityTaskCanceledResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCanceled", request, newWorkflowServiceServiceRespondActivityTaskCanceledYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCanceledResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCanceledYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondActivityTaskCanceledByID(ctx context.Context, request *RespondActivityTaskCanceledByIDRequest, options ...yarpc.CallOption) (*RespondActivityTaskCanceledByIDResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondActivityTaskCanceledByID", request, newWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondActivityTaskCanceledByIDResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RequestCancelWorkflowExecution(ctx context.Context, request *RequestCancelWorkflowExecutionRequest, options ...yarpc.CallOption) (*RequestCancelWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RequestCancelWorkflowExecution", request, newWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RequestCancelWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) SignalWorkflowExecution(ctx context.Context, request *SignalWorkflowExecutionRequest, options ...yarpc.CallOption) (*SignalWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWorkflowExecution", request, newWorkflowServiceServiceSignalWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceSignalWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) SignalWithStartWorkflowExecution(ctx context.Context, request *SignalWithStartWorkflowExecutionRequest, options ...yarpc.CallOption) (*SignalWithStartWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "SignalWithStartWorkflowExecution", request, newWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*SignalWithStartWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ResetWorkflowExecution(ctx context.Context, request *ResetWorkflowExecutionRequest, options ...yarpc.CallOption) (*ResetWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetWorkflowExecution", request, newWorkflowServiceServiceResetWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceResetWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) TerminateWorkflowExecution(ctx context.Context, request *TerminateWorkflowExecutionRequest, options ...yarpc.CallOption) (*TerminateWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "TerminateWorkflowExecution", request, newWorkflowServiceServiceTerminateWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*TerminateWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceTerminateWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ListOpenWorkflowExecutions(ctx context.Context, request *ListOpenWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListOpenWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListOpenWorkflowExecutions", request, newWorkflowServiceServiceListOpenWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListOpenWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceListOpenWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ListClosedWorkflowExecutions(ctx context.Context, request *ListClosedWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListClosedWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListClosedWorkflowExecutions", request, newWorkflowServiceServiceListClosedWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListClosedWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceListClosedWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ListWorkflowExecutions(ctx context.Context, request *ListWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListWorkflowExecutions", request, newWorkflowServiceServiceListWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceListWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ListArchivedWorkflowExecutions(ctx context.Context, request *ListArchivedWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ListArchivedWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ListArchivedWorkflowExecutions", request, newWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ListArchivedWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ScanWorkflowExecutions(ctx context.Context, request *ScanWorkflowExecutionsRequest, options ...yarpc.CallOption) (*ScanWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ScanWorkflowExecutions", request, newWorkflowServiceServiceScanWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ScanWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceScanWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) CountWorkflowExecutions(ctx context.Context, request *CountWorkflowExecutionsRequest, options ...yarpc.CallOption) (*CountWorkflowExecutionsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "CountWorkflowExecutions", request, newWorkflowServiceServiceCountWorkflowExecutionsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*CountWorkflowExecutionsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceCountWorkflowExecutionsYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) GetSearchAttributes(ctx context.Context, request *GetSearchAttributesRequest, options ...yarpc.CallOption) (*GetSearchAttributesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetSearchAttributes", request, newWorkflowServiceServiceGetSearchAttributesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetSearchAttributesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceGetSearchAttributesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) RespondQueryTaskCompleted(ctx context.Context, request *RespondQueryTaskCompletedRequest, options ...yarpc.CallOption) (*RespondQueryTaskCompletedResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "RespondQueryTaskCompleted", request, newWorkflowServiceServiceRespondQueryTaskCompletedYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*RespondQueryTaskCompletedResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondQueryTaskCompletedYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ResetStickyTaskList(ctx context.Context, request *ResetStickyTaskListRequest, options ...yarpc.CallOption) (*ResetStickyTaskListResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ResetStickyTaskList", request, newWorkflowServiceServiceResetStickyTaskListYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ResetStickyTaskListResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceResetStickyTaskListYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) QueryWorkflow(ctx context.Context, request *QueryWorkflowRequest, options ...yarpc.CallOption) (*QueryWorkflowResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "QueryWorkflow", request, newWorkflowServiceServiceQueryWorkflowYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*QueryWorkflowResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceQueryWorkflowYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) DescribeWorkflowExecution(ctx context.Context, request *DescribeWorkflowExecutionRequest, options ...yarpc.CallOption) (*DescribeWorkflowExecutionResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeWorkflowExecution", request, newWorkflowServiceServiceDescribeWorkflowExecutionYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeWorkflowExecutionResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceDescribeWorkflowExecutionYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) DescribeTaskList(ctx context.Context, request *DescribeTaskListRequest, options ...yarpc.CallOption) (*DescribeTaskListResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "DescribeTaskList", request, newWorkflowServiceServiceDescribeTaskListYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*DescribeTaskListResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceDescribeTaskListYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) GetReplicationMessages(ctx context.Context, request *GetReplicationMessagesRequest, options ...yarpc.CallOption) (*GetReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetReplicationMessages", request, newWorkflowServiceServiceGetReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceGetReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) GetDomainReplicationMessages(ctx context.Context, request *GetDomainReplicationMessagesRequest, options ...yarpc.CallOption) (*GetDomainReplicationMessagesResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "GetDomainReplicationMessages", request, newWorkflowServiceServiceGetDomainReplicationMessagesYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*GetDomainReplicationMessagesResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceGetDomainReplicationMessagesYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_WorkflowServiceYARPCCaller) ReapplyEvents(ctx context.Context, request *ReapplyEventsRequest, options ...yarpc.CallOption) (*ReapplyEventsResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "ReapplyEvents", request, newWorkflowServiceServiceReapplyEventsYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ReapplyEventsResponse)
	if !ok {
		return nil, protobuf.CastError(emptyWorkflowServiceServiceReapplyEventsYARPCResponse, responseMessage)
	}
	return response, err
}

type _WorkflowServiceYARPCHandler struct {
	server WorkflowServiceYARPCServer
}

func (h *_WorkflowServiceYARPCHandler) RegisterDomain(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RegisterDomainRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RegisterDomainRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRegisterDomainYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RegisterDomain(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) DescribeDomain(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeDomainRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeDomainRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceDescribeDomainYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeDomain(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ListDomains(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListDomainsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListDomainsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceListDomainsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListDomains(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) UpdateDomain(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *UpdateDomainRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*UpdateDomainRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceUpdateDomainYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.UpdateDomain(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) DeprecateDomain(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DeprecateDomainRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DeprecateDomainRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceDeprecateDomainYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DeprecateDomain(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) StartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *StartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*StartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceStartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.StartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) GetWorkflowExecutionHistory(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetWorkflowExecutionHistoryRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetWorkflowExecutionHistoryRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetWorkflowExecutionHistory(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) PollForDecisionTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PollForDecisionTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PollForDecisionTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServicePollForDecisionTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PollForDecisionTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondDecisionTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondDecisionTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondDecisionTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondDecisionTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondDecisionTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondDecisionTaskFailed(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondDecisionTaskFailedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondDecisionTaskFailedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondDecisionTaskFailedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondDecisionTaskFailed(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) PollForActivityTask(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *PollForActivityTaskRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*PollForActivityTaskRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServicePollForActivityTaskYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.PollForActivityTask(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RecordActivityTaskHeartbeat(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordActivityTaskHeartbeatRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordActivityTaskHeartbeatRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordActivityTaskHeartbeat(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RecordActivityTaskHeartbeatByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RecordActivityTaskHeartbeatByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RecordActivityTaskHeartbeatByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RecordActivityTaskHeartbeatByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondActivityTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondActivityTaskCompletedByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCompletedByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCompletedByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCompletedByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondActivityTaskFailed(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskFailedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskFailedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskFailedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskFailed(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondActivityTaskFailedByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskFailedByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskFailedByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskFailedByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondActivityTaskCanceled(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCanceledRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCanceledRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCanceledYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCanceled(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondActivityTaskCanceledByID(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondActivityTaskCanceledByIDRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondActivityTaskCanceledByIDRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondActivityTaskCanceledByID(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RequestCancelWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RequestCancelWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RequestCancelWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RequestCancelWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) SignalWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceSignalWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) SignalWithStartWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *SignalWithStartWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*SignalWithStartWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.SignalWithStartWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ResetWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceResetWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) TerminateWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *TerminateWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*TerminateWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceTerminateWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.TerminateWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ListOpenWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListOpenWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListOpenWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceListOpenWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListOpenWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ListClosedWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListClosedWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListClosedWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceListClosedWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListClosedWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ListWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceListWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ListArchivedWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ListArchivedWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ListArchivedWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ListArchivedWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ScanWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ScanWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ScanWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceScanWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ScanWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) CountWorkflowExecutions(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *CountWorkflowExecutionsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*CountWorkflowExecutionsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceCountWorkflowExecutionsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.CountWorkflowExecutions(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) GetSearchAttributes(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetSearchAttributesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetSearchAttributesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceGetSearchAttributesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetSearchAttributes(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) RespondQueryTaskCompleted(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *RespondQueryTaskCompletedRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*RespondQueryTaskCompletedRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceRespondQueryTaskCompletedYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.RespondQueryTaskCompleted(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ResetStickyTaskList(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ResetStickyTaskListRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ResetStickyTaskListRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceResetStickyTaskListYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ResetStickyTaskList(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) QueryWorkflow(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *QueryWorkflowRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*QueryWorkflowRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceQueryWorkflowYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.QueryWorkflow(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) DescribeWorkflowExecution(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeWorkflowExecutionRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeWorkflowExecutionRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceDescribeWorkflowExecutionYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeWorkflowExecution(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) DescribeTaskList(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *DescribeTaskListRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*DescribeTaskListRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceDescribeTaskListYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.DescribeTaskList(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) GetReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceGetReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) GetDomainReplicationMessages(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *GetDomainReplicationMessagesRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*GetDomainReplicationMessagesRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceGetDomainReplicationMessagesYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.GetDomainReplicationMessages(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_WorkflowServiceYARPCHandler) ReapplyEvents(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ReapplyEventsRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ReapplyEventsRequest)
		if !ok {
			return nil, protobuf.CastError(emptyWorkflowServiceServiceReapplyEventsYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.ReapplyEvents(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newWorkflowServiceServiceRegisterDomainYARPCRequest() proto.Message {
	return &RegisterDomainRequest{}
}

func newWorkflowServiceServiceRegisterDomainYARPCResponse() proto.Message {
	return &RegisterDomainResponse{}
}

func newWorkflowServiceServiceDescribeDomainYARPCRequest() proto.Message {
	return &DescribeDomainRequest{}
}

func newWorkflowServiceServiceDescribeDomainYARPCResponse() proto.Message {
	return &DescribeDomainResponse{}
}

func newWorkflowServiceServiceListDomainsYARPCRequest() proto.Message {
	return &ListDomainsRequest{}
}

func newWorkflowServiceServiceListDomainsYARPCResponse() proto.Message {
	return &ListDomainsResponse{}
}

func newWorkflowServiceServiceUpdateDomainYARPCRequest() proto.Message {
	return &UpdateDomainRequest{}
}

func newWorkflowServiceServiceUpdateDomainYARPCResponse() proto.Message {
	return &UpdateDomainResponse{}
}

func newWorkflowServiceServiceDeprecateDomainYARPCRequest() proto.Message {
	return &DeprecateDomainRequest{}
}

func newWorkflowServiceServiceDeprecateDomainYARPCResponse() proto.Message {
	return &DeprecateDomainResponse{}
}

func newWorkflowServiceServiceStartWorkflowExecutionYARPCRequest() proto.Message {
	return &StartWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceStartWorkflowExecutionYARPCResponse() proto.Message {
	return &StartWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCRequest() proto.Message {
	return &GetWorkflowExecutionHistoryRequest{}
}

func newWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCResponse() proto.Message {
	return &GetWorkflowExecutionHistoryResponse{}
}

func newWorkflowServiceServicePollForDecisionTaskYARPCRequest() proto.Message {
	return &PollForDecisionTaskRequest{}
}

func newWorkflowServiceServicePollForDecisionTaskYARPCResponse() proto.Message {
	return &PollForDecisionTaskResponse{}
}

func newWorkflowServiceServiceRespondDecisionTaskCompletedYARPCRequest() proto.Message {
	return &RespondDecisionTaskCompletedRequest{}
}

func newWorkflowServiceServiceRespondDecisionTaskCompletedYARPCResponse() proto.Message {
	return &RespondDecisionTaskCompletedResponse{}
}

func newWorkflowServiceServiceRespondDecisionTaskFailedYARPCRequest() proto.Message {
	return &RespondDecisionTaskFailedRequest{}
}

func newWorkflowServiceServiceRespondDecisionTaskFailedYARPCResponse() proto.Message {
	return &RespondDecisionTaskFailedResponse{}
}

func newWorkflowServiceServicePollForActivityTaskYARPCRequest() proto.Message {
	return &PollForActivityTaskRequest{}
}

func newWorkflowServiceServicePollForActivityTaskYARPCResponse() proto.Message {
	return &PollForActivityTaskResponse{}
}

func newWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCRequest() proto.Message {
	return &RecordActivityTaskHeartbeatRequest{}
}

func newWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCResponse() proto.Message {
	return &RecordActivityTaskHeartbeatResponse{}
}

func newWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCRequest() proto.Message {
	return &RecordActivityTaskHeartbeatByIDRequest{}
}

func newWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCResponse() proto.Message {
	return &RecordActivityTaskHeartbeatByIDResponse{}
}

func newWorkflowServiceServiceRespondActivityTaskCompletedYARPCRequest() proto.Message {
	return &RespondActivityTaskCompletedRequest{}
}

func newWorkflowServiceServiceRespondActivityTaskCompletedYARPCResponse() proto.Message {
	return &RespondActivityTaskCompletedResponse{}
}

func newWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCRequest() proto.Message {
	return &RespondActivityTaskCompletedByIDRequest{}
}

func newWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCResponse() proto.Message {
	return &RespondActivityTaskCompletedByIDResponse{}
}

func newWorkflowServiceServiceRespondActivityTaskFailedYARPCRequest() proto.Message {
	return &RespondActivityTaskFailedRequest{}
}

func newWorkflowServiceServiceRespondActivityTaskFailedYARPCResponse() proto.Message {
	return &RespondActivityTaskFailedResponse{}
}

func newWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCRequest() proto.Message {
	return &RespondActivityTaskFailedByIDRequest{}
}

func newWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCResponse() proto.Message {
	return &RespondActivityTaskFailedByIDResponse{}
}

func newWorkflowServiceServiceRespondActivityTaskCanceledYARPCRequest() proto.Message {
	return &RespondActivityTaskCanceledRequest{}
}

func newWorkflowServiceServiceRespondActivityTaskCanceledYARPCResponse() proto.Message {
	return &RespondActivityTaskCanceledResponse{}
}

func newWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCRequest() proto.Message {
	return &RespondActivityTaskCanceledByIDRequest{}
}

func newWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCResponse() proto.Message {
	return &RespondActivityTaskCanceledByIDResponse{}
}

func newWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCRequest() proto.Message {
	return &RequestCancelWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCResponse() proto.Message {
	return &RequestCancelWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceSignalWorkflowExecutionYARPCRequest() proto.Message {
	return &SignalWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceSignalWorkflowExecutionYARPCResponse() proto.Message {
	return &SignalWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCRequest() proto.Message {
	return &SignalWithStartWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCResponse() proto.Message {
	return &SignalWithStartWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceResetWorkflowExecutionYARPCRequest() proto.Message {
	return &ResetWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceResetWorkflowExecutionYARPCResponse() proto.Message {
	return &ResetWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceTerminateWorkflowExecutionYARPCRequest() proto.Message {
	return &TerminateWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceTerminateWorkflowExecutionYARPCResponse() proto.Message {
	return &TerminateWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceListOpenWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListOpenWorkflowExecutionsRequest{}
}

func newWorkflowServiceServiceListOpenWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListOpenWorkflowExecutionsResponse{}
}

func newWorkflowServiceServiceListClosedWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListClosedWorkflowExecutionsRequest{}
}

func newWorkflowServiceServiceListClosedWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListClosedWorkflowExecutionsResponse{}
}

func newWorkflowServiceServiceListWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListWorkflowExecutionsRequest{}
}

func newWorkflowServiceServiceListWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListWorkflowExecutionsResponse{}
}

func newWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCRequest() proto.Message {
	return &ListArchivedWorkflowExecutionsRequest{}
}

func newWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCResponse() proto.Message {
	return &ListArchivedWorkflowExecutionsResponse{}
}

func newWorkflowServiceServiceScanWorkflowExecutionsYARPCRequest() proto.Message {
	return &ScanWorkflowExecutionsRequest{}
}

func newWorkflowServiceServiceScanWorkflowExecutionsYARPCResponse() proto.Message {
	return &ScanWorkflowExecutionsResponse{}
}

func newWorkflowServiceServiceCountWorkflowExecutionsYARPCRequest() proto.Message {
	return &CountWorkflowExecutionsRequest{}
}

func newWorkflowServiceServiceCountWorkflowExecutionsYARPCResponse() proto.Message {
	return &CountWorkflowExecutionsResponse{}
}

func newWorkflowServiceServiceGetSearchAttributesYARPCRequest() proto.Message {
	return &GetSearchAttributesRequest{}
}

func newWorkflowServiceServiceGetSearchAttributesYARPCResponse() proto.Message {
	return &GetSearchAttributesResponse{}
}

func newWorkflowServiceServiceRespondQueryTaskCompletedYARPCRequest() proto.Message {
	return &RespondQueryTaskCompletedRequest{}
}

func newWorkflowServiceServiceRespondQueryTaskCompletedYARPCResponse() proto.Message {
	return &RespondQueryTaskCompletedResponse{}
}

func newWorkflowServiceServiceResetStickyTaskListYARPCRequest() proto.Message {
	return &ResetStickyTaskListRequest{}
}

func newWorkflowServiceServiceResetStickyTaskListYARPCResponse() proto.Message {
	return &ResetStickyTaskListResponse{}
}

func newWorkflowServiceServiceQueryWorkflowYARPCRequest() proto.Message {
	return &QueryWorkflowRequest{}
}

func newWorkflowServiceServiceQueryWorkflowYARPCResponse() proto.Message {
	return &QueryWorkflowResponse{}
}

func newWorkflowServiceServiceDescribeWorkflowExecutionYARPCRequest() proto.Message {
	return &DescribeWorkflowExecutionRequest{}
}

func newWorkflowServiceServiceDescribeWorkflowExecutionYARPCResponse() proto.Message {
	return &DescribeWorkflowExecutionResponse{}
}

func newWorkflowServiceServiceDescribeTaskListYARPCRequest() proto.Message {
	return &DescribeTaskListRequest{}
}

func newWorkflowServiceServiceDescribeTaskListYARPCResponse() proto.Message {
	return &DescribeTaskListResponse{}
}

func newWorkflowServiceServiceGetReplicationMessagesYARPCRequest() proto.Message {
	return &GetReplicationMessagesRequest{}
}

func newWorkflowServiceServiceGetReplicationMessagesYARPCResponse() proto.Message {
	return &GetReplicationMessagesResponse{}
}

func newWorkflowServiceServiceGetDomainReplicationMessagesYARPCRequest() proto.Message {
	return &GetDomainReplicationMessagesRequest{}
}

func newWorkflowServiceServiceGetDomainReplicationMessagesYARPCResponse() proto.Message {
	return &GetDomainReplicationMessagesResponse{}
}

func newWorkflowServiceServiceReapplyEventsYARPCRequest() proto.Message {
	return &ReapplyEventsRequest{}
}

func newWorkflowServiceServiceReapplyEventsYARPCResponse() proto.Message {
	return &ReapplyEventsResponse{}
}

var (
	emptyWorkflowServiceServiceRegisterDomainYARPCRequest                    = &RegisterDomainRequest{}
	emptyWorkflowServiceServiceRegisterDomainYARPCResponse                   = &RegisterDomainResponse{}
	emptyWorkflowServiceServiceDescribeDomainYARPCRequest                    = &DescribeDomainRequest{}
	emptyWorkflowServiceServiceDescribeDomainYARPCResponse                   = &DescribeDomainResponse{}
	emptyWorkflowServiceServiceListDomainsYARPCRequest                       = &ListDomainsRequest{}
	emptyWorkflowServiceServiceListDomainsYARPCResponse                      = &ListDomainsResponse{}
	emptyWorkflowServiceServiceUpdateDomainYARPCRequest                      = &UpdateDomainRequest{}
	emptyWorkflowServiceServiceUpdateDomainYARPCResponse                     = &UpdateDomainResponse{}
	emptyWorkflowServiceServiceDeprecateDomainYARPCRequest                   = &DeprecateDomainRequest{}
	emptyWorkflowServiceServiceDeprecateDomainYARPCResponse                  = &DeprecateDomainResponse{}
	emptyWorkflowServiceServiceStartWorkflowExecutionYARPCRequest            = &StartWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceStartWorkflowExecutionYARPCResponse           = &StartWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCRequest       = &GetWorkflowExecutionHistoryRequest{}
	emptyWorkflowServiceServiceGetWorkflowExecutionHistoryYARPCResponse      = &GetWorkflowExecutionHistoryResponse{}
	emptyWorkflowServiceServicePollForDecisionTaskYARPCRequest               = &PollForDecisionTaskRequest{}
	emptyWorkflowServiceServicePollForDecisionTaskYARPCResponse              = &PollForDecisionTaskResponse{}
	emptyWorkflowServiceServiceRespondDecisionTaskCompletedYARPCRequest      = &RespondDecisionTaskCompletedRequest{}
	emptyWorkflowServiceServiceRespondDecisionTaskCompletedYARPCResponse     = &RespondDecisionTaskCompletedResponse{}
	emptyWorkflowServiceServiceRespondDecisionTaskFailedYARPCRequest         = &RespondDecisionTaskFailedRequest{}
	emptyWorkflowServiceServiceRespondDecisionTaskFailedYARPCResponse        = &RespondDecisionTaskFailedResponse{}
	emptyWorkflowServiceServicePollForActivityTaskYARPCRequest               = &PollForActivityTaskRequest{}
	emptyWorkflowServiceServicePollForActivityTaskYARPCResponse              = &PollForActivityTaskResponse{}
	emptyWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCRequest       = &RecordActivityTaskHeartbeatRequest{}
	emptyWorkflowServiceServiceRecordActivityTaskHeartbeatYARPCResponse      = &RecordActivityTaskHeartbeatResponse{}
	emptyWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCRequest   = &RecordActivityTaskHeartbeatByIDRequest{}
	emptyWorkflowServiceServiceRecordActivityTaskHeartbeatByIDYARPCResponse  = &RecordActivityTaskHeartbeatByIDResponse{}
	emptyWorkflowServiceServiceRespondActivityTaskCompletedYARPCRequest      = &RespondActivityTaskCompletedRequest{}
	emptyWorkflowServiceServiceRespondActivityTaskCompletedYARPCResponse     = &RespondActivityTaskCompletedResponse{}
	emptyWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCRequest  = &RespondActivityTaskCompletedByIDRequest{}
	emptyWorkflowServiceServiceRespondActivityTaskCompletedByIDYARPCResponse = &RespondActivityTaskCompletedByIDResponse{}
	emptyWorkflowServiceServiceRespondActivityTaskFailedYARPCRequest         = &RespondActivityTaskFailedRequest{}
	emptyWorkflowServiceServiceRespondActivityTaskFailedYARPCResponse        = &RespondActivityTaskFailedResponse{}
	emptyWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCRequest     = &RespondActivityTaskFailedByIDRequest{}
	emptyWorkflowServiceServiceRespondActivityTaskFailedByIDYARPCResponse    = &RespondActivityTaskFailedByIDResponse{}
	emptyWorkflowServiceServiceRespondActivityTaskCanceledYARPCRequest       = &RespondActivityTaskCanceledRequest{}
	emptyWorkflowServiceServiceRespondActivityTaskCanceledYARPCResponse      = &RespondActivityTaskCanceledResponse{}
	emptyWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCRequest   = &RespondActivityTaskCanceledByIDRequest{}
	emptyWorkflowServiceServiceRespondActivityTaskCanceledByIDYARPCResponse  = &RespondActivityTaskCanceledByIDResponse{}
	emptyWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCRequest    = &RequestCancelWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceRequestCancelWorkflowExecutionYARPCResponse   = &RequestCancelWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceSignalWorkflowExecutionYARPCRequest           = &SignalWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceSignalWorkflowExecutionYARPCResponse          = &SignalWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCRequest  = &SignalWithStartWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceSignalWithStartWorkflowExecutionYARPCResponse = &SignalWithStartWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceResetWorkflowExecutionYARPCRequest            = &ResetWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceResetWorkflowExecutionYARPCResponse           = &ResetWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceTerminateWorkflowExecutionYARPCRequest        = &TerminateWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceTerminateWorkflowExecutionYARPCResponse       = &TerminateWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceListOpenWorkflowExecutionsYARPCRequest        = &ListOpenWorkflowExecutionsRequest{}
	emptyWorkflowServiceServiceListOpenWorkflowExecutionsYARPCResponse       = &ListOpenWorkflowExecutionsResponse{}
	emptyWorkflowServiceServiceListClosedWorkflowExecutionsYARPCRequest      = &ListClosedWorkflowExecutionsRequest{}
	emptyWorkflowServiceServiceListClosedWorkflowExecutionsYARPCResponse     = &ListClosedWorkflowExecutionsResponse{}
	emptyWorkflowServiceServiceListWorkflowExecutionsYARPCRequest            = &ListWorkflowExecutionsRequest{}
	emptyWorkflowServiceServiceListWorkflowExecutionsYARPCResponse           = &ListWorkflowExecutionsResponse{}
	emptyWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCRequest    = &ListArchivedWorkflowExecutionsRequest{}
	emptyWorkflowServiceServiceListArchivedWorkflowExecutionsYARPCResponse   = &ListArchivedWorkflowExecutionsResponse{}
	emptyWorkflowServiceServiceScanWorkflowExecutionsYARPCRequest            = &ScanWorkflowExecutionsRequest{}
	emptyWorkflowServiceServiceScanWorkflowExecutionsYARPCResponse           = &ScanWorkflowExecutionsResponse{}
	emptyWorkflowServiceServiceCountWorkflowExecutionsYARPCRequest           = &CountWorkflowExecutionsRequest{}
	emptyWorkflowServiceServiceCountWorkflowExecutionsYARPCResponse          = &CountWorkflowExecutionsResponse{}
	emptyWorkflowServiceServiceGetSearchAttributesYARPCRequest               = &GetSearchAttributesRequest{}
	emptyWorkflowServiceServiceGetSearchAttributesYARPCResponse              = &GetSearchAttributesResponse{}
	emptyWorkflowServiceServiceRespondQueryTaskCompletedYARPCRequest         = &RespondQueryTaskCompletedRequest{}
	emptyWorkflowServiceServiceRespondQueryTaskCompletedYARPCResponse        = &RespondQueryTaskCompletedResponse{}
	emptyWorkflowServiceServiceResetStickyTaskListYARPCRequest               = &ResetStickyTaskListRequest{}
	emptyWorkflowServiceServiceResetStickyTaskListYARPCResponse              = &ResetStickyTaskListResponse{}
	emptyWorkflowServiceServiceQueryWorkflowYARPCRequest                     = &QueryWorkflowRequest{}
	emptyWorkflowServiceServiceQueryWorkflowYARPCResponse                    = &QueryWorkflowResponse{}
	emptyWorkflowServiceServiceDescribeWorkflowExecutionYARPCRequest         = &DescribeWorkflowExecutionRequest{}
	emptyWorkflowServiceServiceDescribeWorkflowExecutionYARPCResponse        = &DescribeWorkflowExecutionResponse{}
	emptyWorkflowServiceServiceDescribeTaskListYARPCRequest                  = &DescribeTaskListRequest{}
	emptyWorkflowServiceServiceDescribeTaskListYARPCResponse                 = &DescribeTaskListResponse{}
	emptyWorkflowServiceServiceGetReplicationMessagesYARPCRequest            = &GetReplicationMessagesRequest{}
	emptyWorkflowServiceServiceGetReplicationMessagesYARPCResponse           = &GetReplicationMessagesResponse{}
	emptyWorkflowServiceServiceGetDomainReplicationMessagesYARPCRequest      = &GetDomainReplicationMessagesRequest{}
	emptyWorkflowServiceServiceGetDomainReplicationMessagesYARPCResponse     = &GetDomainReplicationMessagesResponse{}
	emptyWorkflowServiceServiceReapplyEventsYARPCRequest                     = &ReapplyEventsRequest{}
	emptyWorkflowServiceServiceReapplyEventsYARPCResponse                    = &ReapplyEventsResponse{}
)

var yarpcFileDescriptorClosure6d5ecb190c8dcb99 = [][]byte{
	// workflowservice/service.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x98, 0xdf, 0x8b, 0x23, 0x45,
		0x10, 0xc7, 0x9d, 0x17, 0x1f, 0xda, 0x1f, 0x2b, 0x23, 0x28, 0xae, 0x9e, 0x8a, 0x3f, 0xf6, 0x4e,
		0xd4, 0xc4, 0xdb, 0xdd, 0xdb, 0x5b, 0x1f, 0xf7, 0x36, 0x77, 0x7b, 0x82, 0xa2, 0x26, 0x27, 0xc2,
		0x81, 0x68, 0x67, 0x52, 0xb7, 0x69, 0x76, 0x32, 0x3d, 0x76, 0x77, 0xb2, 0x06, 0xc1, 0x27, 0x41,
		0x10, 0x04, 0x41, 0x10, 0xfc, 0x27, 0xfc, 0x1b, 0x65, 0x92, 0x74, 0xdb, 0x33, 0x5d, 0xd5, 0x33,
		0x73, 0x4f, 0x77, 0x9b, 0xf9, 0x7c, 0xab, 0xbe, 0x53, 0x53, 0xd5, 0xa9, 0x0c, 0xbb, 0x71, 0x2d,
		0xd5, 0xd5, 0x93, 0x5c, 0x5e, 0x6b, 0x50, 0x2b, 0x91, 0xc1, 0x70, 0xf7, 0xef, 0xa0, 0x54, 0xd2,
		0xc8, 0x74, 0xaf, 0x71, 0x79, 0xff, 0xa0, 0xc9, 0x2b, 0xf8, 0x71, 0x09, 0xda, 0x7c, 0xaf, 0x40,
		0x97, 0xb2, 0xd0, 0x3b, 0xe1, 0xe1, 0xbf, 0x37, 0xd9, 0xde, 0xb7, 0x3b, 0x74, 0xb2, 0x45, 0xd3,
		0x8c, 0xbd, 0x38, 0x86, 0x4b, 0xa1, 0x0d, 0xa8, 0x91, 0x5c, 0x70, 0x51, 0xa4, 0x07, 0x83, 0x46,
		0xb8, 0x41, 0x1d, 0x18, 0x6f, 0x83, 0xef, 0xdf, 0x6c, 0xe5, 0xb6, 0xc9, 0xdf, 0x79, 0xa6, 0x4a,
		0x32, 0x02, 0x9d, 0x29, 0x31, 0x05, 0x32, 0x49, 0x1d, 0xa0, 0x93, 0x34, 0x39, 0x97, 0xe4, 0x31,
		0x7b, 0xee, 0x73, 0xa1, 0xcd, 0xf6, 0x73, 0x9d, 0xbe, 0x1b, 0x28, 0xbd, 0xab, 0x36, 0xfc, 0x7b,
		0x71, 0xc8, 0xc5, 0xfe, 0x8e, 0x3d, 0xff, 0x4d, 0x39, 0xe3, 0xc6, 0xda, 0x0f, 0x75, 0xfe, 0x65,
		0x1b, 0xfd, 0xfd, 0x16, 0xca, 0x85, 0x7f, 0xc2, 0xf6, 0x46, 0x50, 0x2a, 0xc8, 0xfe, 0xcf, 0x80,
		0xdd, 0x78, 0x8d, 0xb0, 0x49, 0x6e, 0xb5, 0x83, 0x2e, 0xcf, 0xcf, 0xec, 0x95, 0x89, 0xe1, 0xca,
		0xd8, 0x26, 0xb8, 0xff, 0x13, 0x64, 0x4b, 0x23, 0x64, 0x91, 0x0e, 0x82, 0x28, 0x38, 0x68, 0xb3,
		0x0e, 0x3b, 0xf3, 0x2e, 0xf9, 0xef, 0x09, 0x7b, 0xfd, 0x02, 0x42, 0xe4, 0xa1, 0xd0, 0x46, 0xaa,
		0x75, 0x7a, 0x14, 0x84, 0x8c, 0xd0, 0xd6, 0xc7, 0x71, 0x3f, 0x91, 0x33, 0xa3, 0xd8, 0xcb, 0x5f,
		0xc9, 0x3c, 0x7f, 0x20, 0xd5, 0x08, 0x32, 0xa1, 0x85, 0x2c, 0x1e, 0x71, 0x7d, 0x95, 0x7e, 0x18,
		0x84, 0x43, 0x28, 0x9b, 0xfb, 0xa3, 0x6e, 0xb0, 0xcb, 0xf9, 0x47, 0xc2, 0xde, 0xd8, 0xfe, 0x39,
		0xf3, 0x89, 0x73, 0xb9, 0x28, 0x73, 0x30, 0x30, 0x4b, 0x8f, 0x91, 0x89, 0xa2, 0x71, 0x6b, 0xe3,
		0x4e, 0x4f, 0x95, 0xf3, 0xf3, 0x6b, 0xc2, 0x5e, 0x43, 0xd0, 0x07, 0x5c, 0xe4, 0x30, 0x4b, 0x6f,
		0x77, 0x09, 0xbb, 0x65, 0xad, 0x93, 0xc3, 0x3e, 0x12, 0xe4, 0x51, 0x9c, 0x65, 0x46, 0xac, 0x84,
		0x59, 0xc7, 0x1f, 0x85, 0x4f, 0xb5, 0x3e, 0x8a, 0x3a, 0x5c, 0xeb, 0xc5, 0x31, 0x64, 0x52, 0xcd,
		0x7c, 0xe0, 0x21, 0x70, 0x65, 0xa6, 0xc0, 0x0d, 0xd2, 0x8b, 0x11, 0x9a, 0xee, 0xc5, 0xa8, 0xc8,
		0x99, 0xf9, 0x3b, 0x61, 0x6f, 0x45, 0xc8, 0x7b, 0xeb, 0xcf, 0x46, 0xe9, 0xdd, 0x3e, 0xb1, 0x2b,
		0x85, 0x35, 0x75, 0xda, 0x5f, 0x88, 0x35, 0xac, 0x8f, 0x77, 0x68, 0x58, 0x14, 0x6f, 0x6d, 0x58,
		0x42, 0xe5, 0xfc, 0xfc, 0x93, 0xb0, 0xb7, 0x63, 0xe8, 0xa6, 0x52, 0xa7, 0xbd, 0xa2, 0xfb, 0xa5,
		0xfa, 0xf4, 0x29, 0x94, 0xd8, 0x30, 0xf9, 0x78, 0xdb, 0x30, 0x85, 0x6c, 0xeb, 0x30, 0x61, 0x12,
		0x67, 0xe3, 0xcf, 0x84, 0xdd, 0x20, 0xb9, 0x4d, 0x7d, 0xee, 0x74, 0x8f, 0xeb, 0x17, 0xe7, 0xa4,
		0xaf, 0xac, 0x31, 0x6b, 0x61, 0x21, 0x79, 0x91, 0x41, 0x55, 0x9b, 0xa3, 0x4e, 0x65, 0xdf, 0xd1,
		0xb1, 0x59, 0x8b, 0x88, 0x1a, 0xb3, 0x46, 0x92, 0xe4, 0xac, 0x45, 0x15, 0xb1, 0x59, 0x6b, 0x11,
		0x3a, 0x63, 0x7f, 0x25, 0xec, 0xcd, 0x5d, 0x9c, 0x2d, 0x11, 0x7e, 0x47, 0x63, 0x8f, 0x20, 0x26,
		0xb0, 0xb6, 0xee, 0xf6, 0xd6, 0x39, 0x57, 0xbf, 0xb0, 0x57, 0x27, 0xe2, 0xb2, 0xe0, 0x88, 0x1b,
		0x64, 0x03, 0xc0, 0x49, 0x6b, 0xe3, 0x93, 0xee, 0x82, 0xda, 0xc4, 0xef, 0x28, 0x61, 0xe6, 0xc4,
		0xee, 0x72, 0x4a, 0x05, 0x26, 0x25, 0xf4, 0xc4, 0xb7, 0x2b, 0xfd, 0x65, 0x6a, 0x0c, 0x1a, 0x3a,
		0x2d, 0x53, 0x38, 0x48, 0x2f, 0x53, 0x14, 0xef, 0x92, 0xff, 0x96, 0xb0, 0xfd, 0x47, 0xa0, 0x16,
		0xa2, 0xe0, 0x06, 0x42, 0x07, 0xe1, 0xe1, 0x41, 0xc3, 0xd6, 0xc5, 0x51, 0x2f, 0x4d, 0xcd, 0x49,
		0xb5, 0x34, 0x7f, 0x59, 0x42, 0x11, 0x70, 0x1a, 0x71, 0x42, 0xc3, 0xb4, 0x93, 0x98, 0xa6, 0xf6,
		0x75, 0x55, 0x81, 0xe7, 0xb9, 0xd4, 0x30, 0x43, 0xbc, 0x1c, 0xa3, 0x71, 0x29, 0x9c, 0xfe, 0xba,
		0x8a, 0xab, 0xfc, 0x06, 0xa9, 0x48, 0xc4, 0xc8, 0x00, 0x0d, 0x49, 0x5b, 0x18, 0x76, 0xe6, 0x6b,
		0xe7, 0x49, 0x05, 0x9d, 0xa9, 0x6c, 0x2e, 0x56, 0x68, 0x39, 0x4e, 0xd0, 0xa8, 0xb4, 0x80, 0x3e,
		0x4f, 0xda, 0x74, 0xb5, 0x1f, 0x20, 0x19, 0x2f, 0x3a, 0x95, 0x04, 0x07, 0x23, 0x3f, 0x40, 0x08,
		0xde, 0x3f, 0xcc, 0xce, 0xe5, 0xb2, 0xc0, 0x1e, 0x48, 0x18, 0x8d, 0x20, 0xe9, 0xc3, 0x8c, 0x14,
		0xf8, 0x8b, 0xee, 0x05, 0x98, 0x09, 0x70, 0x95, 0xcd, 0xcf, 0x8c, 0x51, 0x62, 0xba, 0x34, 0xa0,
		0x91, 0x45, 0x17, 0xa1, 0xe8, 0x45, 0x17, 0x85, 0xb1, 0xb5, 0xe4, 0xeb, 0x25, 0xa8, 0xc6, 0xfe,
		0x46, 0xae, 0x25, 0x21, 0xdb, 0xba, 0x96, 0x60, 0x12, 0xff, 0xd6, 0x37, 0x47, 0xda, 0xc4, 0x88,
		0xec, 0x6a, 0x43, 0x55, 0x2d, 0x83, 0xdc, 0x3a, 0x42, 0xd1, 0xb7, 0x8e, 0xc2, 0x2e, 0xe7, 0x0f,
		0xec, 0x85, 0x8d, 0x27, 0xfb, 0x4c, 0xd2, 0xf0, 0xe7, 0x78, 0xed, 0xba, 0xcd, 0x73, 0xd0, 0x86,
		0xd5, 0x8a, 0x6b, 0x5f, 0x47, 0x84, 0x67, 0xf0, 0x6d, 0xf2, 0xd5, 0x05, 0x79, 0x04, 0x1f, 0xf6,
		0x91, 0x38, 0x1b, 0x82, 0xbd, 0x64, 0x31, 0x57, 0xd9, 0x5b, 0x64, 0xa4, 0x66, 0x59, 0x3f, 0xe8,
		0x40, 0xfa, 0xf3, 0x7b, 0x01, 0x66, 0x0c, 0x65, 0x2e, 0x32, 0x5e, 0xd9, 0xf8, 0x02, 0xb4, 0xe6,
		0x97, 0x80, 0xcd, 0x2f, 0x0e, 0xd2, 0xf3, 0x4b, 0xf1, 0xb5, 0xf3, 0xfd, 0x02, 0x8c, 0x7d, 0xab,
		0x11, 0x7a, 0x40, 0x5f, 0x06, 0x90, 0x38, 0x7d, 0xbe, 0xc7, 0x55, 0x7e, 0x83, 0x8d, 0x81, 0x97,
		0x65, 0xbe, 0xbe, 0xbf, 0x82, 0xc2, 0x68, 0xa4, 0xc1, 0x6a, 0xd7, 0xe9, 0x06, 0x6b, 0x60, 0x36,
		0xc3, 0xbd, 0x93, 0xc7, 0xc7, 0x97, 0xc2, 0xcc, 0x97, 0xd3, 0x41, 0x26, 0x17, 0x43, 0x03, 0x8b,
		0x52, 0x2a, 0x9e, 0x0b, 0xe9, 0xfe, 0xfb, 0xf1, 0xe6, 0xc5, 0xde, 0xb0, 0x11, 0x6f, 0xfa, 0xec,
		0xe6, 0xe3, 0xa3, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xba, 0x6f, 0x92, 0x26, 0x49, 0x14, 0x00,
		0x00,
	},
	// workflowservice/request_response.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3b, 0x4b, 0x73, 0x1d, 0x47,
		0xd5, 0x99, 0xfb, 0x92, 0x74, 0xf4, 0xb2, 0xc7, 0x92, 0x7c, 0x23, 0x5b, 0xb2, 0x3c, 0x76, 0x64,
		0x25, 0x71, 0xe4, 0x7c, 0xfa, 0xfc, 0xd9, 0xf9, 0xf2, 0x7d, 0x04, 0xe4, 0x7b, 0xfd, 0x10, 0x89,
		0x6d, 0xa9, 0xa5, 0x38, 0x55, 0x14, 0x85, 0x6b, 0x34, 0xd3, 0x96, 0x3a, 0x9a, 0x3b, 0x73, 0x33,
		0xd3, 0x57, 0xd6, 0x65, 0xc1, 0x8e, 0x2a, 0xa8, 0x14, 0x50, 0x45, 0x51, 0xc5, 0x9e, 0x05, 0x55,
		0xc0, 0x1e, 0x8a, 0x62, 0xc7, 0x6b, 0x03, 0x95, 0x05, 0xc5, 0x92, 0x15, 0xc5, 0x82, 0x05, 0x0b,
		0xe0, 0x17, 0x50, 0xfd, 0x98, 0x99, 0x9e, 0xe7, 0xbd, 0x72, 0x1c, 0x3b, 0x14, 0xd9, 0x48, 0xb7,
		0xcf, 0xab, 0x4f, 0x9f, 0x3e, 0x7d, 0xce, 0xe9, 0xc7, 0xc0, 0xf2, 0x63, 0xcf, 0x3f, 0x78, 0xe4,
		0x78, 0x8f, 0x03, 0xec, 0x1f, 0x12, 0x0b, 0x5f, 0xf1, 0xf1, 0x07, 0x3d, 0x1c, 0xd0, 0x87, 0x3e,
		0x0e, 0xba, 0x9e, 0x1b, 0xe0, 0xd5, 0xae, 0xef, 0x51, 0x4f, 0x9f, 0x4e, 0xd1, 0xcd, 0x9f, 0xc4,
		0x6e, 0xaf, 0x13, 0x5c, 0xe1, 0x7f, 0x05, 0xcd, 0xfc, 0x29, 0xcb, 0xeb, 0x74, 0x3c, 0xf7, 0x8a,
		0xf8, 0x97, 0x02, 0xda, 0x5e, 0xc7, 0x24, 0x21, 0x70, 0x46, 0x02, 0xf7, 0x49, 0x40, 0x3d, 0xbf,
		0x2f, 0xa1, 0xb3, 0x21, 0x29, 0xb6, 0x48, 0x40, 0x22, 0x09, 0xe7, 0x24, 0x38, 0xd4, 0xe0, 0x21,
		0x3e, 0xc2, 0x56, 0x8f, 0xc6, 0x04, 0x4d, 0x49, 0xe0, 0xe3, 0xae, 0x43, 0x2c, 0x33, 0xc6, 0x18,
		0x3f, 0x69, 0xc0, 0x2c, 0xc2, 0x7b, 0x24, 0xa0, 0xd8, 0x6f, 0x73, 0x05, 0x90, 0x18, 0x9e, 0xae,
		0x43, 0xcd, 0x35, 0x3b, 0xb8, 0xa9, 0x2d, 0x69, 0x2b, 0x63, 0x88, 0xff, 0xd6, 0x97, 0x60, 0xdc,
		0xc6, 0x81, 0xe5, 0x93, 0x2e, 0x13, 0xd1, 0xac, 0x70, 0x94, 0x0a, 0xd2, 0x17, 0x01, 0xbc, 0xc7,
		0x2e, 0xf6, 0x6f, 0x76, 0x4c, 0xe2, 0x34, 0xab, 0x9c, 0x40, 0x81, 0xe8, 0x0f, 0x62, 0x7b, 0xde,
		0x0c, 0x95, 0x44, 0x98, 0x62, 0x97, 0xfd, 0xd8, 0xc4, 0x3e, 0xf1, 0xec, 0x0d, 0xb7, 0x6d, 0xf6,
		0x83, 0x66, 0x6d, 0x49, 0x5b, 0xa9, 0xa3, 0x21, 0xa9, 0x59, 0xbf, 0xb8, 0x43, 0xe8, 0x5d, 0x4c,
		0x7d, 0x62, 0x35, 0xeb, 0x4b, 0xda, 0xca, 0x28, 0x52, 0x20, 0x7a, 0x0b, 0x46, 0x2d, 0xa7, 0xc7,
		0x46, 0x19, 0x34, 0x1b, 0x4b, 0xd5, 0x95, 0xf1, 0xb5, 0x4b, 0xab, 0x72, 0x16, 0x5a, 0x02, 0x8e,
		0x62, 0xdb, 0xb4, 0x3c, 0xf7, 0x11, 0xd9, 0xeb, 0xf9, 0xbc, 0x81, 0x22, 0x46, 0xfd, 0x32, 0x9c,
		0x34, 0x2d, 0x4a, 0x0e, 0xb1, 0x64, 0xb9, 0xc7, 0xec, 0x33, 0xc2, 0xc7, 0x98, 0x45, 0xe8, 0x6d,
		0xa8, 0xd9, 0x26, 0x35, 0x9b, 0xa3, 0xbc, 0xbb, 0xd7, 0x57, 0x53, 0xfe, 0xb1, 0x9a, 0x6b, 0xf6,
		0xd5, 0xb6, 0x49, 0xcd, 0x9b, 0x2e, 0xf5, 0xfb, 0x88, 0x73, 0xeb, 0x17, 0x61, 0x32, 0xc0, 0x56,
		0xcf, 0x27, 0xb4, 0xbf, 0xe3, 0x1d, 0x60, 0xb7, 0x39, 0xc6, 0xfb, 0x4b, 0x02, 0xf5, 0x65, 0x98,
		0x22, 0xc1, 0x6d, 0xc7, 0xdb, 0x35, 0x1d, 0x21, 0xae, 0x09, 0xdc, 0x04, 0x29, 0xa8, 0xfe, 0x36,
		0xcc, 0x4a, 0x8f, 0x5a, 0xf7, 0xad, 0x7d, 0x72, 0x68, 0x3a, 0xdb, 0xd4, 0xa4, 0xbd, 0xa0, 0x39,
		0xbe, 0xa4, 0xad, 0x4c, 0xad, 0xcd, 0xae, 0x0a, 0x6f, 0x4d, 0x22, 0x51, 0x3e, 0x8f, 0xbe, 0x0a,
		0x7a, 0x0a, 0xf1, 0x2e, 0xda, 0x68, 0x4e, 0x70, 0xfd, 0x72, 0x30, 0xfa, 0x16, 0x34, 0x0f, 0x49,
		0x40, 0x76, 0x89, 0x43, 0x68, 0xba, 0xff, 0xc9, 0xb2, 0xfe, 0x0b, 0xd9, 0xf4, 0xab, 0x30, 0x9b,
		0xc5, 0x31, 0x2d, 0xa6, 0xb8, 0x16, 0xf9, 0xc8, 0xf9, 0xeb, 0x30, 0x16, 0x99, 0x59, 0x3f, 0x01,
		0xd5, 0x03, 0xdc, 0x97, 0x6e, 0xce, 0x7e, 0xea, 0x33, 0x50, 0x3f, 0x34, 0x9d, 0x1e, 0x96, 0xfe,
		0x2d, 0x1a, 0x6f, 0x56, 0xde, 0xd0, 0x8c, 0x26, 0xcc, 0xa5, 0x67, 0x4d, 0xc4, 0x00, 0xe3, 0x01,
		0xe8, 0xef, 0x90, 0x80, 0x0a, 0x68, 0x10, 0xae, 0xa1, 0x79, 0x18, 0xed, 0x9a, 0x7b, 0x78, 0x9b,
		0x7c, 0x55, 0xac, 0xa3, 0x3a, 0x8a, 0xda, 0x6c, 0x62, 0x5d, 0x7c, 0x44, 0x37, 0xcd, 0x3d, 0x2c,
		0x26, 0x96, 0xf5, 0x36, 0x81, 0x92, 0x40, 0xe3, 0x6b, 0x70, 0x2a, 0x21, 0x57, 0x74, 0xa7, 0xaf,
		0xc3, 0x88, 0x08, 0x17, 0x41, 0x53, 0x93, 0xde, 0x9c, 0x76, 0xaf, 0x36, 0x5f, 0x95, 0xbb, 0x38,
		0xa9, 0x28, 0x0a, 0xf9, 0x86, 0xec, 0xff, 0xf3, 0x30, 0x9b, 0x16, 0x54, 0x1c, 0x1e, 0x74, 0xa8,
		0xf5, 0x7a, 0xc4, 0x96, 0x76, 0xe3, 0xbf, 0x8d, 0xdf, 0x54, 0x60, 0x2e, 0x5f, 0x15, 0x7d, 0x0d,
		0x40, 0x28, 0xb3, 0xe1, 0x3e, 0xf2, 0xb8, 0xa0, 0xf1, 0x35, 0x3d, 0x5c, 0x95, 0xed, 0x08, 0x83,
		0x14, 0x2a, 0x7d, 0x1d, 0x26, 0x2d, 0x75, 0x75, 0xf2, 0xbe, 0xc6, 0xd7, 0xce, 0x24, 0xd9, 0x92,
		0x0b, 0x38, 0xc9, 0xa1, 0xef, 0x42, 0xd3, 0x2f, 0x58, 0xeb, 0x3c, 0x60, 0x8d, 0xaf, 0x2d, 0x27,
		0xa5, 0x15, 0x46, 0x86, 0x42, 0x39, 0xfa, 0x0a, 0x4c, 0x3f, 0x32, 0x89, 0xe3, 0x1d, 0x62, 0xff,
		0x01, 0xf6, 0x59, 0xa8, 0xe6, 0xf1, 0xac, 0x8a, 0xd2, 0xe0, 0x9c, 0x95, 0x5b, 0xcf, 0x5b, 0xb9,
		0xc6, 0x9f, 0x2a, 0x70, 0xea, 0xdd, 0xae, 0x6d, 0xd2, 0x21, 0xe6, 0xe1, 0x4d, 0x18, 0xef, 0x71,
		0x52, 0x9b, 0x5b, 0x56, 0x98, 0xa8, 0x19, 0x0e, 0x4a, 0x95, 0xc2, 0xed, 0xab, 0x12, 0x67, 0x0d,
		0x5c, 0x7d, 0xaa, 0x06, 0xae, 0x3d, 0x25, 0x03, 0x67, 0xc2, 0x62, 0x3d, 0x2f, 0x2c, 0xae, 0xc0,
		0xb4, 0x8d, 0x1d, 0x4c, 0xf1, 0x0d, 0xd3, 0xbe, 0x41, 0x5c, 0xd3, 0xef, 0x37, 0x1b, 0x9c, 0x2e,
		0x0d, 0x36, 0x7e, 0x55, 0x81, 0x99, 0xa4, 0x79, 0x3f, 0x73, 0xd2, 0xe3, 0x3b, 0x29, 0x62, 0x6b,
		0xbd, 0xeb, 0x63, 0x6b, 0x28, 0x37, 0xcd, 0xcc, 0x61, 0x25, 0x67, 0x0e, 0x8d, 0x17, 0xe1, 0x74,
		0x46, 0xa6, 0x0c, 0xba, 0x7f, 0xad, 0xc3, 0xc2, 0x36, 0x35, 0x7d, 0xfa, 0x5e, 0xb6, 0x48, 0x10,
		0xdd, 0xce, 0x41, 0x43, 0xcc, 0x8b, 0xec, 0x58, 0xb6, 0x58, 0xb9, 0x10, 0xc6, 0xcb, 0x8d, 0x30,
		0x5e, 0x29, 0x10, 0xfd, 0x0d, 0x98, 0x08, 0x5b, 0x3b, 0xfd, 0x2e, 0x96, 0x26, 0x9f, 0x09, 0x4d,
		0xfe, 0x9e, 0x82, 0x43, 0x09, 0x4a, 0xfd, 0x32, 0x8c, 0x52, 0x33, 0x38, 0x60, 0x41, 0x5b, 0x3a,
		0xfb, 0x89, 0x90, 0x6b, 0x47, 0xc2, 0x51, 0x44, 0xc1, 0x52, 0x0d, 0x71, 0xbb, 0x3d, 0xca, 0xed,
		0x39, 0x81, 0x44, 0x43, 0xdf, 0x84, 0x0b, 0x51, 0x05, 0xc7, 0xc7, 0xb7, 0xe3, 0xb5, 0x1c, 0x2f,
		0xc0, 0x3b, 0xa4, 0x83, 0xbd, 0x1e, 0xdd, 0xc6, 0x96, 0xe7, 0xda, 0x01, 0x77, 0xe5, 0x3a, 0x1a,
		0x86, 0x54, 0xbf, 0x05, 0x8b, 0xac, 0xcf, 0x12, 0x61, 0x23, 0x5c, 0xd8, 0x00, 0x2a, 0x96, 0xd0,
		0x88, 0xcd, 0xca, 0x2f, 0xda, 0x6f, 0x8e, 0x72, 0xab, 0x45, 0x6d, 0xfd, 0x2c, 0x8c, 0xc9, 0xd2,
		0x78, 0xc3, 0x96, 0x55, 0x4a, 0x0c, 0xd0, 0x11, 0xcc, 0xc6, 0xf6, 0x45, 0xb8, 0x17, 0xe0, 0x4d,
		0xcf, 0x21, 0x56, 0x9f, 0x17, 0x2a, 0x53, 0x6b, 0x67, 0x65, 0xe6, 0x7f, 0x2f, 0x8f, 0x06, 0xe5,
		0xb3, 0xea, 0xff, 0x03, 0xe3, 0x3e, 0xa6, 0x7e, 0x5f, 0x4a, 0x1a, 0xe7, 0xe6, 0x3e, 0x15, 0x9a,
		0x1b, 0xc5, 0x28, 0xa4, 0xd2, 0xe9, 0x06, 0x4c, 0x58, 0xbe, 0xe7, 0x6e, 0x5b, 0xfb, 0xd8, 0xee,
		0x39, 0x58, 0x56, 0x2c, 0x09, 0x98, 0xbe, 0x04, 0xb5, 0x0e, 0xee, 0x78, 0xbc, 0x2e, 0x19, 0x5f,
		0x9b, 0x08, 0x65, 0xde, 0xc5, 0x1d, 0x0f, 0x71, 0x8c, 0xde, 0x86, 0x13, 0x01, 0x36, 0x7d, 0x6b,
		0x7f, 0x9d, 0x52, 0x9f, 0xec, 0xf6, 0x28, 0x0e, 0x78, 0xd5, 0xa1, 0x44, 0xda, 0xed, 0x14, 0x1e,
		0x65, 0x38, 0xf4, 0x65, 0x68, 0xec, 0x63, 0xd3, 0xc6, 0x7e, 0x73, 0x9a, 0xf3, 0x4e, 0x85, 0xbc,
		0x77, 0x38, 0x14, 0x49, 0xac, 0x71, 0x0d, 0x16, 0x8b, 0x3c, 0x5d, 0x06, 0xaa, 0x19, 0xa8, 0xfb,
		0x3d, 0x77, 0xc3, 0x96, 0x9e, 0x2e, 0x1a, 0xc6, 0x6f, 0x2b, 0x60, 0xdc, 0xc6, 0x59, 0xb6, 0x3b,
		0xa2, 0x3c, 0x1b, 0xb4, 0x4e, 0xae, 0xc3, 0x58, 0xe4, 0x5e, 0x32, 0x8a, 0xbd, 0x98, 0x5e, 0x04,
		0xb1, 0x2a, 0x31, 0x2d, 0x8b, 0x2d, 0x1d, 0xf3, 0x88, 0x74, 0x7a, 0x9d, 0xcd, 0xb0, 0x00, 0xaa,
		0x72, 0x0f, 0x4b, 0x83, 0xb3, 0x75, 0x48, 0x2d, 0xa7, 0x0e, 0x61, 0xf2, 0x1e, 0x9b, 0x84, 0xde,
		0xf2, 0xfc, 0x7b, 0xf8, 0xf1, 0xcd, 0x43, 0xec, 0x52, 0x19, 0x82, 0xd2, 0x60, 0xfd, 0x5d, 0x98,
		0x93, 0x83, 0xe3, 0xed, 0x5b, 0xc4, 0xa1, 0xd8, 0xe7, 0x8b, 0xb8, 0xc1, 0x3d, 0x6d, 0x41, 0x7a,
		0x5a, 0x3e, 0x11, 0x2a, 0x60, 0x36, 0xbe, 0xab, 0xc1, 0x85, 0x52, 0x43, 0xca, 0x69, 0x78, 0x19,
		0x46, 0x64, 0xe9, 0x2b, 0x93, 0xc5, 0x74, 0x34, 0xa3, 0x92, 0x32, 0xc4, 0x0f, 0x57, 0x81, 0xb1,
		0x25, 0x67, 0xf2, 0xda, 0x15, 0xdb, 0xdc, 0x84, 0xa3, 0x28, 0x6a, 0x1b, 0x3f, 0xd4, 0x60, 0x7e,
		0xd3, 0x73, 0x9c, 0x5b, 0x9e, 0xdf, 0x96, 0x5b, 0x42, 0x16, 0x64, 0x06, 0xcd, 0xaa, 0x1a, 0xa3,
		0x2a, 0x03, 0x63, 0x94, 0xba, 0xe6, 0xab, 0xa9, 0x35, 0xbf, 0x0c, 0x53, 0xbb, 0x3c, 0x81, 0xb6,
		0xf6, 0xb1, 0x75, 0x10, 0xf4, 0x3a, 0x7c, 0xf6, 0xc6, 0x50, 0x0a, 0x6a, 0xfc, 0xb4, 0x01, 0x67,
		0x72, 0x15, 0x95, 0x56, 0x3b, 0x0b, 0x63, 0xac, 0x3f, 0x61, 0x06, 0x8d, 0x9b, 0x21, 0x06, 0xe8,
		0xb7, 0xe1, 0x64, 0x66, 0x1b, 0x38, 0xd8, 0x1b, 0xb3, 0x3c, 0x1f, 0x23, 0xac, 0x5f, 0x83, 0xb9,
		0xae, 0x8f, 0x0f, 0x89, 0xd7, 0x0b, 0xf8, 0x3a, 0xc4, 0x36, 0x77, 0x90, 0x0d, 0x5b, 0xa6, 0xcc,
		0x02, 0x2c, 0x33, 0x50, 0x90, 0xa4, 0xaf, 0x73, 0xfa, 0x14, 0x54, 0x6f, 0xc2, 0x88, 0x49, 0x29,
		0xee, 0x74, 0x29, 0x77, 0xd3, 0x2a, 0x0a, 0x9b, 0xfa, 0x2b, 0x70, 0x62, 0xd7, 0xb4, 0x0e, 0x1c,
		0x6f, 0xaf, 0xe5, 0xf5, 0x5c, 0x7a, 0x87, 0xb8, 0x94, 0x07, 0xeb, 0x2a, 0xca, 0xc0, 0x55, 0xe7,
		0x1b, 0x3d, 0xae, 0xf3, 0x8d, 0xe5, 0x39, 0xdf, 0xab, 0x50, 0xff, 0xa0, 0x87, 0x7d, 0x11, 0xa5,
		0xc7, 0xd7, 0x66, 0xd3, 0x96, 0xda, 0x62, 0x48, 0x24, 0x68, 0xf4, 0x7b, 0xf0, 0x62, 0x66, 0x16,
		0x42, 0x7f, 0x92, 0xc1, 0x39, 0xeb, 0x67, 0xc5, 0x2c, 0x6c, 0x7f, 0x19, 0xc8, 0x78, 0x6c, 0xb3,
		0x3c, 0x14, 0x50, 0xb3, 0xd3, 0xe5, 0xd1, 0xba, 0x8a, 0x72, 0x30, 0xcc, 0x52, 0xd2, 0xaa, 0x31,
		0xf5, 0xa4, 0xb0, 0x54, 0x1a, 0xae, 0x6f, 0xc3, 0x08, 0x53, 0x9a, 0xf0, 0xa0, 0xcd, 0x36, 0x50,
		0xff, 0x9b, 0xd9, 0x40, 0x95, 0xf8, 0xeb, 0xea, 0x96, 0xe0, 0x15, 0x1b, 0xf5, 0x50, 0xd2, 0xfc,
		0x16, 0x4c, 0xa8, 0x88, 0x9c, 0xad, 0xe5, 0xab, 0xea, 0xd6, 0xb2, 0xd8, 0x9e, 0xf1, 0x8e, 0xf3,
		0x9f, 0x35, 0xb8, 0x20, 0x7a, 0xb5, 0x55, 0x45, 0x5a, 0x5e, 0xa7, 0xcb, 0x0a, 0x58, 0x3b, 0x5c,
		0xea, 0xe5, 0x0b, 0x68, 0x15, 0xc6, 0xc2, 0x23, 0xa3, 0xa0, 0x59, 0xe1, 0xe3, 0x8d, 0x66, 0x22,
		0x14, 0x8b, 0x62, 0x12, 0x66, 0xc9, 0x28, 0x94, 0xb7, 0x3c, 0x97, 0xe2, 0x23, 0xca, 0xd7, 0xca,
		0x04, 0xca, 0xc0, 0x13, 0xe1, 0xa1, 0x96, 0x0a, 0x0f, 0x77, 0xd9, 0x8c, 0x10, 0xeb, 0xa0, 0xaf,
		0xe4, 0xc8, 0x3a, 0x1f, 0xf9, 0xf9, 0x28, 0x47, 0x72, 0x7c, 0x34, 0xf9, 0x89, 0x64, 0x99, 0x62,
		0x65, 0xbb, 0x7d, 0x1f, 0xd3, 0x9e, 0xef, 0xde, 0xc3, 0x8f, 0x55, 0x6b, 0xf0, 0x25, 0x33, 0x8a,
		0xf2, 0x91, 0xfa, 0x5b, 0x30, 0xff, 0xc8, 0xf3, 0x2d, 0xdc, 0xf2, 0xb1, 0x49, 0x71, 0x9a, 0x75,
		0x84, 0xb3, 0x96, 0x50, 0xe4, 0xc4, 0xb8, 0xd1, 0xbc, 0x18, 0xa7, 0xbf, 0x0f, 0x13, 0x7c, 0x1d,
		0x20, 0x1c, 0xf4, 0x1c, 0x1a, 0x34, 0xc7, 0xb8, 0x9d, 0x6f, 0xe5, 0x9c, 0xfb, 0x0c, 0x9c, 0xce,
		0xd5, 0x2d, 0x45, 0x90, 0x70, 0xb2, 0x84, 0xec, 0xf9, 0x2f, 0xc3, 0xc9, 0x0c, 0x49, 0x8e, 0xbb,
		0xfd, 0x57, 0xd2, 0xdd, 0xce, 0xe4, 0xbb, 0x1b, 0x97, 0xa1, 0x3a, 0xdd, 0x11, 0x5c, 0x2c, 0x57,
		0x52, 0x46, 0xed, 0x4d, 0x98, 0xb0, 0x55, 0x5b, 0x8a, 0x84, 0x77, 0xf9, 0x38, 0x2b, 0x09, 0x25,
		0x24, 0x18, 0x7f, 0xd4, 0x60, 0x29, 0xa7, 0xeb, 0x5b, 0x26, 0x71, 0x86, 0xf5, 0xf5, 0xab, 0x50,
		0xb7, 0xcc, 0x5e, 0x20, 0xc6, 0x3c, 0xb5, 0xb6, 0x28, 0xd3, 0x7d, 0x56, 0x5c, 0x8b, 0x51, 0x21,
		0x41, 0xcc, 0xe2, 0xaf, 0x8d, 0xa9, 0x49, 0x9c, 0x40, 0x3a, 0x7a, 0xd8, 0x2c, 0xf5, 0xef, 0xac,
		0x6b, 0xd4, 0x73, 0xd3, 0xdf, 0x05, 0x38, 0x5f, 0x32, 0x2a, 0xb9, 0x9b, 0xf9, 0x75, 0x9c, 0xcc,
		0xd7, 0x2d, 0x4a, 0x0e, 0xd9, 0x0e, 0xe8, 0x99, 0x26, 0xf3, 0x36, 0x9c, 0x08, 0xe9, 0xee, 0x62,
		0x6a, 0xf2, 0xc3, 0xcb, 0x5a, 0xb2, 0xa2, 0xdd, 0x49, 0xe1, 0x51, 0x86, 0xc3, 0xf8, 0x71, 0x9c,
		0xea, 0x93, 0xc3, 0x78, 0xb6, 0xa9, 0x7e, 0x11, 0xc0, 0x94, 0xdd, 0x6f, 0xd8, 0xe1, 0x41, 0x74,
		0x0c, 0x61, 0xa5, 0x40, 0xd8, 0xe2, 0xa5, 0x40, 0x2d, 0x59, 0x0a, 0xac, 0x2b, 0x38, 0x94, 0xa0,
		0x2c, 0xd8, 0xb3, 0xe5, 0x27, 0xab, 0x46, 0x61, 0xb2, 0x6a, 0xc3, 0x42, 0x08, 0x2d, 0xdb, 0x90,
		0x95, 0x13, 0xe5, 0xa6, 0xbc, 0xd1, 0x82, 0x94, 0xf7, 0x16, 0xcc, 0x07, 0xc5, 0xfb, 0xbf, 0x31,
		0xde, 0x5d, 0x09, 0x85, 0xfe, 0x06, 0x9c, 0xde, 0xc7, 0xa6, 0x4f, 0x77, 0xb1, 0x49, 0x53, 0xcc,
		0xc0, 0x99, 0x8b, 0xd0, 0x6a, 0x71, 0x33, 0xce, 0x29, 0xa3, 0xe2, 0xe6, 0x0e, 0x9c, 0xcb, 0xda,
		0xe6, 0xfe, 0xa3, 0x9d, 0x7d, 0x12, 0xac, 0x4b, 0x0e, 0x91, 0xef, 0x07, 0x91, 0x31, 0x4b, 0x44,
		0xdd, 0xb7, 0xe5, 0x4a, 0x9e, 0x14, 0x29, 0x2b, 0x0d, 0xcf, 0x94, 0x81, 0x53, 0x43, 0x97, 0x81,
		0xcb, 0x30, 0x15, 0xb6, 0xe5, 0x41, 0xc8, 0xb4, 0x58, 0xf0, 0x49, 0xa8, 0xb2, 0xad, 0x3b, 0x51,
		0xba, 0xad, 0x3b, 0x02, 0x03, 0x61, 0xcb, 0xf3, 0x6d, 0x75, 0xa9, 0xdc, 0x09, 0xf5, 0x1d, 0x2e,
		0xe0, 0x29, 0xa1, 0xab, 0x52, 0x1c, 0xba, 0x52, 0x8b, 0xdd, 0xb8, 0xcf, 0xea, 0x8a, 0x92, 0x9e,
		0xe5, 0x6a, 0x5d, 0x81, 0x69, 0xcb, 0x74, 0x2d, 0xec, 0x48, 0x5d, 0xb0, 0xd8, 0x5f, 0x8e, 0xa2,
		0x34, 0xd8, 0xf8, 0xbd, 0x06, 0xcb, 0x25, 0x12, 0x6f, 0xf4, 0x37, 0xda, 0xc7, 0x39, 0x95, 0x69,
		0x67, 0x4e, 0x65, 0xda, 0xe1, 0x16, 0xb7, 0x2d, 0x07, 0x23, 0x1a, 0x89, 0x95, 0xde, 0x96, 0x21,
		0x5a, 0x81, 0xa8, 0xf6, 0xa9, 0x17, 0xdb, 0xa7, 0x91, 0xb2, 0xcf, 0x36, 0x5c, 0x1a, 0x38, 0x9a,
		0x63, 0xdb, 0xe8, 0x71, 0x54, 0xcc, 0xa9, 0x52, 0x8f, 0x59, 0xcc, 0xcd, 0x41, 0xc3, 0xe7, 0x29,
		0x5b, 0x4e, 0xb7, 0x6c, 0x95, 0xce, 0xf6, 0x72, 0x94, 0xd1, 0x0b, 0x3a, 0x96, 0x39, 0xe8, 0x77,
		0x1a, 0x1b, 0x76, 0x31, 0xe1, 0xf3, 0x9b, 0xc5, 0x78, 0xd4, 0xf5, 0xc2, 0x51, 0xa7, 0xe7, 0xf0,
		0x15, 0x58, 0x19, 0x3c, 0x18, 0x39, 0xf2, 0x6f, 0xc7, 0x95, 0x87, 0x4a, 0x7c, 0x9c, 0xca, 0x83,
		0xab, 0x68, 0x06, 0xd1, 0xc5, 0xa8, 0x6c, 0x3d, 0x59, 0x6d, 0xa1, 0xd4, 0x0c, 0x79, 0xfa, 0x48,
		0xad, 0xff, 0xac, 0xe5, 0x4e, 0xac, 0xa0, 0x7a, 0xce, 0x93, 0xc5, 0x2d, 0x51, 0x2f, 0xb2, 0x44,
		0xa3, 0xd8, 0x12, 0x23, 0x29, 0x4b, 0x5c, 0x82, 0x97, 0x06, 0x8c, 0x51, 0x5a, 0x83, 0x47, 0xd3,
		0xec, 0x7c, 0xf3, 0x45, 0x38, 0xec, 0x24, 0x3e, 0x59, 0x34, 0x7d, 0x29, 0x7f, 0x61, 0x47, 0x3d,
		0x4b, 0x05, 0x45, 0x8c, 0x2c, 0xa4, 0xfb, 0x77, 0x8b, 0x91, 0x2f, 0xe7, 0x07, 0x8b, 0xc4, 0x68,
		0xe4, 0xc8, 0x7f, 0xa9, 0xb1, 0x49, 0xe4, 0x43, 0x13, 0xf8, 0x63, 0x1f, 0xd9, 0x3f, 0xb5, 0xca,
		0xb0, 0xac, 0x04, 0x4e, 0x9c, 0x61, 0xd7, 0x52, 0x67, 0xd8, 0xc6, 0x0a, 0x9b, 0xbd, 0xf2, 0x31,
		0xc8, 0xe1, 0x7e, 0x58, 0x81, 0xc5, 0x6d, 0xb2, 0xe7, 0x9a, 0xcf, 0x71, 0x9c, 0x8b, 0x00, 0x01,
		0x57, 0x81, 0x3f, 0x53, 0x90, 0x15, 0x70, 0x0c, 0x89, 0xeb, 0xd8, 0x9a, 0x5a, 0xc7, 0xaa, 0xd6,
		0xa9, 0x97, 0x59, 0xa7, 0x91, 0x3e, 0xe1, 0x6f, 0xc2, 0x88, 0xe5, 0xb9, 0xd4, 0xf7, 0x1c, 0xbe,
		0x82, 0x27, 0x50, 0xd8, 0x34, 0xce, 0xc3, 0xb9, 0x42, 0x63, 0x48, 0x83, 0x7d, 0xd4, 0x80, 0x4b,
		0x92, 0x86, 0xd0, 0xfd, 0xcf, 0x2e, 0x75, 0xfe, 0x73, 0x2f, 0x75, 0x92, 0x6e, 0x3b, 0x9e, 0x71,
		0xdb, 0x25, 0x18, 0x17, 0xad, 0x0d, 0x6e, 0xe3, 0x09, 0x6e, 0x63, 0x15, 0xa4, 0x3a, 0xe2, 0x64,
		0xc2, 0x11, 0xd3, 0x17, 0x46, 0x53, 0x4f, 0x78, 0x61, 0x34, 0x5d, 0x72, 0x61, 0x74, 0xe2, 0x58,
		0x17, 0x46, 0x27, 0x3f, 0xc6, 0x85, 0x91, 0x5e, 0xba, 0xb3, 0xf8, 0x02, 0xac, 0x0c, 0x5e, 0x4f,
		0xa5, 0x57, 0x47, 0x7f, 0xd3, 0x60, 0x01, 0xe1, 0x00, 0xd3, 0xe7, 0x17, 0xc2, 0xe2, 0x3a, 0xa2,
		0x9a, 0xa8, 0x23, 0xae, 0xc2, 0x6c, 0x78, 0x6c, 0x74, 0x8b, 0xb8, 0x24, 0xd8, 0x4f, 0x1e, 0xc6,
		0xe7, 0x23, 0x93, 0xbe, 0x5c, 0x4f, 0x07, 0xf7, 0x6b, 0xb0, 0x58, 0x34, 0xda, 0x52, 0x33, 0xfd,
		0x41, 0x83, 0xf3, 0x3b, 0xd8, 0xef, 0x10, 0xd7, 0xa4, 0xf8, 0xd3, 0x67, 0x2a, 0x25, 0xb3, 0xd7,
		0x8a, 0x33, 0x7b, 0x2a, 0xd2, 0x1b, 0x17, 0xc1, 0x28, 0x1b, 0x93, 0x0c, 0xda, 0x7f, 0xa9, 0xc0,
		0x79, 0x16, 0xf1, 0xee, 0x77, 0xb1, 0x9b, 0xa1, 0x0a, 0x06, 0x0d, 0x3d, 0xe7, 0x8a, 0xb0, 0x32,
		0xe4, 0x15, 0x61, 0x35, 0xef, 0xae, 0x62, 0x1d, 0xa6, 0x45, 0x90, 0x23, 0x1d, 0x2c, 0x2e, 0xee,
		0x64, 0xac, 0x3e, 0x1d, 0x9f, 0x35, 0x27, 0xd0, 0x28, 0x4d, 0xaf, 0xbf, 0x0d, 0xd3, 0x51, 0xe0,
		0x95, 0x22, 0xc4, 0x71, 0xf5, 0xb9, 0xc2, 0xb9, 0x10, 0x64, 0x77, 0x5e, 0x40, 0x69, 0x4e, 0xfd,
		0xff, 0x01, 0x68, 0xbf, 0x1b, 0xaa, 0xd2, 0xe0, 0x72, 0xe6, 0xf3, 0x92, 0x4d, 0x24, 0x42, 0xa1,
		0xbf, 0x31, 0x06, 0x23, 0xe2, 0x57, 0x60, 0x7c, 0x53, 0x03, 0xa3, 0xcc, 0xcc, 0xd2, 0x3d, 0x3f,
		0x07, 0x10, 0xa9, 0x10, 0x3e, 0x0b, 0x5b, 0x28, 0xd4, 0x5b, 0x3c, 0x5a, 0x89, 0x19, 0x86, 0x7c,
		0x0f, 0xf6, 0x83, 0x2a, 0x5c, 0x60, 0xba, 0xf0, 0x3c, 0x62, 0x7f, 0x36, 0xe9, 0x4f, 0x75, 0xd2,
		0xf5, 0x37, 0x61, 0x22, 0xe0, 0x0f, 0x1b, 0x25, 0xff, 0x48, 0xb2, 0x42, 0xd9, 0x56, 0x70, 0x77,
		0x5e, 0x40, 0x09, 0x5a, 0xd5, 0x61, 0x3e, 0xd4, 0xe0, 0x62, 0xf9, 0x24, 0x3d, 0x4b, 0x97, 0xf9,
		0x8e, 0x06, 0x0b, 0x4c, 0x9b, 0xe3, 0x3b, 0x8b, 0xfa, 0x7c, 0xb2, 0x32, 0xe8, 0xf9, 0x64, 0xae,
		0x7b, 0xcc, 0x84, 0xf7, 0x97, 0xa2, 0x96, 0x17, 0x0d, 0xe3, 0xeb, 0x1a, 0x2c, 0x16, 0x69, 0xf4,
		0x2c, 0x2d, 0xf3, 0x7d, 0x0d, 0x5e, 0x62, 0x7a, 0xac, 0xcb, 0xfb, 0xfc, 0x4f, 0x8f, 0x85, 0xbe,
		0xa5, 0xc1, 0xf2, 0x20, 0xcd, 0x9e, 0xb5, 0x0f, 0x6d, 0x5b, 0xa6, 0xfb, 0xe9, 0xf2, 0xa1, 0x22,
		0x8d, 0x9e, 0xa5, 0x65, 0xee, 0xc1, 0x22, 0xbf, 0xff, 0x3f, 0xbe, 0x65, 0xa2, 0x71, 0x55, 0xd4,
		0x71, 0x5d, 0x87, 0x73, 0x85, 0xf2, 0xe2, 0x3a, 0xc8, 0x62, 0x24, 0x5c, 0x5e, 0x15, 0x89, 0x86,
		0x71, 0x16, 0xe6, 0x6f, 0x63, 0x9a, 0xa9, 0x60, 0x85, 0x12, 0xc6, 0x2f, 0x34, 0x38, 0x93, 0x8b,
		0x96, 0x32, 0xbf, 0x08, 0xb5, 0x03, 0xdc, 0x0f, 0xad, 0x74, 0x2d, 0x73, 0x85, 0x58, 0xc2, 0xbb,
		0xfa, 0x36, 0xee, 0xcb, 0x4b, 0x52, 0x2e, 0x63, 0x7e, 0x13, 0xc6, 0x22, 0x50, 0xce, 0xa5, 0xe8,
		0x6b, 0xea, 0xa5, 0xe8, 0xd4, 0xda, 0x69, 0xb9, 0x49, 0xd9, 0x70, 0x6d, 0x7c, 0x84, 0xed, 0x07,
		0x0c, 0xc5, 0xb7, 0x80, 0xca, 0x85, 0xe8, 0xf7, 0x2a, 0xd1, 0xe1, 0x20, 0xbf, 0x32, 0x7d, 0x82,
		0x53, 0xdb, 0x16, 0x4c, 0x5a, 0x21, 0x07, 0xdf, 0x7d, 0x56, 0x12, 0xaf, 0x91, 0xb2, 0x62, 0xb9,
		0x0e, 0x49, 0x1e, 0xb6, 0xf7, 0x51, 0xae, 0x81, 0xa5, 0xbb, 0xaa, 0x20, 0xb6, 0x55, 0xc1, 0xbe,
		0xef, 0xf9, 0x77, 0x71, 0x10, 0x98, 0x7b, 0x58, 0xfa, 0x6c, 0x02, 0x16, 0xd6, 0x9c, 0xd1, 0xf3,
		0x4e, 0xfe, 0xb2, 0xb5, 0x9e, 0xad, 0x39, 0x13, 0x04, 0x28, 0xcb, 0xa3, 0x1c, 0x51, 0xe6, 0x59,
		0x45, 0x16, 0x89, 0x1d, 0x98, 0xe7, 0x75, 0xb5, 0xb8, 0xe8, 0x8f, 0xb6, 0xcb, 0x9f, 0xd0, 0xc3,
		0x33, 0x63, 0x01, 0xce, 0xe4, 0x76, 0x27, 0xb5, 0xf9, 0x79, 0x05, 0x66, 0xb8, 0xb2, 0xa1, 0x90,
		0x4f, 0xec, 0x05, 0x5c, 0xf4, 0x74, 0xa6, 0x3a, 0xc4, 0xd3, 0x99, 0xfb, 0x30, 0x23, 0x67, 0xf1,
		0x7d, 0x6c, 0xd1, 0x96, 0xe7, 0xda, 0x24, 0x7a, 0x2e, 0x3d, 0xb5, 0x76, 0x46, 0x75, 0x92, 0x14,
		0x09, 0xca, 0x65, 0x64, 0x3b, 0x73, 0x0e, 0x6f, 0x79, 0x6e, 0x40, 0x02, 0x8a, 0x5d, 0xab, 0xff,
		0x0e, 0x3e, 0xc4, 0x0e, 0x9f, 0xe7, 0x78, 0x67, 0xbe, 0x95, 0x47, 0x83, 0xf2, 0x59, 0x8d, 0x43,
		0x98, 0x4d, 0x99, 0x4e, 0x2e, 0xde, 0x94, 0x5b, 0x6a, 0x59, 0xb7, 0xfc, 0x3f, 0x98, 0x54, 0xd4,
		0xc4, 0x76, 0xfa, 0xfd, 0xcb, 0x96, 0x8a, 0x44, 0x49, 0x5a, 0x23, 0x80, 0xa5, 0xf0, 0x0b, 0x82,
		0x63, 0xef, 0xaf, 0x9e, 0xd8, 0x8f, 0xfe, 0x5e, 0x81, 0xf3, 0x25, 0xbd, 0xca, 0x91, 0x7f, 0x05,
		0xe6, 0xd4, 0x07, 0x31, 0xca, 0x23, 0x6d, 0x2d, 0xf9, 0x48, 0x3b, 0x23, 0x22, 0xf9, 0x48, 0xbb,
		0x40, 0x8a, 0xbe, 0x1d, 0x1f, 0xb0, 0x24, 0x12, 0x85, 0x1c, 0xca, 0x80, 0x6c, 0x92, 0xcf, 0xab,
		0x6f, 0xc0, 0xc9, 0x2e, 0x76, 0x6d, 0xe2, 0xee, 0xc9, 0x63, 0x5b, 0x82, 0x83, 0x66, 0x95, 0x07,
		0xde, 0xe8, 0x85, 0xc8, 0x66, 0x82, 0xa0, 0x2f, 0x22, 0x40, 0x86, 0x8b, 0xd5, 0xce, 0x12, 0xd8,
		0xda, 0x27, 0x8e, 0xed, 0xf3, 0xe7, 0x9b, 0x55, 0xf5, 0x7d, 0xcf, 0xa6, 0x82, 0x4e, 0x6a, 0x97,
		0xe6, 0x34, 0x3e, 0xd2, 0xe0, 0x74, 0x68, 0xf2, 0x61, 0xe3, 0xc4, 0xf1, 0x5e, 0x3f, 0x5c, 0x87,
		0x89, 0xf0, 0x77, 0x74, 0x02, 0x38, 0xb5, 0x76, 0x4a, 0x2e, 0x86, 0x1d, 0x05, 0x85, 0x12, 0x84,
		0xfa, 0x55, 0x98, 0x25, 0xae, 0xe5, 0xf4, 0xec, 0x48, 0x31, 0xf9, 0xdd, 0x52, 0x4d, 0xbc, 0x3c,
		0xca, 0x45, 0x1a, 0xdf, 0xd0, 0xa0, 0x99, 0x1d, 0x90, 0x74, 0x9d, 0xcb, 0x30, 0xd2, 0xf5, 0x1c,
		0x07, 0xfb, 0x61, 0xd2, 0x8b, 0xbe, 0x2a, 0xd8, 0xe4, 0x60, 0x6e, 0xa3, 0x90, 0x44, 0x7f, 0x0b,
		0xa6, 0x68, 0xb2, 0x67, 0x31, 0xda, 0xb9, 0xf4, 0x68, 0xe5, 0x27, 0x53, 0x29, 0x6a, 0x63, 0x0b,
		0x16, 0x6e, 0x63, 0xaa, 0x7c, 0x24, 0x20, 0x93, 0x41, 0x54, 0x25, 0xbc, 0x0e, 0x0d, 0xca, 0x12,
		0x55, 0xa8, 0x4d, 0x33, 0x3e, 0x15, 0x8b, 0x78, 0x78, 0x26, 0x43, 0x92, 0xce, 0xf8, 0x87, 0x06,
		0x8b, 0x45, 0x32, 0xe5, 0x18, 0x5d, 0x98, 0xee, 0x48, 0xd8, 0x8d, 0xfe, 0xf6, 0xbe, 0xe9, 0xdb,
		0x52, 0x7a, 0x3b, 0x2f, 0xc1, 0x97, 0x48, 0x5a, 0xbd, 0x9b, 0x14, 0x23, 0xd2, 0x7d, 0x5a, 0xf8,
		0xfc, 0x43, 0x98, 0xc9, 0x23, 0x54, 0x8b, 0x80, 0x7a, 0xf9, 0xcb, 0xa8, 0x3c, 0x1d, 0x94, 0x42,
		0xe0, 0x67, 0xe2, 0x15, 0x70, 0xe6, 0x93, 0x8b, 0xb4, 0x35, 0xaf, 0xc1, 0x9c, 0x63, 0xb2, 0xc9,
		0xa6, 0x3e, 0xc1, 0x87, 0xd8, 0x96, 0x78, 0x79, 0x76, 0x54, 0x45, 0x05, 0xd8, 0x90, 0x6f, 0xd3,
		0xf7, 0x2c, 0x1c, 0x04, 0x2a, 0x5f, 0x25, 0xe6, 0xcb, 0x62, 0x59, 0x04, 0xb6, 0x94, 0x6f, 0x12,
		0xc5, 0x11, 0x90, 0x0a, 0x32, 0x1e, 0xc2, 0xc5, 0x72, 0xc5, 0xe5, 0x94, 0x5d, 0x87, 0xd1, 0xd0,
		0xaa, 0x32, 0x86, 0x95, 0xda, 0x26, 0x22, 0x36, 0x7e, 0xa4, 0xc1, 0x0c, 0xc2, 0x66, 0xb7, 0xeb,
		0x88, 0xb7, 0xd3, 0x91, 0x2d, 0x16, 0xc3, 0x2f, 0x68, 0xee, 0xc5, 0x1f, 0x80, 0x28, 0x90, 0xa7,
		0x77, 0x04, 0xb6, 0x02, 0x0d, 0xcc, 0x7b, 0x96, 0x29, 0x37, 0x7e, 0xe2, 0x68, 0x52, 0xf3, 0x86,
		0xe3, 0xed, 0x22, 0x89, 0x37, 0x4e, 0xc3, 0x6c, 0x4a, 0x55, 0x31, 0xfa, 0x1b, 0xd7, 0xbe, 0x74,
		0x75, 0x8f, 0xd0, 0xfd, 0xde, 0x2e, 0x63, 0xbd, 0x42, 0x71, 0xa7, 0xeb, 0xf9, 0xa6, 0x43, 0xbc,
		0xe8, 0xe7, 0x6b, 0xfc, 0xb3, 0xd9, 0x2b, 0x29, 0xef, 0xdd, 0x6d, 0x70, 0xf0, 0x7f, 0xff, 0x2b,
		0x00, 0x00, 0xff, 0xff, 0x62, 0x0f, 0x6c, 0x5e, 0x2d, 0x3c, 0x00, 0x00,
	},
	// enums/enums.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x59, 0xdb, 0x72, 0x1c, 0xb7,
		0xd1, 0xde, 0x59, 0x1e, 0x24, 0xb6, 0x28, 0x11, 0x04, 0x0f, 0x22, 0x25, 0xea, 0x40, 0x4a, 0xd4,
		0x61, 0xac, 0x83, 0x2d, 0xdb, 0xbf, 0xed, 0x5f, 0x71, 0x52, 0xcb, 0x25, 0x19, 0x53, 0xb6, 0x48,
		0x65, 0x97, 0xb4, 0xab, 0x9c, 0x0b, 0x67, 0x38, 0xd3, 0x22, 0x61, 0xce, 0x02, 0x1b, 0x0c, 0x86,
		0xd4, 0xa6, 0x72, 0x95, 0xe4, 0x2a, 0x95, 0x57, 0xc8, 0x75, 0x5e, 0x21, 0xcf, 0x90, 0xaa, 0x3c,
		0x49, 0x5e, 0x22, 0x85, 0x39, 0x2d, 0x66, 0x76, 0x66, 0xb8, 0xb9, 0x21, 0x17, 0xe8, 0xaf, 0x1b,
		0xdd, 0x8d, 0xee, 0x46, 0x03, 0x03, 0xf3, 0xc8, 0xc3, 0x5e, 0xf0, 0x32, 0xfa, 0xfb, 0xa2, 0x2f,
		0x85, 0x12, 0x74, 0x2a, 0x1a, 0xd8, 0x7f, 0xb7, 0x60, 0xe9, 0x07, 0x21, 0xcf, 0xde, 0xfb, 0xe2,
		0x62, 0xcf, 0xeb, 0x60, 0x18, 0xe0, 0x3b, 0xe1, 0x33, 0x77, 0x40, 0x3f, 0x81, 0xe7, 0xa5, 0x84,
		0x96, 0xef, 0x8b, 0x8b, 0xed, 0xb0, 0xef, 0x33, 0xd7, 0x51, 0xb8, 0xeb, 0x30, 0x1f, 0xbd, 0x03,
		0xee, 0x0f, 0x48, 0x83, 0x3e, 0x86, 0x07, 0x63, 0xb0, 0x10, 0x8b, 0x3e, 0x81, 0x87, 0xa5, 0xc0,
		0x0e, 0xfe, 0x8c, 0xae, 0x1a, 0x22, 0x9b, 0xf6, 0x4f, 0x30, 0xbb, 0x2d, 0x7a, 0x0e, 0xe3, 0x5d,
		0xe5, 0xa8, 0x30, 0xa0, 0xb7, 0x60, 0xd9, 0x1c, 0x77, 0xf0, 0x84, 0x05, 0x0a, 0x25, 0x7a, 0xa4,
		0x51, 0xa4, 0x6d, 0x63, 0x5f, 0xa2, 0x16, 0xe3, 0x11, 0x8b, 0xde, 0x84, 0x85, 0x3c, 0xcd, 0x47,
		0x4d, 0x68, 0xda, 0x7f, 0xb1, 0xe0, 0xda, 0x21, 0xeb, 0xa1, 0x08, 0xd5, 0xe1, 0xa0, 0x8f, 0xf4,
		0x36, 0xdc, 0x34, 0x86, 0x5d, 0xe5, 0x48, 0x75, 0x28, 0xda, 0xbe, 0x08, 0x90, 0x34, 0xe8, 0x5d,
		0xb8, 0x65, 0x12, 0xdd, 0x53, 0xf4, 0x42, 0x1f, 0x0f, 0x45, 0x04, 0x23, 0x56, 0x25, 0x3d, 0xe6,
		0x6f, 0xd2, 0x15, 0x58, 0x34, 0xe8, 0xdf, 0xa0, 0x23, 0xd5, 0x31, 0x3a, 0x8a, 0x4c, 0xd8, 0x21,
		0xcc, 0xbf, 0x73, 0x24, 0x72, 0x15, 0x41, 0x93, 0x2d, 0x58, 0x83, 0x95, 0x91, 0xc9, 0xd6, 0xb1,
		0xc3, 0x3d, 0xc1, 0x49, 0x83, 0x6e, 0xc0, 0xdd, 0x11, 0x6a, 0x07, 0x7f, 0x1f, 0x62, 0xa0, 0xda,
		0x0e, 0x77, 0xd1, 0x8f, 0x15, 0x1a, 0xc1, 0x1c, 0xa2, 0xec, 0x31, 0x1e, 0xbb, 0xf7, 0x1f, 0x93,
		0x30, 0xbb, 0x8d, 0x2e, 0x0b, 0x98, 0xe0, 0x91, 0xf9, 0x0f, 0xe1, 0xbe, 0x39, 0x4e, 0x4d, 0x68,
		0xb9, 0x8a, 0x9d, 0x33, 0x35, 0x38, 0x74, 0x82, 0x33, 0xd2, 0xa0, 0x4f, 0x61, 0xd3, 0x44, 0xe5,
		0x56, 0xcd, 0x41, 0xad, 0x68, 0x53, 0x4c, 0x81, 0x91, 0x43, 0x59, 0x0f, 0x25, 0x69, 0x16, 0xc5,
		0xb4, 0x45, 0xaf, 0xaf, 0xb7, 0x25, 0x0d, 0x8d, 0x9d, 0x0f, 0xe8, 0x86, 0x8a, 0x09, 0x4e, 0x26,
		0xe8, 0x26, 0xac, 0x9b, 0x50, 0x1d, 0x76, 0xa3, 0xb0, 0x49, 0xbd, 0x7b, 0x39, 0x89, 0x91, 0x46,
		0xf1, 0x72, 0x53, 0x3a, 0x3c, 0x47, 0x89, 0xa3, 0x52, 0xa6, 0xe9, 0xff, 0xc1, 0xab, 0x4a, 0xf3,
		0x76, 0x3e, 0x28, 0x94, 0xdc, 0x29, 0xe1, 0xbb, 0xa2, 0xf7, 0x2b, 0xcf, 0xe7, 0x0a, 0xe9, 0xbd,
		0x75, 0xe4, 0x19, 0x4a, 0x72, 0x95, 0xbe, 0x00, 0x3b, 0x6f, 0x2d, 0x57, 0x8c, 0x87, 0xd8, 0x0a,
		0xf6, 0xf1, 0x62, 0x54, 0xda, 0x0c, 0xfd, 0x08, 0x1e, 0x8f, 0x78, 0xae, 0x7d, 0xca, 0x7c, 0x6f,
		0x14, 0x0c, 0xf4, 0x25, 0x7c, 0x94, 0x03, 0xb3, 0x13, 0xee, 0xd4, 0xe8, 0x7a, 0xad, 0xa8, 0xcd,
		0x51, 0x3f, 0x40, 0xa9, 0x52, 0x60, 0x17, 0x1d, 0xe9, 0x9e, 0xb6, 0x94, 0x92, 0xec, 0x38, 0x54,
		0x18, 0x90, 0x59, 0xfb, 0xdf, 0xd7, 0x61, 0x66, 0xe7, 0x1c, 0x79, 0x9c, 0x25, 0x9b, 0xb0, 0x9e,
		0x0d, 0x46, 0xa4, 0x47, 0x9a, 0x46, 0x19, 0xf9, 0x18, 0x1e, 0x54, 0xc3, 0xd2, 0xed, 0xd6, 0xe9,
		0xf9, 0x10, 0xee, 0x57, 0x03, 0xe3, 0x1a, 0x43, 0x9a, 0xf4, 0x11, 0x6c, 0x54, 0xa3, 0xf4, 0x2e,
		0x7b, 0x07, 0xa1, 0x22, 0x13, 0x3a, 0x33, 0x32, 0x5c, 0x66, 0xa4, 0x13, 0x9c, 0xa5, 0xd1, 0xec,
		0x91, 0x49, 0x7a, 0x1f, 0xd6, 0xca, 0x31, 0x89, 0xf2, 0x53, 0x95, 0x52, 0x86, 0x7a, 0x4f, 0xd3,
		0x75, 0xb8, 0x53, 0x8a, 0xc9, 0x94, 0xb9, 0x42, 0xef, 0xc1, 0xed, 0x52, 0x48, 0x62, 0xd5, 0xd5,
		0xdc, 0x3a, 0x66, 0xf2, 0x0c, 0xb5, 0x9d, 0xc9, 0x69, 0x9b, 0xc3, 0x24, 0xda, 0x42, 0xa5, 0x94,
		0xa1, 0xb6, 0xd7, 0x72, 0xaa, 0x98, 0x98, 0x44, 0x95, 0xd9, 0x9c, 0x39, 0x26, 0x20, 0x33, 0xe7,
		0xba, 0x2e, 0xdd, 0xe5, 0xeb, 0x44, 0xd9, 0x91, 0xa4, 0x0a, 0x7a, 0xe4, 0x06, 0x7d, 0x06, 0x4f,
		0x32, 0x64, 0x65, 0x85, 0x48, 0x96, 0x9e, 0xab, 0x5c, 0x3a, 0x66, 0x41, 0x8f, 0x10, 0xba, 0x0a,
		0x4b, 0x19, 0x24, 0xca, 0xe9, 0xd4, 0xfa, 0x79, 0x5d, 0xde, 0xf3, 0xa4, 0x5d, 0xa6, 0xcf, 0x04,
		0xaa, 0x0b, 0x60, 0x46, 0x30, 0xaa, 0x41, 0xb2, 0xec, 0x82, 0x2e, 0x4f, 0x79, 0xc6, 0x6c, 0xbd,
		0x45, 0xfa, 0x1c, 0x9e, 0xd6, 0x44, 0x6f, 0xc1, 0xde, 0xa5, 0xfa, 0xe8, 0xcc, 0xc4, 0x2e, 0xd3,
		0x5f, 0xc0, 0x97, 0xe5, 0x7e, 0xa9, 0x4c, 0xd7, 0x3d, 0xce, 0x14, 0x8b, 0x0e, 0xb2, 0x9b, 0xf4,
		0x2b, 0xf8, 0xfc, 0x7f, 0xe4, 0x4e, 0x6c, 0x5d, 0xa1, 0x9f, 0xc3, 0x27, 0x19, 0x6b, 0x25, 0xba,
		0x68, 0xd7, 0xaa, 0xae, 0xa9, 0x19, 0x5b, 0x5c, 0xcc, 0xe2, 0xc2, 0x86, 0x1e, 0xb9, 0x55, 0x6f,
		0x74, 0x5c, 0x85, 0xd0, 0x23, 0xb7, 0x73, 0x61, 0x33, 0x9a, 0xba, 0xe9, 0x89, 0xe4, 0x91, 0xb5,
		0x5c, 0xd8, 0x94, 0xd4, 0x8c, 0xb8, 0x68, 0x7a, 0x51, 0xd5, 0x24, 0x77, 0x74, 0x97, 0x92, 0xa1,
		0x6b, 0x2a, 0xe4, 0xd0, 0x83, 0x77, 0x75, 0xe5, 0x1b, 0x87, 0x25, 0x71, 0xdb, 0x3d, 0x6a, 0xc3,
		0xa3, 0x61, 0x08, 0x95, 0x42, 0xd3, 0x38, 0xbc, 0x9f, 0x53, 0xbe, 0x1c, 0x3b, 0xcc, 0xc7, 0x75,
		0x7d, 0xfe, 0x5d, 0x82, 0x4e, 0x94, 0xd8, 0xd0, 0x87, 0xc1, 0x65, 0x82, 0xd3, 0x08, 0x7b, 0x30,
		0x06, 0x38, 0x4b, 0xe8, 0x87, 0xb9, 0x28, 0xaf, 0x00, 0x0f, 0xb7, 0x67, 0x33, 0x17, 0x44, 0x97,
		0x9c, 0x32, 0x43, 0xa7, 0x3f, 0xa2, 0xaf, 0xe0, 0xc5, 0xb8, 0x6c, 0x89, 0xcd, 0x8f, 0x73, 0x1b,
		0x55, 0x89, 0xce, 0x62, 0xec, 0x49, 0xce, 0xec, 0x4b, 0xce, 0xb3, 0xa7, 0xf6, 0xdf, 0xc0, 0x68,
		0x15, 0xb2, 0x42, 0xd4, 0x76, 0xc2, 0x00, 0xf5, 0x2e, 0x56, 0x90, 0x8e, 0xf8, 0xa9, 0xc3, 0x3d,
		0x1f, 0xbd, 0x94, 0x4e, 0x1a, 0xf4, 0x4b, 0xf8, 0xac, 0x02, 0xbd, 0xe5, 0x78, 0xc5, 0x06, 0xca,
		0xd0, 0xc1, 0xa2, 0x5f, 0xc3, 0x57, 0xd5, 0x9c, 0xa5, 0x25, 0xd3, 0x60, 0x6f, 0x6a, 0x9f, 0xd6,
		0x2c, 0x9c, 0x35, 0x5a, 0x06, 0xcf, 0x04, 0xfd, 0x14, 0x5e, 0x56, 0xf3, 0x18, 0x05, 0xd2, 0x60,
		0x9a, 0xa4, 0x9f, 0xc1, 0xc7, 0x75, 0x7a, 0x0e, 0xbb, 0x1c, 0x83, 0x6b, 0x8a, 0xb6, 0xe0, 0xeb,
		0x9a, 0xa5, 0xaa, 0x7a, 0x3d, 0x43, 0xc4, 0x74, 0xbd, 0x83, 0x4a, 0x7b, 0x40, 0x83, 0xfd, 0x0a,
		0xfd, 0x15, 0xbc, 0xbe, 0xcc, 0xd8, 0x3a, 0x01, 0x57, 0xe9, 0x3e, 0xbc, 0x19, 0x73, 0x83, 0x2a,
		0xe3, 0xd3, 0x90, 0x37, 0xa3, 0x93, 0xa7, 0xce, 0x25, 0x46, 0x43, 0x68, 0xb0, 0x01, 0xfd, 0x18,
		0x9e, 0x55, 0xb0, 0x0d, 0x77, 0x39, 0xbb, 0x34, 0xed, 0x79, 0x85, 0xee, 0x2e, 0xcf, 0xd1, 0xc1,
		0x00, 0x55, 0x57, 0x31, 0xf7, 0x2c, 0x3a, 0x5e, 0x7d, 0x16, 0x28, 0x32, 0xab, 0x4f, 0x95, 0x0a,
		0x7c, 0x6a, 0x90, 0xfe, 0x8f, 0x32, 0x8b, 0x7f, 0x8d, 0x08, 0x25, 0x92, 0xeb, 0xf5, 0x4e, 0x8e,
		0xb3, 0xb3, 0xce, 0x29, 0x37, 0xe8, 0x6b, 0xf8, 0xe2, 0x92, 0x30, 0x8e, 0xca, 0x52, 0x19, 0xf3,
		0x9c, 0xae, 0x5e, 0x15, 0xcc, 0xbb, 0x42, 0xba, 0x18, 0x5d, 0x7b, 0xb2, 0x5c, 0x25, 0x35, 0x9e,
		0xd4, 0x3f, 0xc5, 0x39, 0xca, 0x3c, 0xc7, 0x7c, 0xcd, 0x02, 0x99, 0x79, 0x7b, 0xbc, 0x1f, 0xaa,
		0x2e, 0xfb, 0x03, 0x12, 0xaa, 0xcf, 0xb9, 0x3a, 0xc7, 0xa7, 0x9e, 0x20, 0x0b, 0xb9, 0x9b, 0xd6,
		0x88, 0xe0, 0x2d, 0xc6, 0x1d, 0x39, 0x20, 0x8b, 0xb9, 0xab, 0x48, 0x61, 0xeb, 0x0b, 0x95, 0xc5,
		0x0c, 0x80, 0xa5, 0x9a, 0x00, 0xd0, 0x6a, 0x17, 0xcb, 0xe1, 0xb2, 0xfd, 0x47, 0xb0, 0xc7, 0x6a,
		0x23, 0xe2, 0x02, 0xb9, 0x0f, 0x6f, 0xc6, 0x47, 0x1f, 0xf1, 0x33, 0x2e, 0x2e, 0x78, 0xf5, 0x65,
		0xa4, 0xa1, 0x57, 0x1f, 0xeb, 0x50, 0xc8, 0x56, 0x1f, 0x1f, 0x3d, 0xc6, 0xea, 0xbf, 0x83, 0xf5,
		0xba, 0xd3, 0x37, 0x5e, 0xf4, 0x35, 0x7c, 0x71, 0x29, 0x28, 0xa5, 0xb5, 0x7c, 0x89, 0x8e, 0x37,
		0xe8, 0x84, 0x9c, 0x33, 0x7e, 0x42, 0x1a, 0xf6, 0xbf, 0x9a, 0xb0, 0x36, 0x7a, 0x60, 0xeb, 0x48,
		0x4b, 0x9e, 0x35, 0x8c, 0x97, 0x93, 0x32, 0x7a, 0x26, 0x49, 0xb7, 0x0c, 0x75, 0x40, 0xf3, 0x4e,
		0xf5, 0x08, 0x36, 0xea, 0xa0, 0xd9, 0xad, 0xca, 0x78, 0x8c, 0x29, 0x15, 0x99, 0xf6, 0x15, 0x13,
		0xba, 0x13, 0xaa, 0x43, 0x1a, 0x7d, 0xc2, 0xa4, 0x0e, 0xc0, 0x7a, 0x45, 0x73, 0x8d, 0xdc, 0xd4,
		0x65, 0x5a, 0x64, 0x0d, 0xcb, 0xb4, 0xfd, 0x13, 0x2c, 0xff, 0x26, 0x44, 0x99, 0xbf, 0xdd, 0x44,
		0xb7, 0xd2, 0x07, 0x70, 0xaf, 0x9c, 0x32, 0x74, 0x4b, 0x43, 0x5f, 0xa5, 0xca, 0x41, 0x89, 0x43,
		0x2c, 0x7b, 0x0f, 0xe6, 0x22, 0x44, 0x07, 0x83, 0xd0, 0xcf, 0x5e, 0x85, 0x0a, 0x53, 0x2d, 0x1e,
		0x5c, 0x24, 0xef, 0x4e, 0xab, 0xb0, 0x54, 0x20, 0x66, 0xa2, 0xfe, 0x6c, 0xc1, 0xe2, 0x3b, 0xe4,
		0x1e, 0xe3, 0x27, 0x69, 0x9e, 0x6a, 0x7b, 0x50, 0x5f, 0x77, 0xca, 0xe6, 0x87, 0x77, 0xbe, 0x86,
		0xbe, 0xad, 0x95, 0x42, 0x92, 0x66, 0xd3, 0xd2, 0x41, 0x53, 0x06, 0x28, 0x76, 0xf0, 0x4d, 0xfb,
		0x18, 0x96, 0xbf, 0x61, 0x81, 0x12, 0x72, 0x10, 0xf5, 0x47, 0xbb, 0xcc, 0x57, 0x28, 0x23, 0xbb,
		0x36, 0xe0, 0x6e, 0x39, 0xa5, 0xe5, 0xfb, 0xd1, 0x0c, 0x69, 0xe8, 0x42, 0x55, 0x8e, 0x89, 0xb6,
		0x27, 0x46, 0x59, 0xf6, 0x2f, 0x61, 0x56, 0x7b, 0xf4, 0x3b, 0x16, 0xa8, 0x6f, 0x19, 0xf7, 0xe8,
		0x32, 0x50, 0x73, 0xbc, 0x2f, 0x64, 0xcf, 0xf1, 0x49, 0xa3, 0x38, 0x1f, 0x9f, 0x44, 0xc4, 0xb2,
		0x8f, 0xe1, 0x46, 0x4b, 0xba, 0xa7, 0xec, 0xdc, 0xf1, 0x93, 0x9c, 0x58, 0x85, 0xa5, 0xfc, 0xcc,
		0x36, 0xbe, 0x77, 0x42, 0x5f, 0xc5, 0x2f, 0x7d, 0x05, 0x12, 0x0b, 0x9c, 0xe3, 0xc8, 0xe5, 0xa3,
		0x6c, 0x3b, 0x3c, 0x26, 0x35, 0xed, 0x7f, 0x5a, 0x40, 0xf6, 0xb8, 0x87, 0x1f, 0xd0, 0xfb, 0xde,
		0xf1, 0x43, 0x8c, 0x5c, 0x70, 0x0b, 0x96, 0x8b, 0x73, 0x5d, 0x25, 0xe3, 0x6c, 0xbb, 0x0d, 0x37,
		0x8b, 0xb4, 0x6f, 0x71, 0x70, 0x21, 0x64, 0xf2, 0xa4, 0x58, 0x24, 0xee, 0x71, 0x45, 0x9a, 0x65,
		0x12, 0xb7, 0x45, 0x78, 0xec, 0x23, 0x99, 0xa0, 0x2b, 0xb0, 0x58, 0xa4, 0x6d, 0x09, 0xe1, 0x93,
		0x49, 0xba, 0x06, 0x2b, 0x23, 0x5c, 0x8e, 0x42, 0xc5, 0x7a, 0x48, 0xa6, 0xec, 0x23, 0x98, 0xdd,
		0xe1, 0xae, 0xd0, 0x9b, 0x1d, 0x69, 0xbd, 0x04, 0xf3, 0xe6, 0xf8, 0x9d, 0x14, 0x4a, 0x90, 0x06,
		0x5d, 0x04, 0x62, 0x4e, 0xbf, 0xe9, 0x1e, 0xec, 0x13, 0x4b, 0x2f, 0x6a, 0xce, 0x1e, 0x9e, 0x4a,
		0xf6, 0x5e, 0x75, 0x7e, 0x20, 0x4d, 0xfb, 0x4f, 0x16, 0x2c, 0x26, 0xb1, 0xfb, 0x33, 0xba, 0xaa,
		0x2d, 0xb8, 0xc7, 0x74, 0xe6, 0x69, 0x6d, 0xca, 0xe6, 0xf7, 0x05, 0xc7, 0x38, 0x34, 0xcb, 0xa9,
		0xea, 0xa0, 0x8f, 0x9c, 0x58, 0xba, 0x15, 0xaf, 0x00, 0x64, 0x29, 0xd7, 0xf6, 0xd1, 0xe1, 0xfe,
		0x80, 0x34, 0xed, 0xdf, 0x26, 0xf9, 0xd3, 0x16, 0x3c, 0x60, 0x81, 0x42, 0xee, 0x0e, 0xbe, 0xc3,
		0x73, 0xf4, 0x75, 0x92, 0x94, 0x12, 0xa2, 0x98, 0x0b, 0xa3, 0x70, 0x4a, 0x35, 0x29, 0x42, 0xba,
		0x4a, 0x0a, 0x7e, 0x42, 0x2c, 0xfb, 0xaf, 0x16, 0x2c, 0xe7, 0x3a, 0xab, 0xe4, 0x56, 0x22, 0xa4,
		0x16, 0x5f, 0x4e, 0xd1, 0x27, 0xa7, 0x87, 0x92, 0x34, 0xe8, 0x26, 0xac, 0x97, 0x43, 0x3a, 0xa8,
		0xe4, 0x20, 0x7e, 0x4f, 0x8d, 0x4b, 0x6d, 0x39, 0xac, 0x2d, 0x05, 0x4f, 0x73, 0x9a, 0x34, 0xed,
		0xad, 0x61, 0x92, 0x44, 0xbb, 0xb8, 0x02, 0x8b, 0xe6, 0xd8, 0xb8, 0x54, 0x14, 0x28, 0x69, 0x82,
		0x13, 0xcb, 0xfe, 0x8f, 0x05, 0x0b, 0x1d, 0x8c, 0xcf, 0xfa, 0xf4, 0xb5, 0x49, 0xcb, 0xba, 0x03,
		0xab, 0x25, 0xd3, 0xf1, 0xa3, 0x77, 0xfc, 0x74, 0x5d, 0x42, 0x4e, 0x12, 0x3b, 0x36, 0xa1, 0x84,
		0xde, 0x1d, 0x70, 0xb7, 0x7b, 0xea, 0x48, 0x2f, 0x4e, 0x25, 0xd2, 0xd4, 0x35, 0xb6, 0x02, 0x97,
		0xe9, 0x38, 0x51, 0x21, 0x2c, 0x59, 0xec, 0x2d, 0x2a, 0xc7, 0x73, 0x94, 0x13, 0x3f, 0xc2, 0x55,
		0xe3, 0xbe, 0x7f, 0x45, 0xa6, 0xec, 0x5f, 0xc3, 0x5c, 0x6c, 0xc2, 0x41, 0x1f, 0x65, 0x84, 0xd2,
		0x09, 0x5e, 0x98, 0x6a, 0x4b, 0x74, 0x14, 0xc6, 0x95, 0xb8, 0x40, 0x3a, 0xea, 0x7b, 0xd1, 0x27,
		0x07, 0xfb, 0xff, 0xe1, 0xda, 0x5b, 0x0c, 0x02, 0xe7, 0x24, 0xce, 0xfa, 0x45, 0x20, 0xc6, 0x30,
		0x4a, 0x3c, 0xd2, 0xd0, 0x59, 0x65, 0xcc, 0xc6, 0x1f, 0x09, 0x88, 0x65, 0xff, 0x08, 0x33, 0xbb,
		0x0c, 0xfd, 0xf8, 0x90, 0x59, 0x80, 0xb9, 0x6c, 0x90, 0x15, 0x0a, 0x02, 0xb3, 0xd9, 0xa4, 0x2e,
		0x02, 0x16, 0x9d, 0x87, 0xeb, 0xd9, 0x4c, 0x94, 0xe1, 0xcd, 0x1c, 0x67, 0xd2, 0xe0, 0x4d, 0x6c,
		0x3d, 0xfb, 0xd1, 0x3e, 0x61, 0xea, 0x34, 0x3c, 0x7e, 0xe1, 0x8a, 0xde, 0x4b, 0x85, 0xbd, 0xbe,
		0x90, 0x8e, 0xcf, 0x44, 0xf6, 0xf3, 0x79, 0xf4, 0xbd, 0x26, 0xfe, 0x76, 0x73, 0x3c, 0x1d, 0x0d,
		0x3e, 0xfd, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x9d, 0xaa, 0x35, 0xd1, 0x19, 0x00, 0x00,
	},
	// common/common.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5d, 0x4f, 0x1b, 0x47,
		0x17, 0x96, 0x31, 0xf8, 0x0d, 0xc7, 0xe0, 0x90, 0xe1, 0x15, 0x72, 0xe9, 0x87, 0xd0, 0xb6, 0x6a,
		0x51, 0xd3, 0x38, 0x91, 0xfb, 0xa1, 0x34, 0x52, 0xab, 0x10, 0x20, 0xc5, 0x4a, 0x52, 0x91, 0x81,
		0xa4, 0x52, 0xef, 0xc6, 0xbb, 0xc7, 0x30, 0xf5, 0xee, 0x0c, 0x9d, 0x39, 0x6b, 0xf0, 0x5d, 0x2f,
		0xdb, 0xdf, 0xd0, 0x1f, 0xd0, 0x1f, 0xd4, 0xeb, 0xfe, 0x97, 0x6a, 0x66, 0x67, 0xed, 0xb5, 0x0d,
		0x5c, 0x54, 0xb9, 0x81, 0x3d, 0xcf, 0xf3, 0xcc, 0x9c, 0x8f, 0x39, 0x73, 0xc6, 0xb0, 0x19, 0xeb,
		0x2c, 0xd3, 0xea, 0x61, 0xf1, 0xaf, 0x73, 0x61, 0x34, 0x69, 0xd6, 0x28, 0xac, 0xed, 0x7b, 0xa8,
		0xf2, 0xcc, 0x3e, 0xf4, 0x7f, 0x0b, 0x2a, 0x8a, 0x60, 0xed, 0x27, 0x6d, 0x86, 0x83, 0x54, 0x5f,
		0x9e, 0x8e, 0x2f, 0x90, 0x31, 0x58, 0x56, 0x22, 0xc3, 0x76, 0x6d, 0xa7, 0xb6, 0xbb, 0xca, 0xfd,
		0x77, 0xb4, 0x0b, 0xac, 0xaa, 0x79, 0x2e, 0x53, 0x42, 0x73, 0xad, 0xf2, 0x07, 0xb8, 0x73, 0x2a,
		0xec, 0xf0, 0xa5, 0xb4, 0x74, 0x1d, 0xcf, 0x3e, 0x83, 0xe5, 0xa1, 0x54, 0x49, 0x7b, 0x69, 0xa7,
		0xb6, 0xdb, 0xea, 0x6e, 0x76, 0x8a, 0x48, 0xca, 0x25, 0x2f, 0xa4, 0x4a, 0xb8, 0x17, 0x44, 0x7f,
		0xd5, 0x60, 0xe3, 0x04, 0x85, 0x89, 0xcf, 0xf7, 0x88, 0x8c, 0xec, 0xe7, 0x84, 0x96, 0xbd, 0x86,
		0x75, 0xa9, 0x12, 0xbc, 0xc2, 0xe4, 0xb9, 0xc4, 0x34, 0xb1, 0xed, 0xda, 0x4e, 0x7d, 0xb7, 0xd9,
		0xbd, 0xdf, 0x09, 0xc9, 0xce, 0x2f, 0xe8, 0xf4, 0xaa, 0xea, 0x43, 0x45, 0x66, 0xcc, 0x67, 0x77,
		0xd8, 0x7e, 0x0a, 0x6c, 0x51, 0xc4, 0x36, 0xa0, 0x3e, 0xc4, 0x71, 0x88, 0xdc, 0x7d, 0xb2, 0xff,
		0xc3, 0xca, 0x48, 0xa4, 0x39, 0xfa, 0xc8, 0xd7, 0x78, 0x61, 0x3c, 0x59, 0x7a, 0x5c, 0x8b, 0x2c,
		0x2c, 0xbf, 0xc2, 0x4c, 0xb3, 0x47, 0xd0, 0x18, 0x54, 0xa3, 0x6a, 0x97, 0x51, 0x39, 0xb6, 0x53,
		0x0d, 0x21, 0xe8, 0xb6, 0xbf, 0x85, 0xe6, 0x7f, 0x75, 0x7a, 0x09, 0x8d, 0x23, 0x14, 0x09, 0x1a,
		0xd6, 0x9d, 0x73, 0xbb, 0x5d, 0xba, 0x2d, 0xf8, 0x77, 0xed, 0xf8, 0x3b, 0x68, 0x72, 0xb4, 0x48,
		0xc7, 0x5a, 0x2a, 0xb2, 0xac, 0x03, 0x8d, 0x0b, 0xff, 0x15, 0xbc, 0x6f, 0x95, 0xde, 0xa7, 0xa2,
		0x9e, 0x1a, 0x68, 0x1e, 0x54, 0xae, 0xdb, 0xf6, 0x62, 0x92, 0x23, 0x49, 0xe3, 0x1b, 0xbb, 0xed,
		0x29, 0x6c, 0x94, 0x0d, 0xf1, 0x0a, 0x49, 0x24, 0x82, 0x04, 0xfb, 0x02, 0xee, 0x65, 0xe2, 0xca,
		0xc1, 0xf6, 0x18, 0xcd, 0x09, 0xc6, 0x5a, 0x25, 0x7e, 0x51, 0x8d, 0x2f, 0x12, 0xd1, 0x0b, 0x58,
		0x2f, 0xfb, 0xf5, 0x75, 0x8e, 0x66, 0xcc, 0x3e, 0x80, 0xd5, 0x5f, 0xdd, 0x87, 0xf3, 0x19, 0x7c,
		0x4d, 0x81, 0x09, 0xbb, 0x67, 0xce, 0x6c, 0xc8, 0x78, 0x0a, 0x44, 0xff, 0x2c, 0xb9, 0x94, 0xc9,
		0x8c, 0x8f, 0x75, 0x2a, 0xe3, 0x31, 0x7b, 0x02, 0x6d, 0xa9, 0x24, 0x49, 0x91, 0xf6, 0x14, 0xa1,
		0x19, 0xb9, 0xff, 0x85, 0x5f, 0xeb, 0xb7, 0x5e, 0xe1, 0x37, 0xf2, 0xac, 0x03, 0xac, 0x2f, 0xe2,
		0xa1, 0x1e, 0x0c, 0xf6, 0x35, 0x0e, 0x06, 0x32, 0x96, 0xa8, 0xc8, 0xbb, 0xac, 0xf1, 0x6b, 0x18,
		0xe7, 0x2b, 0x13, 0x57, 0x32, 0xcb, 0xb3, 0x45, 0x5f, 0xf5, 0xc2, 0xd7, 0x4d, 0x3c, 0xdb, 0x85,
		0xbb, 0x81, 0xdb, 0x23, 0xc2, 0xec, 0x82, 0x6c, 0x7b, 0xd9, 0x2f, 0x99, 0x87, 0x9d, 0x17, 0xa5,
		0x95, 0xcb, 0x51, 0x8a, 0x7e, 0x8a, 0x87, 0xc6, 0x68, 0xc3, 0x51, 0x58, 0xad, 0x6c, 0x7b, 0x65,
		0xa7, 0xbe, 0xbb, 0xca, 0x6f, 0xe4, 0xd9, 0x53, 0x78, 0x1f, 0xaf, 0x2e, 0xa4, 0x11, 0x24, 0xb5,
		0x5a, 0x0c, 0xb2, 0xe1, 0x3d, 0xde, 0x26, 0x89, 0x7e, 0x5b, 0x82, 0xd6, 0x6c, 0xb7, 0xb0, 0x4f,
		0xa1, 0xd5, 0x97, 0x4a, 0x98, 0xf1, 0xfe, 0x39, 0xc6, 0x43, 0x9b, 0x67, 0xe1, 0xcc, 0xe6, 0x50,
		0xd7, 0xa6, 0x26, 0x57, 0xbd, 0x62, 0x9c, 0xac, 0xf2, 0xc2, 0x70, 0xe9, 0x0c, 0xa4, 0xb1, 0x74,
		0x80, 0xb1, 0xb4, 0x52, 0xab, 0x7d, 0x9d, 0x5d, 0xa4, 0x48, 0x98, 0xf4, 0x12, 0x5f, 0xb4, 0x3a,
		0xbf, 0x91, 0x77, 0x45, 0x8b, 0x0d, 0x0a, 0xc2, 0xe4, 0x54, 0x66, 0xf8, 0xa3, 0x50, 0xda, 0x17,
		0xad, 0xce, 0xe7, 0x61, 0xf6, 0x39, 0x6c, 0xf8, 0xac, 0xa4, 0x3a, 0x9b, 0x48, 0x57, 0xbc, 0x74,
		0x01, 0x67, 0x1f, 0x01, 0x18, 0x97, 0x21, 0xb9, 0xf2, 0xf9, 0x9a, 0xdc, 0xe1, 0x15, 0x24, 0x3a,
		0x02, 0xf6, 0x16, 0x8d, 0x8b, 0xe5, 0x48, 0x5a, 0xd2, 0x66, 0xdc, 0x23, 0xcc, 0x58, 0x1b, 0xfe,
		0x87, 0x23, 0x54, 0xd4, 0x3b, 0xf0, 0xe9, 0xd7, 0x79, 0x69, 0x3a, 0x66, 0x54, 0xe8, 0x7d, 0xe6,
		0x75, 0x5e, 0x9a, 0x51, 0x02, 0xad, 0xd9, 0x9d, 0xd8, 0x0e, 0x34, 0xfb, 0x46, 0xa8, 0xf8, 0xfc,
		0x54, 0x0f, 0x51, 0xf9, 0x9d, 0xd6, 0x78, 0x15, 0x62, 0x8f, 0x60, 0x45, 0x12, 0x66, 0xae, 0xf5,
		0x67, 0x06, 0xc8, 0x62, 0x48, 0xbc, 0x10, 0x46, 0xbf, 0xd7, 0x60, 0x63, 0x86, 0x95, 0x68, 0xd9,
		0xf7, 0xb0, 0x1d, 0xe7, 0xc6, 0xa0, 0xa2, 0xb9, 0x85, 0x6e, 0xbc, 0x86, 0x9b, 0x71, 0x8b, 0x82,
		0x7d, 0x05, 0xab, 0xe7, 0xe5, 0x66, 0x21, 0x94, 0xad, 0xeb, 0x43, 0xe1, 0x53, 0x61, 0xf4, 0x06,
		0xee, 0x9e, 0x90, 0x30, 0xe4, 0x6a, 0x1d, 0xde, 0xa5, 0x08, 0xd6, 0x50, 0x98, 0x54, 0xa2, 0xf5,
		0x68, 0x28, 0xde, 0x0c, 0xe6, 0x4e, 0x24, 0x15, 0x54, 0x2a, 0x8a, 0x22, 0x56, 0x90, 0xe8, 0x0d,
		0xac, 0x9d, 0x90, 0xa0, 0xdc, 0x86, 0x3d, 0x0f, 0xa1, 0x19, 0xa7, 0xda, 0x62, 0x01, 0xfa, 0x2d,
		0x5b, 0xdd, 0x8f, 0xc3, 0xf3, 0x55, 0xce, 0x9a, 0xc3, 0x2b, 0x8c, 0x73, 0xd7, 0xe4, 0xfb, 0x53,
		0x29, 0xaf, 0xae, 0x8b, 0xfe, 0xac, 0xc1, 0x7b, 0x27, 0x24, 0xe3, 0xe1, 0x78, 0xa2, 0xad, 0x3c,
		0x6f, 0x8f, 0xa1, 0x75, 0xa9, 0xcd, 0x10, 0x4d, 0x39, 0xfe, 0xbc, 0x9f, 0x66, 0x77, 0xa3, 0x2c,
		0x43, 0x89, 0xf3, 0x39, 0x1d, 0x3b, 0x80, 0x0f, 0x6d, 0x7c, 0x8e, 0x49, 0x9e, 0xe2, 0xa9, 0x9e,
		0xd4, 0x43, 0xe7, 0x54, 0xde, 0xc3, 0x25, 0x5f, 0xfe, 0xdb, 0x45, 0xd1, 0x1f, 0x35, 0xd8, 0x9c,
		0x99, 0x9b, 0x1c, 0x6d, 0x9e, 0x12, 0xfb, 0xc6, 0xb7, 0x6f, 0x9e, 0xd2, 0x64, 0x7c, 0xb6, 0xba,
		0x5b, 0x21, 0xf7, 0x8a, 0xce, 0xb1, 0xbc, 0xa2, 0x64, 0x5b, 0xd0, 0x10, 0xca, 0x5e, 0xa2, 0x09,
		0x43, 0x35, 0x58, 0xfe, 0x80, 0xdc, 0x0c, 0x79, 0x85, 0xd6, 0x8a, 0x33, 0xf4, 0x97, 0x72, 0x95,
		0xcf, 0x60, 0xd1, 0xdf, 0x35, 0x68, 0x95, 0xe9, 0x15, 0xc5, 0x73, 0x37, 0xce, 0x8d, 0xc8, 0x54,
		0x9f, 0xed, 0xeb, 0x5c, 0xd1, 0x91, 0x54, 0x14, 0xce, 0x76, 0x01, 0x77, 0x23, 0xdd, 0xa0, 0x48,
		0x5e, 0xe2, 0x08, 0xd3, 0x70, 0xbc, 0x53, 0x80, 0x6d, 0xc3, 0x1d, 0x11, 0x0f, 0x0b, 0xb2, 0x98,
		0x08, 0x13, 0x9b, 0x7d, 0x02, 0xeb, 0x46, 0x10, 0x4e, 0x5f, 0x99, 0x65, 0x3f, 0x9d, 0x67, 0x41,
		0xf6, 0x35, 0x34, 0x49, 0xd8, 0x61, 0xef, 0xe0, 0x59, 0xaa, 0xe3, 0xa1, 0xbf, 0xf8, 0xcd, 0xee,
		0x66, 0xf5, 0x9c, 0x02, 0xc5, 0xab, 0x3a, 0xf7, 0x7a, 0x56, 0x38, 0x77, 0x8f, 0xad, 0x3b, 0x87,
		0xe9, 0x0d, 0x0f, 0xa6, 0x9b, 0x6c, 0xa8, 0x92, 0xde, 0x41, 0x88, 0xbd, 0x30, 0xa2, 0x11, 0xc0,
		0xb1, 0x4e, 0x53, 0x34, 0xe5, 0x94, 0x4c, 0x85, 0xa5, 0xbd, 0x38, 0x46, 0x6b, 0x2b, 0x9d, 0x3e,
		0x87, 0xba, 0x6c, 0x65, 0x82, 0x8a, 0x24, 0x8d, 0xc3, 0xa0, 0x9c, 0xd8, 0x8b, 0xd9, 0xd6, 0xaf,
		0xc9, 0x36, 0x7a, 0x0b, 0xeb, 0xe1, 0x9c, 0x7f, 0xc1, 0x98, 0x30, 0x79, 0x47, 0xd7, 0xe1, 0xd9,
		0x83, 0x9f, 0xef, 0x9f, 0x49, 0x3a, 0xcf, 0xfb, 0xae, 0x70, 0x0f, 0xdd, 0x6b, 0xa4, 0x8d, 0x48,
		0xa5, 0x9e, 0x7c, 0x3e, 0xf0, 0xbf, 0x51, 0xc3, 0x6f, 0xd9, 0x7e, 0xc3, 0x5b, 0x5f, 0xfe, 0x1b,
		0x00, 0x00, 0xff, 0xff, 0x8b, 0x81, 0xb8, 0xe0, 0xe3, 0x0a, 0x00, 0x00,
	},
	// common/domain.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x6e, 0xd3, 0x4c,
		0x10, 0x97, 0x93, 0x26, 0x5f, 0x3b, 0x56, 0xff, 0x6d, 0xbe, 0x7c, 0x9f, 0x15, 0xa1, 0x12, 0x72,
		0x80, 0x48, 0xa5, 0x09, 0x84, 0x02, 0x15, 0x12, 0x07, 0x92, 0xf4, 0x10, 0x21, 0x0a, 0x2c, 0xb4,
		0x07, 0x6e, 0x1b, 0x7b, 0xd3, 0xac, 0x6a, 0xef, 0x5a, 0xeb, 0x75, 0x42, 0x8e, 0xbc, 0x00, 0x17,
		0x5e, 0x80, 0x97, 0xe1, 0x31, 0x78, 0x17, 0xe4, 0x5d, 0x27, 0x75, 0x12, 0x97, 0x22, 0x2e, 0xd6,
		0xec, 0xfc, 0xe6, 0xcf, 0x6f, 0x66, 0x67, 0xd6, 0x50, 0x71, 0x45, 0x10, 0x08, 0xde, 0xf6, 0x44,
		0x40, 0x18, 0x6f, 0x85, 0x52, 0x28, 0x81, 0xca, 0x46, 0x59, 0xdb, 0xa7, 0x3c, 0x0e, 0xa2, 0xb6,
		0xfe, 0x1a, 0xa8, 0x56, 0x4d, 0xed, 0xa7, 0x92, 0x84, 0x21, 0x95, 0xa9, 0xba, 0xf1, 0xb5, 0x00,
		0xd0, 0xd7, 0x21, 0x06, 0x7c, 0x24, 0x10, 0x82, 0x0d, 0x4e, 0x02, 0xea, 0x58, 0x75, 0xab, 0xb9,
		0x85, 0xb5, 0x8c, 0x0e, 0xa1, 0x1c, 0x29, 0xa2, 0xe2, 0xc8, 0x29, 0xd4, 0xad, 0xe6, 0x4e, 0xa7,
		0xd2, 0x32, 0x71, 0x8d, 0xdb, 0x07, 0x0d, 0xe1, 0xd4, 0x04, 0xd5, 0xc1, 0xf6, 0x68, 0xe4, 0x4a,
		0x16, 0x2a, 0x26, 0xb8, 0x53, 0xd4, 0x71, 0xb2, 0x2a, 0x74, 0x00, 0x20, 0xa6, 0x9c, 0xca, 0xd3,
		0x80, 0x30, 0xdf, 0xd9, 0xd0, 0x06, 0x19, 0x0d, 0x7a, 0x04, 0x1b, 0x1e, 0x51, 0xc4, 0x29, 0xd5,
		0x8b, 0x4d, 0xbb, 0x73, 0xa7, 0x65, 0x78, 0xb7, 0xae, 0x49, 0xb6, 0xfa, 0x44, 0x91, 0x53, 0xae,
		0xe4, 0x0c, 0x6b, 0xcb, 0x84, 0x74, 0x1c, 0x33, 0xcf, 0x29, 0x1b, 0xd2, 0x89, 0x5c, 0x7b, 0x0e,
		0x5b, 0x0b, 0x33, 0xb4, 0x07, 0xc5, 0x2b, 0x3a, 0x4b, 0x8b, 0x4a, 0x44, 0xf4, 0x2f, 0x94, 0x26,
		0xc4, 0x8f, 0xa9, 0x2e, 0x69, 0x0b, 0x9b, 0xc3, 0x8b, 0xc2, 0x89, 0xd5, 0xf8, 0x59, 0x84, 0x8a,
		0xc9, 0xd5, 0x13, 0x7c, 0xc4, 0x2e, 0x63, 0x49, 0x34, 0xed, 0x0b, 0xb8, 0x3f, 0x15, 0xf2, 0x6a,
		0xe4, 0x8b, 0xe9, 0xe9, 0x67, 0xea, 0xc6, 0x89, 0x12, 0x53, 0x45, 0x79, 0x22, 0xbc, 0xa3, 0x92,
		0x09, 0x6f, 0xc0, 0xfb, 0x64, 0x16, 0xe9, 0x34, 0x25, 0xfc, 0x87, 0xd6, 0xe8, 0x31, 0x00, 0x0d,
		0x98, 0x7a, 0x43, 0x95, 0x64, 0xae, 0xa6, 0x63, 0x77, 0xf6, 0xe7, 0x45, 0x77, 0x85, 0xf0, 0x2f,
		0x12, 0x6a, 0x38, 0x63, 0x84, 0x9e, 0x82, 0x3d, 0x24, 0x5e, 0x97, 0x71, 0x22, 0x19, 0x8d, 0x74,
		0x8f, 0xed, 0x4e, 0x65, 0xe1, 0x73, 0x0d, 0xe1, 0xac, 0x1d, 0x7a, 0x0d, 0xd5, 0x31, 0x8b, 0x94,
		0x90, 0xb3, 0x57, 0xd2, 0x1d, 0xb3, 0x09, 0xf1, 0xcd, 0xdd, 0xe9, 0x3b, 0xd8, 0xe9, 0x54, 0xd3,
		0x6b, 0x5d, 0x06, 0x71, 0xbe, 0x0f, 0x6a, 0x01, 0x5a, 0x01, 0xce, 0xf1, 0xc0, 0x29, 0xe9, 0x6e,
		0xe6, 0x20, 0xe8, 0x3d, 0x38, 0x13, 0x16, 0xb1, 0x21, 0xf3, 0x99, 0x5a, 0xcd, 0x5f, 0xfe, 0x5d,
		0xfe, 0x1b, 0xdd, 0xd0, 0x31, 0x54, 0xd7, 0xb1, 0x84, 0xc5, 0x3f, 0x9a, 0x45, 0x3e, 0xd8, 0xf8,
		0x6e, 0x81, 0x9d, 0x69, 0x11, 0x7a, 0x09, 0x9b, 0xc3, 0x79, 0x27, 0x2d, 0x3d, 0x72, 0xf7, 0x72,
		0x3a, 0xd9, 0x9a, 0x0b, 0x66, 0xee, 0x16, 0x2e, 0x35, 0x0c, 0xdb, 0x4b, 0x50, 0xce, 0xac, 0x1d,
		0x66, 0x67, 0xcd, 0xee, 0x54, 0x57, 0xc3, 0xcf, 0x92, 0xa1, 0xce, 0x8e, 0x60, 0x00, 0xdb, 0x4b,
		0x18, 0xfa, 0x0f, 0xca, 0x92, 0x92, 0x48, 0xf0, 0x34, 0x6c, 0x7a, 0x42, 0x35, 0xd8, 0x14, 0x21,
		0x95, 0x44, 0x09, 0x99, 0x0e, 0xf2, 0xe2, 0x8c, 0x9a, 0xb0, 0xeb, 0x4a, 0x4a, 0x14, 0xf5, 0x3e,
		0xb2, 0x80, 0x9e, 0x11, 0x2e, 0xf4, 0xa0, 0x14, 0xf1, 0xaa, 0xba, 0xf1, 0xc3, 0x82, 0xbd, 0xf3,
		0xd0, 0x23, 0x8a, 0x66, 0x1e, 0x82, 0x95, 0x3d, 0xb6, 0x6e, 0xdb, 0xe3, 0xc2, 0xda, 0x1e, 0x3f,
		0x4b, 0xf7, 0xb8, 0xa8, 0x9b, 0xda, 0x98, 0x57, 0xbd, 0x9a, 0x69, 0x75, 0x9b, 0xff, 0x7e, 0x73,
		0x7b, 0x70, 0xb7, 0xe7, 0xc7, 0x91, 0xa2, 0x12, 0xd3, 0xd0, 0x67, 0xae, 0xde, 0xdb, 0xe5, 0x25,
		0xae, 0x83, 0xed, 0x1a, 0x93, 0xb3, 0xeb, 0x57, 0x2e, 0xab, 0x6a, 0x7c, 0xb3, 0xe0, 0xc0, 0x90,
		0xbb, 0x31, 0xc8, 0x43, 0xd8, 0x27, 0xae, 0x62, 0x13, 0xda, 0x5b, 0x0b, 0xb5, 0x0e, 0xa0, 0x1e,
		0x6c, 0xa6, 0xf1, 0x93, 0xf7, 0x33, 0x69, 0xc5, 0x83, 0x79, 0x2b, 0x6e, 0x61, 0x8b, 0x17, 0x8e,
		0x8d, 0x2f, 0x16, 0xec, 0xa6, 0x8f, 0x12, 0x71, 0xc7, 0x54, 0xdf, 0xd0, 0x31, 0x54, 0x79, 0x1c,
		0xbc, 0x1d, 0x0d, 0x14, 0x0d, 0xa2, 0x81, 0x01, 0xba, 0xb3, 0x41, 0x5f, 0x53, 0x29, 0xe2, 0x7c,
		0x10, 0x9d, 0xc0, 0xff, 0x39, 0x80, 0x2e, 0xa1, 0xa0, 0xfd, 0x6e, 0x82, 0xbb, 0x47, 0x9f, 0x0e,
		0x2f, 0x99, 0x1a, 0xc7, 0xc3, 0x84, 0x7e, 0x5b, 0xd1, 0x20, 0x14, 0x92, 0xf8, 0x4c, 0x2c, 0xc4,
		0x23, 0xfd, 0x47, 0x69, 0x9b, 0xe2, 0x86, 0x65, 0x7d, 0x7a, 0xf2, 0x2b, 0x00, 0x00, 0xff, 0xff,
		0x00, 0xdc, 0x52, 0x1d, 0xa8, 0x06, 0x00, 0x00,
	},
	// common/wrappers.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0xcf, 0xcd,
		0xcd, 0xcf, 0xd3, 0x2f, 0x2f, 0x4a, 0x2c, 0x28, 0x48, 0x2d, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
		0xc9, 0x17, 0x62, 0x83, 0x08, 0x2b, 0x29, 0x72, 0x71, 0x3a, 0xe5, 0xe7, 0xe7, 0x84, 0x25, 0xe6,
		0x94, 0xa6, 0x0a, 0x89, 0x70, 0xb1, 0x96, 0x81, 0x18, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x1c, 0x41,
		0x10, 0x8e, 0x93, 0x6e, 0x94, 0x76, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae,
		0x7e, 0x49, 0x6a, 0x6e, 0x41, 0x7e, 0x51, 0x62, 0x4e, 0x66, 0x3e, 0x9c, 0xa9, 0x0b, 0x36, 0x52,
		0x1f, 0x62, 0x62, 0x12, 0x1b, 0x98, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x2f, 0x05,
		0x32, 0x79, 0x00, 0x00, 0x00,
	},
	// common/history.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5c, 0xef, 0x6f, 0x1c, 0x47,
		0xf9, 0xbf, 0xb9, 0x5f, 0xf6, 0x3d, 0xe7, 0xb8, 0xce, 0x24, 0x6d, 0x36, 0xa9, 0x93, 0x3a, 0x97,
		0xd4, 0x75, 0x1c, 0xc7, 0x4e, 0x2f, 0x69, 0x13, 0x7d, 0x53, 0xe5, 0xab, 0xc4, 0x49, 0x7a, 0x96,
		0x68, 0x1b, 0x8d, 0x03, 0x91, 0x90, 0x10, 0xac, 0xef, 0xc6, 0xf1, 0xe2, 0xbb, 0x5d, 0xb3, 0xbb,
		0xe7, 0x8b, 0x51, 0x25, 0x24, 0x24, 0x44, 0x29, 0x12, 0x02, 0x09, 0x09, 0x09, 0xa9, 0xa8, 0x12,
		0x08, 0x24, 0x24, 0xa8, 0xd4, 0x37, 0x80, 0x78, 0xc3, 0x1b, 0xe0, 0x1d, 0xf0, 0x82, 0x37, 0x48,
		0xfc, 0x05, 0x95, 0x40, 0x42, 0xbc, 0xe1, 0x25, 0xda, 0xd9, 0xdd, 0xbb, 0xfd, 0x31, 0xb3, 0x3b,
		0x73, 0x3e, 0x17, 0x44, 0xdf, 0xb4, 0xd9, 0x99, 0x67, 0xe6, 0xf9, 0xcc, 0x33, 0xcf, 0x3c, 0x9f,
		0xf9, 0xf1, 0x9c, 0xe1, 0x64, 0xdb, 0xea, 0xf5, 0x2c, 0x73, 0x6d, 0xc7, 0x70, 0x5c, 0xcb, 0x3e,
		0x58, 0xdd, 0xb3, 0x2d, 0xd7, 0xc2, 0x55, 0xbf, 0xf4, 0xcc, 0x71, 0x6a, 0xf6, 0x7b, 0xce, 0x1a,
		0xfb, 0xaf, 0x5f, 0x75, 0xe6, 0x44, 0xd0, 0xc0, 0xff, 0x5f, 0x50, 0xf8, 0x42, 0x50, 0x38, 0xb0,
		0xec, 0xdd, 0xed, 0xae, 0x35, 0xf8, 0x3c, 0x7d, 0x4a, 0xdb, 0x7d, 0xd7, 0x08, 0x05, 0x1a, 0x7f,
		0x03, 0x78, 0xe9, 0x71, 0x50, 0x79, 0x3f, 0xac, 0xdb, 0x74, 0x75, 0xdb, 0xa5, 0x9d, 0xfb, 0xfb,
		0xd4, 0x74, 0xef, 0xb8, 0xae, 0x6d, 0x6c, 0xf5, 0x5d, 0xea, 0xe0, 0x9b, 0x30, 0x13, 0xf6, 0xf3,
		0xe8, 0x60, 0x8f, 0x6a, 0x68, 0x01, 0x2d, 0xd5, 0x9b, 0x27, 0x57, 0x03, 0x8d, 0x8f, 0x23, 0x75,
		0x24, 0x26, 0x89, 0x9b, 0x70, 0x72, 0x4f, 0xb7, 0xa9, 0xe9, 0x86, 0x32, 0xf7, 0xac, 0x9e, 0x6e,
		0x98, 0x5a, 0x71, 0x01, 0x2d, 0xd5, 0x08, 0xb7, 0x0e, 0x6f, 0xc2, 0xa9, 0x78, 0xf9, 0x10, 0x9e,
		0x56, 0x62, 0x8a, 0x4f, 0x27, 0x15, 0x0f, 0x05, 0x88, 0xa8, 0x25, 0x7e, 0x15, 0x9e, 0xf3, 0xab,
		0x36, 0x4c, 0xc3, 0x35, 0xf4, 0x70, 0x90, 0x1b, 0x1d, 0xad, 0xbc, 0x80, 0x96, 0x4a, 0x44, 0x50,
		0x8b, 0x57, 0x60, 0xda, 0xd5, 0x9d, 0xdd, 0x4f, 0x19, 0x8e, 0xab, 0x55, 0x98, 0xf6, 0xb9, 0x50,
		0xfb, 0xa3, 0xa0, 0x9c, 0x0c, 0x25, 0xf0, 0x49, 0xa8, 0x18, 0xe6, 0x5e, 0xdf, 0xd5, 0xaa, 0x0b,
		0x68, 0x69, 0x86, 0xf8, 0x1f, 0xf8, 0x21, 0x5c, 0xa0, 0x31, 0x0b, 0x3f, 0xb2, 0xd6, 0xbb, 0x96,
		0x43, 0x1f, 0x19, 0x3d, 0x6a, 0xf5, 0xdd, 0x4d, 0xda, 0xb6, 0xcc, 0x8e, 0xa3, 0x4d, 0x2d, 0xa0,
		0xa5, 0x0a, 0x91, 0x11, 0xc5, 0x0f, 0xe0, 0x9c, 0xa7, 0x33, 0xa3, 0xb3, 0x69, 0xd6, 0x59, 0x8e,
		0x14, 0xbe, 0x09, 0xa7, 0xda, 0x96, 0xe9, 0x1a, 0x66, 0x9f, 0x76, 0x46, 0x46, 0xec, 0x9b, 0x1b,
		0x1d, 0xad, 0xc6, 0x66, 0x48, 0x54, 0x8d, 0x6f, 0x41, 0xcd, 0xf0, 0x6d, 0x65, 0xd9, 0x1a, 0x2c,
		0xa0, 0xa5, 0xd9, 0xe6, 0xd9, 0x55, 0xdf, 0x2b, 0xd7, 0x83, 0x26, 0x77, 0x9c, 0x37, 0xe9, 0x60,
		0x23, 0x14, 0x22, 0x23, 0x79, 0x6f, 0x32, 0x86, 0xfd, 0x3e, 0xd0, 0x8d, 0x6e, 0xdf, 0xa6, 0x84,
		0xea, 0x8e, 0x65, 0x6a, 0x75, 0xa6, 0x55, 0x50, 0x1b, 0x83, 0x1b, 0xd4, 0xdc, 0xa3, 0xae, 0x6e,
		0x74, 0x1d, 0x6d, 0x86, 0x19, 0x5c, 0x54, 0xed, 0xf9, 0x61, 0x57, 0x77, 0xdc, 0x75, 0xab, 0xb7,
		0xd7, 0xa5, 0x6c, 0x14, 0xd4, 0xe9, 0x77, 0x5d, 0xed, 0x18, 0x6b, 0xc6, 0xad, 0xf3, 0x50, 0x5a,
		0xb6, 0xf1, 0xc4, 0x30, 0xf5, 0x6e, 0xc2, 0x36, 0xb3, 0x3e, 0x4a, 0x7e, 0x2d, 0x3e, 0x03, 0xd3,
		0x46, 0x87, 0x9a, 0xae, 0xe1, 0x1e, 0x68, 0xcf, 0x30, 0xc9, 0xe1, 0x37, 0xbe, 0x0a, 0x27, 0xb6,
		0x0d, 0xdb, 0x71, 0x13, 0x1d, 0xce, 0x31, 0x31, 0x5e, 0x15, 0x7e, 0x05, 0xea, 0x36, 0x75, 0xed,
		0x83, 0x87, 0x56, 0xd7, 0x68, 0x1f, 0x68, 0xc7, 0x99, 0x0f, 0x9e, 0x08, 0x7d, 0x90, 0x8c, 0xaa,
		0x48, 0x54, 0x0e, 0x6b, 0x30, 0xa5, 0xbb, 0x2e, 0xed, 0xed, 0xb9, 0x1a, 0x66, 0xae, 0x10, 0x7e,
		0x7a, 0x10, 0xe8, 0xd3, 0x3d, 0xc3, 0xd6, 0x3d, 0x1d, 0x9e, 0x3f, 0x38, 0xae, 0xde, 0xdb, 0xd3,
		0x4e, 0xb0, 0x65, 0xc0, 0xab, 0xc2, 0x0d, 0x98, 0x69, 0xdb, 0x96, 0xb9, 0xd9, 0xde, 0xa1, 0x9d,
		0x7e, 0x97, 0x6a, 0x27, 0x19, 0xda, 0x58, 0x19, 0x6e, 0xc1, 0x0b, 0x0c, 0xfd, 0x3d, 0xda, 0x36,
		0x1c, 0xaf, 0xb5, 0xee, 0xec, 0xde, 0xd5, 0xdb, 0xbb, 0xd6, 0xf6, 0x76, 0xe8, 0x92, 0xcf, 0x32,
		0x1c, 0x79, 0x62, 0x78, 0x01, 0xca, 0x3d, 0xda, 0xb3, 0xb4, 0xe7, 0xd8, 0x48, 0x67, 0xc2, 0x91,
		0xbe, 0x41, 0x7b, 0x16, 0x61, 0x35, 0xf8, 0x1e, 0xcc, 0x39, 0x54, 0xb7, 0xdb, 0x3b, 0xa3, 0x10,
		0xa5, 0x9d, 0x62, 0xd2, 0x5a, 0x28, 0xbd, 0x99, 0xa8, 0x27, 0xa9, 0x16, 0xf8, 0x3e, 0x9c, 0xd8,
		0xb3, 0xe9, 0xfe, 0x9d, 0xbe, 0x6b, 0x11, 0xea, 0x50, 0xf7, 0xa1, 0x65, 0x98, 0xae, 0xa3, 0x69,
		0x49, 0x03, 0x0f, 0xab, 0x08, 0x4f, 0x1e, 0x2f, 0x42, 0x75, 0x87, 0xea, 0x1d, 0x6a, 0x6b, 0xa7,
		0x59, 0xcb, 0xd9, 0xb0, 0x65, 0x8b, 0x95, 0x92, 0xa0, 0xb6, 0xf1, 0x75, 0x04, 0x97, 0x52, 0x61,
		0x29, 0xf0, 0xb9, 0x74, 0xc4, 0x7d, 0x0e, 0xaa, 0xb6, 0xef, 0xa1, 0x88, 0x79, 0x68, 0xf0, 0x85,
		0xef, 0xc2, 0x7c, 0x27, 0x62, 0xba, 0x78, 0xfb, 0x8d, 0x0e, 0x8b, 0xab, 0x25, 0x92, 0x29, 0xd3,
		0xf8, 0x01, 0x82, 0xc5, 0x14, 0x12, 0x6f, 0xbd, 0x08, 0x60, 0xb0, 0x85, 0x89, 0xd8, 0x9c, 0x07,
		0x5f, 0x9e, 0x77, 0x75, 0x82, 0x85, 0x57, 0x64, 0xf8, 0xc2, 0xcf, 0x5c, 0x80, 0x25, 0x09, 0x80,
		0x5f, 0x80, 0xa5, 0x14, 0x3e, 0xcf, 0x1b, 0x3b, 0x6f, 0xf5, 0xdd, 0x24, 0xc2, 0xeb, 0x50, 0x77,
		0xfd, 0x98, 0xc6, 0x98, 0xa9, 0xc8, 0x22, 0x11, 0x0e, 0x22, 0xd1, 0xa3, 0x51, 0x0d, 0x89, 0x8a,
		0x35, 0xfe, 0x58, 0x85, 0x55, 0xce, 0x64, 0x04, 0xb1, 0x83, 0x05, 0xae, 0xa4, 0xa2, 0x15, 0x38,
		0x6e, 0xd2, 0x41, 0x62, 0xdd, 0xfa, 0x56, 0x49, 0x57, 0xa4, 0x18, 0xb3, 0x28, 0xcd, 0x98, 0x51,
		0xc2, 0x29, 0xc9, 0x13, 0x4e, 0x79, 0x0c, 0xc2, 0xa9, 0x4c, 0x92, 0x70, 0xaa, 0x52, 0x84, 0x93,
		0xe7, 0x1e, 0x53, 0xf9, 0xee, 0x81, 0xef, 0xc1, 0xd9, 0xad, 0x20, 0x64, 0x78, 0x8a, 0x36, 0x4c,
		0x97, 0xda, 0xfb, 0x7a, 0x77, 0xc3, 0x8c, 0x73, 0x5f, 0xb6, 0x50, 0x9c, 0xc0, 0x6a, 0x8a, 0x04,
		0x76, 0x11, 0x8e, 0x6d, 0xc7, 0x78, 0x0b, 0x98, 0x23, 0xc4, 0x0b, 0xf1, 0x22, 0xcc, 0x6e, 0xc7,
		0x59, 0xaa, 0xce, 0x66, 0x29, 0x51, 0x2a, 0x24, 0xa7, 0x99, 0x0c, 0x72, 0x1a, 0x85, 0x9d, 0x63,
		0x59, 0x61, 0x67, 0x18, 0x4d, 0x67, 0x95, 0xa2, 0xe9, 0x33, 0xaa, 0xd1, 0xb4, 0xf1, 0x73, 0x04,
		0x17, 0xa3, 0x41, 0x3d, 0x24, 0x86, 0x4e, 0x7a, 0x1d, 0x8d, 0xfc, 0x1b, 0xe5, 0xfa, 0xf7, 0x6d,
		0x38, 0xe3, 0x88, 0x7d, 0xae, 0xc8, 0x26, 0x3a, 0x43, 0x22, 0x4a, 0x83, 0x7e, 0xe4, 0x09, 0x3f,
		0x1b, 0xef, 0x22, 0x68, 0xc4, 0x00, 0xf3, 0xb7, 0xbe, 0xcb, 0x30, 0xe7, 0xc4, 0x86, 0x12, 0xac,
		0xfa, 0x12, 0x49, 0x95, 0xc7, 0x88, 0xbf, 0x98, 0x20, 0xfe, 0x79, 0xa8, 0xd9, 0xf4, 0x4b, 0x7d,
		0xea, 0x84, 0x41, 0xb0, 0x46, 0x46, 0x05, 0x8d, 0x8f, 0x12, 0xd6, 0x13, 0xf2, 0xc2, 0x32, 0xcc,
		0xd1, 0x68, 0xbc, 0xa2, 0x4f, 0x43, 0x86, 0x48, 0x95, 0x73, 0xa1, 0x17, 0x05, 0xd0, 0x17, 0x61,
		0xd6, 0x89, 0x18, 0x60, 0x18, 0xa8, 0x13, 0xa5, 0xb1, 0x21, 0x96, 0x13, 0x43, 0x5c, 0x84, 0xd9,
		0x2d, 0xc3, 0xd4, 0xed, 0x83, 0xf5, 0x1d, 0xda, 0xde, 0x75, 0xfa, 0x3d, 0x16, 0x60, 0x6a, 0x24,
		0x51, 0xda, 0xf8, 0x00, 0xc1, 0x85, 0xe8, 0x60, 0x45, 0xa1, 0x5d, 0xc5, 0xf4, 0x69, 0xfc, 0x45,
		0x2e, 0xfe, 0x04, 0x5d, 0x94, 0xe4, 0xe8, 0xe2, 0x1b, 0x25, 0x38, 0x1f, 0x45, 0xcc, 0x27, 0xcb,
		0xa3, 0xc1, 0x5b, 0x69, 0xeb, 0x7d, 0x27, 0x44, 0x7a, 0x2e, 0x40, 0x9a, 0x06, 0xb3, 0xee, 0x49,
		0x11, 0x5f, 0x38, 0x4a, 0xcf, 0xe5, 0x38, 0x3d, 0x47, 0xe7, 0xaf, 0x92, 0x98, 0xbf, 0x11, 0xd9,
		0x57, 0x63, 0x64, 0x3f, 0x0f, 0xb5, 0x2d, 0xdd, 0xa1, 0x3e, 0xe3, 0x4d, 0xf9, 0xae, 0x3b, 0x2c,
		0xf0, 0x7a, 0x34, 0xe9, 0xc0, 0xaf, 0x9c, 0xf6, 0x7b, 0x0c, 0xbf, 0x3d, 0x8b, 0x6c, 0x5b, 0xf6,
		0x2e, 0x1b, 0xcc, 0x67, 0xa8, 0xed, 0x21, 0x66, 0xa1, 0xb6, 0x44, 0x52, 0xe5, 0x1c, 0xef, 0x01,
		0xae, 0xf7, 0x7c, 0xad, 0x02, 0x17, 0xef, 0xb4, 0x5d, 0x63, 0xdf, 0x70, 0x0f, 0x32, 0x03, 0xcd,
		0x39, 0x00, 0x3d, 0x90, 0x1b, 0x32, 0x75, 0xa4, 0xc4, 0xa3, 0xe8, 0xf0, 0x8b, 0x47, 0xd1, 0x77,
		0x22, 0x75, 0x24, 0x26, 0xe9, 0x19, 0xaa, 0xe3, 0x1f, 0x63, 0xfd, 0x85, 0x1c, 0x7c, 0xc5, 0x42,
		0x5b, 0x59, 0x9e, 0xba, 0x2b, 0x51, 0xea, 0xbe, 0x07, 0x67, 0x43, 0x67, 0xc9, 0xe2, 0xd9, 0x6c,
		0xa1, 0x78, 0x2f, 0x3e, 0x1d, 0xf3, 0xce, 0x9a, 0xd9, 0x42, 0x39, 0xc1, 0x77, 0x3a, 0x37, 0xf8,
		0xde, 0x84, 0x53, 0x3b, 0x54, 0xb7, 0xdd, 0x2d, 0xaa, 0x27, 0xf5, 0xd7, 0x58, 0x63, 0x51, 0x75,
		0xee, 0x36, 0x01, 0x24, 0xb6, 0x09, 0x89, 0x83, 0x53, 0x5d, 0xf2, 0xe0, 0x34, 0x22, 0xd6, 0x99,
		0xcc, 0xfd, 0xfc, 0x8f, 0x10, 0x34, 0x62, 0x7e, 0xf8, 0x1f, 0xe4, 0x8f, 0x28, 0xcd, 0x95, 0x63,
		0xa7, 0x3d, 0xc6, 0xcb, 0x51, 0x98, 0xca, 0x27, 0x8e, 0x8f, 0x99, 0x45, 0x1a, 0xbf, 0x45, 0x70,
		0x3e, 0x0a, 0x78, 0x52, 0x07, 0x13, 0xde, 0x38, 0x4a, 0xd2, 0xe3, 0x28, 0xe7, 0x8e, 0x23, 0x11,
		0x4d, 0x1b, 0x3f, 0x29, 0xc2, 0x85, 0xe8, 0x38, 0x44, 0x2c, 0x17, 0x41, 0x8c, 0xf2, 0x11, 0x1f,
		0xd6, 0xf2, 0x09, 0xfe, 0x2b, 0x4b, 0xf1, 0x9f, 0x77, 0xf6, 0xf1, 0x36, 0xa1, 0xf1, 0xab, 0x1a,
		0x7f, 0xc0, 0xe9, 0x0a, 0xbc, 0x0a, 0x38, 0x52, 0x18, 0x6e, 0x7d, 0xfd, 0x1b, 0x31, 0x4e, 0x4d,
		0xe3, 0xdb, 0x08, 0x96, 0x63, 0x2e, 0xaa, 0x9b, 0x6d, 0xda, 0x25, 0xbe, 0x73, 0xab, 0xc7, 0xf5,
		0x49, 0x1c, 0x91, 0x7f, 0x8a, 0x60, 0x35, 0x00, 0xe0, 0xa3, 0xc9, 0xf7, 0xc8, 0x3c, 0x58, 0x27,
		0x43, 0x26, 0xf7, 0x57, 0x76, 0xc0, 0xd4, 0x93, 0x38, 0x2e, 0xff, 0x13, 0xc5, 0x3d, 0xcd, 0x47,
		0x9c, 0x46, 0x28, 0xf6, 0xb4, 0xbb, 0x30, 0xdf, 0xd5, 0xdd, 0xe1, 0x60, 0xe3, 0xa6, 0x1f, 0x99,
		0x2c, 0x4b, 0xe6, 0x63, 0x5f, 0x5f, 0xbf, 0x42, 0xf0, 0xbc, 0xe7, 0xb0, 0xb6, 0x20, 0xf0, 0x6a,
		0x30, 0xe5, 0xb9, 0xb0, 0x3d, 0x9c, 0x8c, 0xf0, 0x13, 0xbf, 0x06, 0xa7, 0x03, 0xd2, 0x7a, 0x60,
		0xd8, 0xbc, 0x23, 0x45, 0x89, 0x88, 0x05, 0x26, 0x32, 0x63, 0x9f, 0x83, 0xd3, 0x0c, 0xba, 0xd7,
		0xbd, 0x02, 0x70, 0xc9, 0x4d, 0x63, 0xe3, 0x37, 0x08, 0xe6, 0x59, 0xff, 0x19, 0x9e, 0x70, 0x38,
		0x15, 0x93, 0xb0, 0x42, 0x26, 0x0b, 0x7c, 0x88, 0x60, 0xc1, 0x47, 0xef, 0x1b, 0x8a, 0xbb, 0xe4,
		0xc4, 0xc3, 0x38, 0xb2, 0xc5, 0x96, 0x09, 0xfa, 0x5f, 0x08, 0xd6, 0xd2, 0xb7, 0x4a, 0xd9, 0xd1,
		0x6c, 0x88, 0x14, 0x45, 0x91, 0xfe, 0x1f, 0x68, 0xf4, 0xa9, 0x4b, 0x6d, 0x53, 0xef, 0xa6, 0xde,
		0x2b, 0xfc, 0x09, 0x11, 0xd6, 0xe3, 0xc7, 0x70, 0x3a, 0xac, 0x1b, 0xe3, 0x01, 0x45, 0xdc, 0x36,
		0x73, 0xe8, 0xef, 0x20, 0xce, 0x9d, 0x9d, 0xc8, 0xfd, 0xf2, 0xe6, 0x01, 0x49, 0xcc, 0x83, 0x90,
		0xe8, 0xbd, 0x0d, 0xc4, 0xd9, 0x37, 0x74, 0x7b, 0x97, 0xda, 0x84, 0xb6, 0x2d, 0xbb, 0xc3, 0x0d,
		0xd5, 0x3d, 0x26, 0xf0, 0xa6, 0xde, 0x0b, 0x0d, 0x1f, 0x29, 0x39, 0xda, 0xdb, 0xcd, 0xc8, 0x06,
		0xb3, 0x9c, 0xb9, 0xc1, 0x7c, 0x9b, 0x63, 0xd1, 0x4d, 0xe3, 0x89, 0xa9, 0xf3, 0xc9, 0xc7, 0x61,
		0x55, 0xd1, 0x11, 0x8d, 0x4a, 0x46, 0x67, 0x8d, 0x62, 0xf4, 0xac, 0x11, 0x9d, 0xd0, 0x52, 0x62,
		0x42, 0xbf, 0x0c, 0xcb, 0xe9, 0x3b, 0x58, 0x6a, 0xf7, 0x0c, 0x53, 0x77, 0x27, 0xb1, 0x1d, 0xcb,
		0xd2, 0xfd, 0xb3, 0x22, 0xdc, 0x8e, 0xb1, 0xef, 0x7d, 0x91, 0x4f, 0xc6, 0x9d, 0x7f, 0xc2, 0x2e,
		0x36, 0x3a, 0xe6, 0x15, 0x63, 0xc7, 0xbc, 0xd7, 0xe1, 0xf8, 0x40, 0x7d, 0x61, 0xa5, 0xdb, 0x78,
		0xd6, 0x69, 0x5b, 0xa6, 0x6b, 0x5b, 0xdd, 0xf0, 0x98, 0x1e, 0x7c, 0x7a, 0x1b, 0xae, 0xf6, 0x8e,
		0xd1, 0xed, 0x84, 0xdd, 0xbc, 0x65, 0x76, 0x7d, 0x06, 0x9c, 0x26, 0xe9, 0x8a, 0xc6, 0x3f, 0x8a,
		0x70, 0x4b, 0xce, 0x5e, 0xfc, 0x38, 0xfa, 0x7a, 0x34, 0x06, 0xcd, 0x36, 0x5f, 0x0e, 0xaf, 0x41,
		0x65, 0xfa, 0x8a, 0xdd, 0x3b, 0x4c, 0x60, 0xeb, 0x25, 0x3c, 0x5c, 0x73, 0xad, 0x5e, 0x1e, 0xc3,
		0xea, 0xcb, 0x30, 0x67, 0x24, 0x63, 0x6a, 0xc5, 0xdf, 0xa8, 0x24, 0xcb, 0xa3, 0x33, 0x54, 0x8d,
		0xcd, 0x50, 0xe3, 0x77, 0x08, 0x6e, 0x08, 0x4d, 0x93, 0x13, 0xf3, 0x79, 0x08, 0x90, 0x00, 0xc1,
		0x51, 0x3b, 0x61, 0xe3, 0xaf, 0x45, 0xb8, 0xe1, 0x87, 0x95, 0xff, 0xd1, 0x55, 0x16, 0x8f, 0x8d,
		0x65, 0x71, 0x6c, 0x8c, 0xdd, 0xc3, 0x08, 0x67, 0x9e, 0xbf, 0x36, 0xa7, 0x44, 0x6b, 0xf3, 0xa3,
		0x22, 0x5c, 0xcf, 0x31, 0xaf, 0xd2, 0xa2, 0x94, 0xea, 0xeb, 0x93, 0xba, 0x28, 0xff, 0x82, 0xe0,
		0xaa, 0xd0, 0x34, 0x22, 0xee, 0xfc, 0x6f, 0x5a, 0x8d, 0x62, 0x4a, 0xf0, 0xce, 0x3b, 0x57, 0x3e,
		0xbd, 0xe7, 0x50, 0x7b, 0x98, 0xdc, 0x92, 0x7c, 0x95, 0x39, 0x8a, 0xd5, 0xc9, 0x7b, 0x1c, 0x2a,
		0x2a, 0x3f, 0x0e, 0x7d, 0x54, 0x85, 0x6b, 0xec, 0x98, 0xb6, 0x1e, 0x5d, 0x1f, 0xf9, 0xf1, 0x65,
		0x64, 0x6e, 0x14, 0x33, 0xf7, 0x39, 0x80, 0xd0, 0x74, 0x81, 0x03, 0xd7, 0x48, 0xa4, 0x24, 0xf5,
		0xfa, 0x5a, 0x1a, 0xeb, 0xf5, 0x75, 0xdc, 0x2b, 0x5c, 0xc9, 0xd7, 0xd7, 0xea, 0x24, 0x5f, 0x5f,
		0xa7, 0xa4, 0x5e, 0x5f, 0x1f, 0xc0, 0x71, 0x3f, 0xcd, 0x89, 0x55, 0x06, 0x17, 0xa3, 0xd3, 0x2c,
		0xbe, 0x68, 0x41, 0x7c, 0x79, 0x98, 0xac, 0x27, 0xe9, 0x26, 0x51, 0x2f, 0xad, 0xc5, 0x83, 0xe3,
		0x24, 0x2e, 0x6e, 0x09, 0x3c, 0x3b, 0x9a, 0x4b, 0x42, 0xfb, 0x43, 0xa4, 0x75, 0x86, 0x74, 0x3e,
		0x40, 0xfa, 0x98, 0x27, 0x43, 0xf8, 0x4d, 0x93, 0x97, 0xc1, 0x33, 0x92, 0x97, 0xc1, 0xc9, 0xcc,
		0x97, 0x63, 0x9c, 0xcc, 0x97, 0xd1, 0x7e, 0x7e, 0x56, 0xea, 0x25, 0xf6, 0x19, 0xa5, 0x97, 0xd8,
		0x39, 0xe5, 0xc5, 0xf6, 0xf7, 0x22, 0x5c, 0xcd, 0x58, 0x6c, 0xc2, 0xfb, 0xd4, 0x8f, 0x79, 0xa5,
		0xdd, 0x0e, 0xf9, 0xcd, 0xbf, 0x83, 0x5c, 0x0a, 0x37, 0x9d, 0x19, 0xa0, 0x93, 0x6f, 0x5c, 0xa1,
		0x0f, 0x56, 0xe2, 0x3e, 0xc8, 0x0b, 0xe8, 0x55, 0x41, 0x40, 0x9f, 0x40, 0x3e, 0x42, 0xe3, 0xbd,
		0x22, 0xac, 0xf0, 0x61, 0x0b, 0xae, 0xa6, 0x44, 0xc6, 0xe6, 0x01, 0x2f, 0x0a, 0x80, 0x4f, 0x8c,
		0x71, 0x92, 0x33, 0x58, 0x96, 0x9e, 0xc1, 0x91, 0xe3, 0x57, 0x32, 0x0f, 0xb2, 0xbf, 0x28, 0x82,
		0x60, 0x5a, 0x95, 0x1f, 0x23, 0x8e, 0x9c, 0x7f, 0xc7, 0xb7, 0x86, 0xca, 0x0e, 0x26, 0x7d, 0xcb,
		0x56, 0xe5, 0x5e, 0xe4, 0xfd, 0xa1, 0x08, 0x97, 0x15, 0x57, 0xb1, 0xe2, 0x31, 0xfc, 0xc8, 0x37,
		0x76, 0x49, 0x83, 0x56, 0x0e, 0x65, 0xd0, 0xaa, 0xb4, 0x41, 0xa7, 0xb8, 0x06, 0xfd, 0x65, 0x11,
		0xae, 0x08, 0x5c, 0x51, 0xf9, 0xd2, 0xfc, 0x13, 0xe6, 0x8b, 0x7f, 0x16, 0x9a, 0x4e, 0x32, 0x35,
		0x0f, 0xc9, 0xbd, 0x35, 0x7d, 0xc2, 0xcc, 0xfa, 0x7e, 0x11, 0xd6, 0x04, 0x66, 0xcd, 0xba, 0x6d,
		0xe3, 0xf2, 0x07, 0xd7, 0x44, 0xc5, 0x09, 0x98, 0xa8, 0x74, 0x28, 0x13, 0x95, 0xa5, 0x4d, 0x54,
		0xe1, 0x9a, 0xe8, 0xdd, 0x26, 0xcc, 0xb4, 0xfc, 0x1f, 0x43, 0xb0, 0x22, 0x6f, 0x4d, 0xd2, 0xd8,
		0x19, 0x26, 0xfc, 0xc4, 0xf3, 0x50, 0x73, 0x87, 0x19, 0xcd, 0x3e, 0x75, 0x8e, 0x0a, 0xf0, 0x2a,
		0xd4, 0x98, 0x60, 0x24, 0xf5, 0x67, 0x2e, 0x70, 0xc7, 0xfb, 0x61, 0x39, 0x19, 0x89, 0x78, 0x7a,
		0xf6, 0x83, 0xac, 0x15, 0x7f, 0x0c, 0xe1, 0xa7, 0x37, 0x03, 0xde, 0x56, 0x7b, 0x08, 0x39, 0xf8,
		0xc2, 0xdf, 0x44, 0xf0, 0xd2, 0x40, 0x6e, 0x17, 0xc0, 0xfc, 0xa1, 0xde, 0x5c, 0x13, 0x4e, 0x0c,
		0xbf, 0x59, 0xab, 0x40, 0x64, 0x35, 0xe0, 0xef, 0x20, 0xb8, 0x34, 0x90, 0xe5, 0x5c, 0x16, 0x31,
		0xeb, 0xcd, 0x97, 0x85, 0x78, 0x44, 0x0d, 0x5b, 0x05, 0x22, 0xaf, 0x05, 0xbf, 0x83, 0x60, 0x71,
		0x20, 0xc5, 0x66, 0xec, 0x60, 0x52, 0x6f, 0xae, 0x0a, 0x01, 0x71, 0x5b, 0xb5, 0x0a, 0x44, 0xb2,
		0x7f, 0xfc, 0x2d, 0x04, 0x4b, 0x03, 0xc9, 0x60, 0xc6, 0xce, 0x39, 0xf5, 0xe6, 0x55, 0x21, 0x18,
		0x41, 0xbb, 0x56, 0x81, 0x48, 0xeb, 0xc0, 0x5f, 0x45, 0x70, 0xb1, 0x23, 0x91, 0x43, 0xc9, 0x4e,
		0x51, 0xf5, 0xe6, 0x4a, 0x08, 0x46, 0x26, 0xef, 0xb2, 0x55, 0x20, 0x52, 0x7d, 0xe3, 0xb7, 0xa1,
		0xd1, 0xc9, 0x4d, 0x8b, 0x0c, 0xb2, 0x69, 0x96, 0xb9, 0x08, 0x44, 0x7e, 0x2b, 0xd1, 0x6f, 0xca,
		0x04, 0x42, 0x6f, 0x9d, 0x11, 0x9b, 0x20, 0xc3, 0x51, 0xa5, 0xfa, 0xc6, 0x5f, 0x81, 0x0b, 0x9d,
		0xfc, 0xfc, 0xc4, 0x20, 0xf1, 0xf6, 0x32, 0x0f, 0x82, 0xd8, 0x1b, 0x64, 0x7a, 0xc6, 0x07, 0x70,
		0xbe, 0x93, 0x97, 0x6e, 0x18, 0x9c, 0x36, 0x2f, 0xf1, 0xd4, 0x8b, 0x56, 0x46, 0x7e, 0xaf, 0x6c,
		0x02, 0x74, 0x89, 0xf4, 0xba, 0xe0, 0x18, 0xbb, 0x92, 0x4a, 0x97, 0xcb, 0xf1, 0x41, 0x99, 0xbe,
		0x3d, 0x1f, 0xd4, 0x73, 0x53, 0xab, 0x82, 0xa3, 0xf1, 0x32, 0x17, 0x81, 0xd0, 0x07, 0xf3, 0xfb,
		0x4d, 0x99, 0x40, 0xe8, 0x83, 0xc7, 0xc5, 0x26, 0xc8, 0xf2, 0x41, 0x99, 0xbe, 0x3d, 0x17, 0xd0,
		0xf3, 0x72, 0x4e, 0xd8, 0x2f, 0x7b, 0x22, 0x2e, 0x90, 0x9b, 0xa4, 0xe2, 0xb9, 0x40, 0x6e, 0xaf,
		0x9e, 0xfb, 0xeb, 0xf9, 0x89, 0x4b, 0xec, 0x07, 0x43, 0x11, 0xf7, 0x97, 0xc8, 0x75, 0xf2, 0xdc,
		0x5f, 0xa2, 0x67, 0xfc, 0x04, 0x9e, 0x77, 0xc5, 0x99, 0x1d, 0xec, 0xe7, 0x47, 0xf5, 0xe6, 0x85,
		0xe1, 0xbd, 0x9c, 0x58, 0xb4, 0x55, 0x20, 0x59, 0x3d, 0x61, 0x1d, 0x4e, 0xbb, 0xa2, 0x3c, 0x0c,
		0xf6, 0x73, 0xa5, 0x7a, 0xf3, 0x7c, 0x4c, 0x0d, 0x4f, 0xb0, 0x55, 0x20, 0xe2, 0x5e, 0xf0, 0x77,
		0x11, 0x2c, 0xeb, 0xd2, 0xc9, 0x4d, 0xc1, 0x8f, 0x9e, 0x9a, 0x5c, 0x97, 0xca, 0x6c, 0xd9, 0x2a,
		0x10, 0x05, 0x3d, 0xf8, 0x7d, 0x04, 0xab, 0xb6, 0x52, 0x82, 0x53, 0xf0, 0x0b, 0xab, 0x57, 0x47,
		0x77, 0x66, 0x2a, 0xad, 0x5b, 0x05, 0xa2, 0xa8, 0x2f, 0xe9, 0x86, 0x82, 0x03, 0x5a, 0xf0, 0x7b,
		0xad, 0xcb, 0x62, 0x8b, 0xf1, 0xb0, 0xc8, 0xf4, 0x8c, 0xbf, 0x08, 0xf3, 0x6e, 0x46, 0x16, 0x4d,
		0xf0, 0x7b, 0xaf, 0x8b, 0x31, 0x07, 0x11, 0xab, 0xcc, 0xec, 0x0b, 0xef, 0xc3, 0x42, 0x3b, 0x27,
		0xdd, 0x45, 0x3b, 0xc3, 0xf4, 0x2d, 0x85, 0xfa, 0xf2, 0xd2, 0x63, 0x5a, 0x05, 0x92, 0xdb, 0x27,
		0xee, 0xc1, 0xd9, 0x5e, 0x56, 0xae, 0x84, 0xf6, 0x3c, 0x53, 0xfa, 0xe2, 0xf0, 0xb6, 0x32, 0x4b,
		0xb8, 0x55, 0x20, 0xd9, 0xbd, 0xf1, 0xb7, 0x5c, 0x82, 0x87, 0x19, 0x6d, 0x3e, 0x67, 0xcb, 0x25,
		0x68, 0xc7, 0xdd, 0x72, 0x89, 0x1e, 0x7f, 0xbc, 0xe5, 0x39, 0x90, 0x3e, 0x79, 0x69, 0x67, 0xe3,
		0xcb, 0x53, 0xfe, 0xcc, 0xe6, 0x2d, 0x4f, 0x79, 0x3d, 0xf8, 0x87, 0x08, 0xd6, 0x06, 0x6a, 0xaf,
		0xca, 0xda, 0x39, 0x86, 0xed, 0x86, 0x78, 0xff, 0x9e, 0x17, 0x3f, 0x54, 0x35, 0xf2, 0x67, 0x53,
		0xb4, 0x5a, 0x5e, 0xc8, 0x99, 0x4d, 0xf1, 0xca, 0x91, 0xd6, 0x81, 0xff, 0x84, 0xe0, 0xb6, 0x7d,
		0xa8, 0xc4, 0x11, 0x6d, 0x81, 0xc1, 0x7c, 0xc0, 0x8d, 0x72, 0xca, 0xbd, 0xb5, 0x0a, 0xe4, 0x90,
		0x78, 0xf0, 0xef, 0x11, 0xdc, 0xb2, 0xc7, 0xcf, 0xed, 0xd0, 0xce, 0xb3, 0xf1, 0xac, 0xab, 0x8d,
		0x47, 0x14, 0x4f, 0x0e, 0x83, 0x04, 0xff, 0x1a, 0xc1, 0x0d, 0x3a, 0x5e, 0xc6, 0x84, 0xd6, 0x60,
		0xa3, 0xf8, 0xff, 0x70, 0x14, 0x63, 0x26, 0x5e, 0xb4, 0x0a, 0x64, 0x5c, 0x04, 0x8c, 0x30, 0x07,
		0x4a, 0xbf, 0x18, 0xd5, 0x2e, 0xc4, 0x09, 0x53, 0xed, 0xf7, 0xa6, 0x1e, 0x61, 0xaa, 0xe9, 0xc3,
		0x1f, 0x20, 0xb8, 0xe6, 0xa8, 0xbf, 0xb2, 0x6a, 0x17, 0x19, 0xce, 0x5b, 0xc3, 0x27, 0x26, 0xf5,
		0x2e, 0x5a, 0x05, 0x32, 0x8e, 0x66, 0xfc, 0x63, 0x04, 0x57, 0x1d, 0xc5, 0xa7, 0x2a, 0xed, 0x45,
		0x06, 0xf7, 0xa6, 0x04, 0x5c, 0x91, 0x1b, 0x2b, 0xeb, 0xc4, 0xdf, 0x47, 0xb0, 0xd2, 0x56, 0x78,
		0xe2, 0xd1, 0x16, 0x19, 0xc8, 0xeb, 0x43, 0xae, 0x56, 0x68, 0xdb, 0x2a, 0x10, 0x25, 0x5d, 0xcc,
		0x35, 0xdb, 0x4a, 0xef, 0x2b, 0xda, 0x4b, 0x71, 0xd7, 0x54, 0x7b, 0x9d, 0xf1, 0x5c, 0x53, 0x4d,
		0x1f, 0xfe, 0x1e, 0x82, 0xcb, 0x6d, 0x85, 0x39, 0x5e, 0x62, 0xf8, 0xae, 0x65, 0xe3, 0x13, 0x4d,
		0xaf, 0x8a, 0x26, 0xfc, 0x1e, 0x82, 0x2b, 0x6d, 0x95, 0x17, 0x01, 0xed, 0x12, 0xc3, 0xf6, 0x4a,
		0x8e, 0xed, 0x84, 0x6c, 0xa6, 0xa6, 0x2d, 0x03, 0x9f, 0xe8, 0x5c, 0xb6, 0x2c, 0x83, 0x4f, 0x7c,
		0x42, 0x53, 0xd3, 0xc6, 0x76, 0x2a, 0x6d, 0xb5, 0xfb, 0x6b, 0xed, 0x72, 0x7c, 0xa7, 0xa2, 0x78,
		0xfd, 0xed, 0xed, 0x54, 0x14, 0x35, 0x32, 0xee, 0x71, 0xc6, 0x4b, 0x72, 0xd3, 0x56, 0xe2, 0xdc,
		0x33, 0x66, 0xae, 0x9c, 0xc7, 0x3d, 0x63, 0x22, 0xc0, 0x1f, 0x22, 0xb8, 0xee, 0x8c, 0x91, 0x43,
		0xa6, 0x5d, 0x61, 0xd0, 0x5f, 0x93, 0x84, 0x2e, 0x5a, 0x4f, 0x63, 0xe9, 0x66, 0xb1, 0x9d, 0x2a,
		0xe6, 0x62, 0x69, 0xab, 0xf1, 0xd8, 0xae, 0x9a, 0xcb, 0xe5, 0xc5, 0x76, 0x55, 0x9d, 0x6c, 0x85,
		0xf5, 0x55, 0x12, 0xab, 0xb4, 0xb5, 0xf8, 0x0a, 0x53, 0xca, 0xca, 0xf2, 0x56, 0x98, 0x92, 0xb6,
		0xbb, 0x33, 0x00, 0x91, 0xec, 0x8e, 0x1b, 0x30, 0x15, 0xbc, 0x85, 0xe0, 0x15, 0xa8, 0xb2, 0xb7,
		0x0a, 0x47, 0x43, 0x0b, 0xa5, 0xe8, 0xfb, 0x4c, 0xf4, 0xb1, 0x84, 0x04, 0x32, 0x77, 0xaf, 0x7c,
		0xf6, 0xf2, 0x13, 0xc3, 0xdd, 0xe9, 0x6f, 0x79, 0x52, 0x6b, 0x2e, 0xed, 0xed, 0x59, 0xb6, 0xde,
		0x35, 0xac, 0xe1, 0x3f, 0xaf, 0xb0, 0xbf, 0x0b, 0x15, 0xfc, 0x15, 0xa9, 0xad, 0x2a, 0xfb, 0xba,
		0xf6, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xd7, 0x61, 0x19, 0x8e, 0x4a, 0x00, 0x00,
	},
	// common/workflow_execution.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
		0x10, 0x57, 0x48, 0xd2, 0xbb, 0x4c, 0x7a, 0xfd, 0xb3, 0x29, 0x87, 0xef, 0x40, 0x25, 0xca, 0x21,
		0x14, 0xc1, 0x5d, 0x0b, 0x41, 0x02, 0x5e, 0x78, 0x28, 0xf5, 0x55, 0x44, 0x3a, 0x20, 0xda, 0xf6,
		0x40, 0xe2, 0x05, 0x6d, 0xe3, 0x69, 0xb2, 0x3a, 0xdb, 0x1b, 0x79, 0xc7, 0xb4, 0xf9, 0x46, 0x7c,
		0x29, 0x1e, 0x91, 0x78, 0xe2, 0x33, 0x20, 0xcf, 0xda, 0x71, 0x62, 0x07, 0x0a, 0xbc, 0xb4, 0xd9,
		0xdf, 0x6f, 0xe6, 0xb7, 0x3b, 0xb3, 0x33, 0xb3, 0x86, 0xf7, 0xa7, 0x26, 0x8a, 0x4c, 0x7c, 0x7a,
		0x6b, 0x92, 0x37, 0x37, 0xa1, 0xb9, 0xfd, 0x19, 0xef, 0x70, 0x9a, 0x92, 0x36, 0xf1, 0xc9, 0x22,
		0x31, 0x64, 0xc4, 0x8e, 0x33, 0x78, 0x7a, 0x88, 0x71, 0x1a, 0xd9, 0x53, 0xfe, 0xeb, 0xa8, 0xa7,
		0xbd, 0xdc, 0xd7, 0xfd, 0x73, 0xe0, 0x60, 0x0c, 0x87, 0x3f, 0xe6, 0x5a, 0x2f, 0x0b, 0x29, 0x71,
		0x0c, 0x50, 0x6c, 0x30, 0x0e, 0xbc, 0x46, 0xbf, 0x31, 0xec, 0xc8, 0x35, 0x44, 0x1c, 0x41, 0x3b,
		0x49, 0xe3, 0x71, 0xe0, 0xbd, 0xc5, 0x94, 0x5b, 0x0c, 0xbe, 0x87, 0x77, 0x6a, 0x52, 0x17, 0x3a,
		0x24, 0x4c, 0xfe, 0xb7, 0x20, 0x9f, 0x0d, 0x93, 0x1f, 0x30, 0xb1, 0xda, 0xc4, 0xe3, 0xf8, 0xc6,
		0x08, 0x01, 0x2d, 0x1d, 0x2d, 0xc2, 0x5c, 0x84, 0x7f, 0x8b, 0x0f, 0x61, 0xef, 0x06, 0x15, 0xa5,
		0x09, 0xe6, 0x96, 0xb9, 0x4e, 0x05, 0x1d, 0xfc, 0xd6, 0x82, 0xb7, 0x6b, 0x47, 0x64, 0xd5, 0x2f,
		0xa0, 0xb3, 0xca, 0x24, 0x4b, 0x77, 0x47, 0x4f, 0x4e, 0xf2, 0x44, 0xd5, 0x3c, 0x64, 0x69, 0x2b,
		0x86, 0xd0, 0xa2, 0xe5, 0x02, 0x79, 0xc3, 0xee, 0xe8, 0xa8, 0xea, 0x73, 0xb5, 0x5c, 0xa0, 0x64,
		0x0b, 0xf1, 0x1e, 0x74, 0x2c, 0xa9, 0x84, 0xae, 0x74, 0x84, 0x5e, 0xb3, 0xdf, 0x18, 0x36, 0x65,
		0x09, 0x64, 0xec, 0x34, 0x34, 0x16, 0x99, 0x6d, 0x39, 0x76, 0x05, 0x88, 0x97, 0xd0, 0xe5, 0xc5,
		0x25, 0x29, 0x4a, 0xad, 0xd7, 0xee, 0x37, 0x86, 0x7b, 0xa3, 0x67, 0x27, 0xee, 0x76, 0x6b, 0xe7,
		0x3b, 0x2f, 0x4d, 0xe5, 0xba, 0x9f, 0xf8, 0x00, 0x1e, 0xcd, 0xb5, 0x25, 0x93, 0x2c, 0x5f, 0x61,
		0x3c, 0xa3, 0xb9, 0xb7, 0xc3, 0x1b, 0x6d, 0x82, 0x59, 0x36, 0x17, 0x2a, 0xc1, 0x98, 0x7c, 0x13,
		0x29, 0x9d, 0xdd, 0xca, 0x03, 0x97, 0xcd, 0x4d, 0x54, 0x9c, 0xc3, 0xbe, 0x43, 0x56, 0x1b, 0x7b,
		0x0f, 0xef, 0xcb, 0x5c, 0xd5, 0x23, 0x3b, 0xd2, 0x2a, 0x99, 0x1c, 0x7b, 0xc7, 0x1d, 0x69, 0x03,
		0x14, 0x7d, 0x68, 0x45, 0x18, 0x19, 0x0f, 0x58, 0x7f, 0xb7, 0xd0, 0xff, 0x16, 0x23, 0x23, 0x99,
		0x11, 0x3e, 0x1c, 0x58, 0x54, 0xc9, 0x74, 0x7e, 0x46, 0x94, 0xe8, 0xeb, 0x94, 0xd0, 0x7a, 0x5d,
		0xb6, 0xf6, 0x0a, 0xeb, 0xcb, 0x0a, 0x2f, 0x6b, 0x1e, 0xe2, 0x2b, 0xd8, 0x57, 0x29, 0x19, 0x89,
		0x16, 0x69, 0x62, 0x74, 0x4c, 0xd6, 0xdb, 0x65, 0x91, 0x5e, 0x21, 0xb2, 0x46, 0xc9, 0xaa, 0xed,
		0xe0, 0x8f, 0x06, 0x1c, 0xd7, 0x6f, 0xc3, 0xc4, 0x37, 0x7a, 0x96, 0x26, 0x8a, 0xe3, 0x7d, 0x0e,
		0x0f, 0x49, 0xd9, 0x37, 0xaf, 0xb4, 0xa5, 0xbc, 0xce, 0x0e, 0x0a, 0xe9, 0xab, 0x1c, 0x97, 0x2b,
		0x0b, 0x31, 0x81, 0x67, 0xab, 0x44, 0x5c, 0x72, 0xad, 0x98, 0xf3, 0xa2, 0x28, 0x4c, 0x4a, 0x97,
		0x38, 0x35, 0x71, 0x60, 0xb9, 0xf8, 0xda, 0xf2, 0xdf, 0x98, 0x8a, 0x0b, 0x38, 0xce, 0xd4, 0xff,
		0x41, 0xac, 0xc9, 0x62, 0xf7, 0x58, 0x0d, 0xfe, 0x6c, 0x41, 0x6f, 0x82, 0x71, 0xa0, 0xe3, 0xd9,
		0xd9, 0x94, 0xf4, 0x2f, 0x9a, 0x96, 0xdc, 0x48, 0xc7, 0x00, 0xaa, 0x58, 0xfb, 0x45, 0xa7, 0x97,
		0x88, 0xf8, 0x12, 0x76, 0x8b, 0xd5, 0xd5, 0x96, 0xbe, 0x39, 0x5b, 0xe3, 0xe4, 0x86, 0xa5, 0xf8,
		0x14, 0xda, 0x96, 0x14, 0xb9, 0xde, 0xd9, 0x1b, 0xbd, 0x9b, 0x57, 0x7f, 0xe5, 0x10, 0x59, 0xa5,
		0xa3, 0x74, 0x96, 0xe2, 0x23, 0x38, 0x98, 0xa3, 0x4a, 0xe8, 0x1a, 0x15, 0xf9, 0x48, 0x4a, 0x87,
		0x96, 0x7b, 0x6b, 0x57, 0xd6, 0x70, 0xf1, 0x39, 0x3c, 0x0e, 0x95, 0xa5, 0x6f, 0x0a, 0x3c, 0x8b,
		0xd7, 0x92, 0x8a, 0x16, 0xdc, 0x6d, 0x4d, 0xf9, 0x37, 0xac, 0x18, 0xc1, 0x51, 0xc6, 0x70, 0xaa,
		0x30, 0x28, 0xbd, 0x5c, 0x6b, 0x6d, 0xe5, 0x84, 0x07, 0x0f, 0x14, 0x11, 0x46, 0x0b, 0xe2, 0xd6,
		0x6a, 0xcb, 0x62, 0x29, 0x86, 0xb0, 0x1f, 0xa9, 0x3b, 0x1d, 0xa5, 0xd1, 0x99, 0x43, 0x2c, 0xf7,
		0x54, 0x5b, 0x56, 0x61, 0x71, 0x02, 0xc2, 0x4e, 0xe7, 0x18, 0xa4, 0xe1, 0xfa, 0xae, 0xae, 0x7b,
		0xb6, 0x30, 0xe2, 0x13, 0xe8, 0xe1, 0xdd, 0x42, 0xbb, 0x32, 0x2c, 0x1d, 0x80, 0x1d, 0xb6, 0x51,
		0xe2, 0x39, 0x1c, 0x66, 0xa7, 0xbf, 0x50, 0x3a, 0x4c, 0x13, 0x94, 0xa8, 0xac, 0x89, 0xb9, 0xa7,
		0x3a, 0xb2, 0x4e, 0x64, 0xe7, 0xc9, 0x40, 0x37, 0xb0, 0xc7, 0x01, 0xc6, 0xa4, 0x69, 0xc9, 0xdd,
		0xd3, 0x91, 0x5b, 0x98, 0xc2, 0x3e, 0x17, 0x29, 0x6e, 0xe7, 0x11, 0xdf, 0xce, 0x16, 0x66, 0xf0,
		0x7b, 0x03, 0x9e, 0xe4, 0x77, 0x7d, 0x3e, 0xd7, 0x61, 0xb0, 0x39, 0xbf, 0xd7, 0x1f, 0x18, 0xbf,
		0xf6, 0xc0, 0xf8, 0xc5, 0x03, 0xe3, 0xaf, 0x3f, 0x30, 0x7e, 0x96, 0xed, 0xdb, 0x72, 0x50, 0x7f,
		0xa7, 0xf2, 0xc1, 0xdc, 0x91, 0x55, 0x58, 0xf4, 0xa1, 0xab, 0x63, 0x4d, 0x5a, 0x11, 0x06, 0x63,
		0x3f, 0x1f, 0xd0, 0xeb, 0x90, 0xb8, 0x80, 0x43, 0x37, 0xdb, 0xb8, 0x5b, 0x26, 0x26, 0xd4, 0xd3,
		0x65, 0x3e, 0xa8, 0xbd, 0xa2, 0x54, 0xab, 0xbc, 0xac, 0xbb, 0x0c, 0x7e, 0x6d, 0x40, 0x6f, 0xb2,
		0x39, 0x24, 0x8b, 0x08, 0x03, 0x9e, 0xbc, 0xaf, 0x5f, 0x97, 0x11, 0x96, 0x88, 0x78, 0x0c, 0x3b,
		0x6e, 0x95, 0x87, 0x98, 0xaf, 0x36, 0x5f, 0xb6, 0xe6, 0x7f, 0x78, 0xd9, 0x36, 0x42, 0x0e, 0xea,
		0x21, 0x07, 0x5f, 0xbf, 0xf8, 0xe9, 0xe3, 0x99, 0xa6, 0x79, 0x7a, 0x9d, 0xe9, 0x9d, 0x66, 0x75,
		0x69, 0x12, 0x15, 0x6a, 0xb3, 0xfa, 0xf9, 0x82, 0xbf, 0x31, 0xf2, 0x0f, 0x8e, 0xeb, 0x1d, 0x5e,
		0x7d, 0xf6, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x6d, 0xab, 0xc9, 0xc4, 0x08, 0x00, 0x00,
	},
	// common/decision.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6f, 0xdc, 0x44,
		0x14, 0x5f, 0x37, 0xc9, 0x26, 0xfb, 0x76, 0x9b, 0xb6, 0xd3, 0xb4, 0x6c, 0xab, 0x26, 0x44, 0x4b,
		0x49, 0x5b, 0xa5, 0x49, 0xda, 0xad, 0xaa, 0xa6, 0xa2, 0x42, 0x84, 0xfc, 0xd1, 0xae, 0x44, 0x4b,
		0x35, 0x09, 0xaa, 0x04, 0x07, 0x34, 0xb1, 0x27, 0x5d, 0x13, 0x7b, 0x66, 0x99, 0x19, 0xa7, 0xcd,
		0xb5, 0x27, 0x24, 0x0e, 0x88, 0x13, 0x27, 0x24, 0x4e, 0x48, 0x7c, 0x05, 0x0e, 0x5c, 0xf8, 0x02,
		0x7c, 0x02, 0x3e, 0x0b, 0xf2, 0x78, 0xec, 0xb5, 0x9d, 0x8d, 0x6b, 0x87, 0x72, 0xe0, 0x92, 0xec,
		0xbc, 0xf7, 0x7b, 0x7f, 0xe6, 0xcd, 0xfb, 0x33, 0x63, 0xb8, 0x62, 0x73, 0xdf, 0xe7, 0x6c, 0xcd,
		0xa1, 0xb6, 0x2b, 0x5d, 0xce, 0x56, 0x87, 0x82, 0x2b, 0x8e, 0xea, 0x11, 0xf9, 0xfa, 0x25, 0xca,
		0x02, 0x5f, 0xae, 0xe9, 0xbf, 0x11, 0xeb, 0xfa, 0x65, 0x23, 0x11, 0xfd, 0x33, 0xc4, 0x39, 0x43,
		0x1c, 0xb8, 0x52, 0x71, 0x71, 0x6c, 0xa8, 0xef, 0x1b, 0xea, 0x2b, 0x2e, 0x0e, 0x0f, 0x3c, 0xfe,
		0xea, 0x6b, 0xfa, 0x9a, 0xda, 0x81, 0x4a, 0xcc, 0x74, 0x7e, 0xb0, 0xe0, 0xca, 0x9e, 0x20, 0x4c,
		0xba, 0x94, 0xa9, 0x2d, 0xe3, 0x42, 0x9f, 0x1d, 0x70, 0xf4, 0x04, 0x66, 0xa5, 0x3d, 0xa0, 0x4e,
		0xe0, 0x51, 0x67, 0xfb, 0x88, 0x32, 0xd5, 0xb6, 0x16, 0xad, 0xdb, 0xcd, 0xee, 0xdc, 0xaa, 0xb1,
		0xdb, 0x8b, 0x2c, 0x69, 0x1e, 0xce, 0x61, 0xd1, 0x3a, 0xb4, 0xa4, 0x22, 0x42, 0xc5, 0xb2, 0xe7,
		0x0a, 0x64, 0x33, 0xc8, 0xce, 0x9f, 0x93, 0xb0, 0xb4, 0x6b, 0x94, 0x6d, 0xd8, 0xca, 0x3d, 0x72,
		0xd5, 0xf1, 0x1e, 0x91, 0x87, 0xb1, 0x73, 0x1b, 0x4a, 0x09, 0x77, 0x3f, 0x50, 0x54, 0xa2, 0x05,
		0x00, 0x62, 0x10, 0x7d, 0x47, 0xbb, 0xd7, 0xc0, 0x29, 0x4a, 0xe8, 0x44, 0xbc, 0xda, 0x3b, 0x1e,
		0xd2, 0xbc, 0x13, 0x1b, 0x29, 0x1e, 0xce, 0x20, 0xd1, 0x55, 0xa8, 0x3b, 0xdc, 0x27, 0x2e, 0x6b,
		0x4f, 0x68, 0xad, 0x66, 0x85, 0xee, 0xc2, 0x8c, 0x22, 0xf2, 0xf0, 0x33, 0x57, 0xaa, 0xf6, 0xa4,
		0xd6, 0x76, 0x31, 0xd6, 0xb6, 0x67, 0xe8, 0x38, 0x41, 0xa0, 0x39, 0x98, 0x72, 0xd9, 0x30, 0x50,
		0xed, 0xa9, 0x45, 0xeb, 0x76, 0x0b, 0x47, 0x0b, 0xb4, 0x05, 0xf3, 0x71, 0xb0, 0xf6, 0xf8, 0xa6,
		0xc7, 0x25, 0xdd, 0x73, 0x7d, 0xca, 0x03, 0xb5, 0x4b, 0x6d, 0xce, 0x1c, 0xd9, 0xae, 0x2f, 0x5a,
		0xb7, 0xa7, 0x70, 0x31, 0x28, 0xab, 0x65, 0x37, 0x0c, 0x60, 0x4e, 0xcb, 0x74, 0x5e, 0xcb, 0x18,
		0x10, 0xfa, 0x18, 0xae, 0xeb, 0xe0, 0x8f, 0x77, 0x64, 0x46, 0xab, 0x28, 0x40, 0xa0, 0x75, 0x78,
		0x6f, 0x40, 0x89, 0x50, 0xfb, 0x94, 0xe4, 0xed, 0x37, 0xb4, 0xf0, 0x69, 0x6c, 0xf4, 0x10, 0x9a,
		0x82, 0x2a, 0x71, 0xfc, 0x9c, 0x7b, 0xae, 0x7d, 0xdc, 0x06, 0x1d, 0xcc, 0xcb, 0x71, 0x30, 0xf1,
		0x88, 0x85, 0xd3, 0x38, 0xb4, 0x04, 0xf5, 0x01, 0x25, 0x0e, 0x15, 0xed, 0xa6, 0x96, 0x98, 0x4d,
		0x32, 0x4a, 0x53, 0xb1, 0xe1, 0x76, 0x9e, 0xc2, 0x32, 0xa6, 0xdf, 0x06, 0x54, 0xaa, 0x4d, 0xc2,
		0x6c, 0xea, 0xfd, 0xbb, 0x4c, 0xea, 0x1c, 0xc1, 0x8d, 0x24, 0x7c, 0x62, 0x8c, 0x7c, 0x1b, 0xa6,
		0x55, 0xc8, 0x4a, 0x84, 0xe3, 0x25, 0x7a, 0x02, 0xd7, 0x4c, 0xfc, 0x76, 0x5c, 0x91, 0x0f, 0x70,
		0x98, 0x90, 0x13, 0xf8, 0x74, 0x40, 0x67, 0x1b, 0x96, 0x37, 0xb9, 0x3f, 0xf4, 0xa8, 0xa2, 0x2f,
		0x4c, 0x09, 0x6f, 0xc7, 0x15, 0x3c, 0xc6, 0x8d, 0xab, 0x50, 0x17, 0x54, 0x06, 0x5e, 0x54, 0xab,
		0x2d, 0x6c, 0x56, 0x9d, 0xaf, 0xe0, 0xd6, 0x0e, 0x71, 0xbd, 0xd2, 0x2a, 0x88, 0xe4, 0xcc, 0x6c,
		0xc4, 0xac, 0xc2, 0x1d, 0x3a, 0x54, 0x11, 0xd7, 0x8b, 0xbc, 0x6e, 0xe1, 0x78, 0xd9, 0x79, 0x0c,
		0xf3, 0x51, 0x8c, 0x2b, 0x07, 0xa7, 0xb3, 0x0d, 0x77, 0x22, 0xd1, 0x32, 0x9e, 0xa5, 0x3c, 0xb0,
		0xb2, 0x1e, 0xfc, 0x65, 0xc1, 0x7a, 0xe6, 0xb4, 0xb7, 0x5f, 0x2b, 0x2a, 0x18, 0x29, 0xbb, 0x61,
		0x53, 0xea, 0x56, 0xa6, 0xd4, 0x17, 0x00, 0xe2, 0xae, 0xd9, 0x77, 0xf4, 0x9e, 0x1b, 0x38, 0x45,
		0x09, 0x8b, 0x5b, 0x04, 0xac, 0xef, 0x98, 0x0e, 0x11, 0x2d, 0x42, 0x27, 0x6d, 0xce, 0x94, 0xe0,
		0x9e, 0xee, 0x0f, 0x2d, 0x1c, 0x2f, 0xd1, 0x5d, 0xb8, 0x64, 0x0f, 0x5c, 0xcf, 0x89, 0x7d, 0xfa,
		0x9c, 0x79, 0xc7, 0xba, 0x31, 0xcc, 0xe0, 0x93, 0x8c, 0xce, 0x9b, 0x73, 0x70, 0x7f, 0xd7, 0x7d,
		0xc9, 0xc8, 0x3b, 0xd9, 0xcb, 0x23, 0x68, 0x24, 0x8d, 0xdf, 0x74, 0xc1, 0x6b, 0x71, 0xe1, 0x9c,
		0xd0, 0x8b, 0x47, 0xd8, 0x30, 0x08, 0x52, 0x7b, 0xf1, 0x8c, 0xf8, 0xd4, 0xec, 0x34, 0x45, 0x19,
		0x75, 0xb8, 0xc9, 0x74, 0x87, 0x4b, 0x05, 0x61, 0xaa, 0x44, 0x10, 0xea, 0xa7, 0x05, 0xe1, 0x35,
		0xdc, 0xfb, 0x62, 0x28, 0xa9, 0x50, 0x31, 0x75, 0x97, 0x12, 0x61, 0x0f, 0x46, 0x1b, 0x1e, 0x13,
		0x82, 0x2d, 0xb8, 0x28, 0x73, 0x28, 0x33, 0xb8, 0xda, 0xf1, 0x8e, 0xf3, 0x5a, 0xf0, 0x09, 0x89,
		0xce, 0x1b, 0x0b, 0x16, 0x30, 0xb5, 0xb9, 0x70, 0x9e, 0x12, 0x71, 0x38, 0x36, 0xab, 0x17, 0x00,
		0x7c, 0xcd, 0xd3, 0xa1, 0x31, 0x2d, 0x63, 0x44, 0x39, 0xbd, 0x60, 0x52, 0x3d, 0x6c, 0xa2, 0xb0,
		0x87, 0xfd, 0x5e, 0x87, 0x7b, 0x9b, 0x9c, 0x29, 0x97, 0x05, 0x74, 0x43, 0x3e, 0xa3, 0xaf, 0xca,
		0xa4, 0xc0, 0x3a, 0xb4, 0xe2, 0x24, 0xd5, 0x33, 0x2f, 0x37, 0xb4, 0x5f, 0xa4, 0x78, 0x38, 0x83,
		0xcc, 0xcc, 0xb6, 0x73, 0xe5, 0x67, 0xdb, 0x44, 0xfa, 0xe4, 0x9f, 0xc3, 0x07, 0x49, 0xf2, 0xec,
		0x9e, 0x3e, 0x58, 0x26, 0xf5, 0x6c, 0x28, 0x03, 0x45, 0x3b, 0xb0, 0x10, 0xda, 0x2c, 0x50, 0x36,
		0xa5, 0x95, 0xbd, 0x05, 0x15, 0xce, 0xcb, 0x7d, 0x62, 0x1f, 0xf2, 0x83, 0x03, 0x0d, 0xea, 0x33,
		0x45, 0xc5, 0x11, 0xf1, 0xfa, 0x2c, 0x37, 0x75, 0x0b, 0x41, 0xf9, 0xa9, 0x35, 0x5d, 0x72, 0x6a,
		0x7d, 0x04, 0x0d, 0x97, 0xb9, 0xca, 0x25, 0x8a, 0x0b, 0x3d, 0x55, 0x67, 0xbb, 0xf3, 0xab, 0xd1,
		0x95, 0x2e, 0x73, 0xc0, 0xfd, 0x18, 0x84, 0x47, 0x78, 0x74, 0x13, 0xce, 0x1f, 0x10, 0xd7, 0x0b,
		0x04, 0xc5, 0x51, 0x63, 0x6e, 0xe8, 0x5c, 0xcb, 0x12, 0xd1, 0x12, 0xcc, 0x1a, 0xc2, 0x96, 0xc9,
		0x3a, 0xd0, 0x07, 0x93, 0xa3, 0xa2, 0x2e, 0xcc, 0x79, 0x44, 0x2a, 0x33, 0x55, 0xc2, 0x72, 0x8f,
		0x06, 0x46, 0x53, 0xa3, 0xc7, 0xf2, 0x50, 0x07, 0x5a, 0xb6, 0xe0, 0x2c, 0xbe, 0x95, 0xb5, 0x5b,
		0xda, 0x81, 0x0c, 0x2d, 0x95, 0xd4, 0xe7, 0x8b, 0x92, 0x1a, 0x2d, 0xc2, 0xa4, 0x4f, 0x7d, 0xde,
		0x9e, 0xd5, 0xa8, 0x56, 0x8c, 0x7a, 0x4a, 0x7d, 0x8e, 0x35, 0x67, 0x6c, 0x05, 0x5f, 0xa8, 0x5c,
		0xc1, 0xbf, 0xd4, 0x61, 0x45, 0x1f, 0xe2, 0x66, 0xba, 0xad, 0xfc, 0x17, 0x83, 0x20, 0x5f, 0x71,
		0x13, 0x67, 0xaa, 0xb8, 0xb3, 0xde, 0x26, 0x4b, 0x56, 0x5c, 0xfd, 0x5d, 0x56, 0xdc, 0x74, 0xa9,
		0x8a, 0xdb, 0x81, 0x4b, 0x43, 0x22, 0x28, 0x53, 0x9a, 0x69, 0x2a, 0x26, 0x4a, 0xfe, 0xb6, 0x49,
		0xfe, 0xe7, 0x79, 0x3e, 0x3e, 0x29, 0x92, 0x9e, 0x26, 0x8d, 0xec, 0x34, 0xc1, 0x70, 0x65, 0x74,
		0x0e, 0x98, 0x06, 0x89, 0x15, 0xd0, 0x56, 0x6e, 0x18, 0x2b, 0x2f, 0xc6, 0x61, 0xf0, 0x78, 0xd1,
		0x7c, 0x85, 0x37, 0x4b, 0x56, 0xf8, 0xff, 0xb1, 0x44, 0xfe, 0xbe, 0x00, 0x33, 0x71, 0x1d, 0xa0,
		0x47, 0xd0, 0x8a, 0x5f, 0xa0, 0xc9, 0xdc, 0x98, 0xed, 0x5e, 0x36, 0x21, 0xdc, 0x4a, 0xb1, 0x70,
		0x06, 0x88, 0xbe, 0xb3, 0x60, 0x49, 0x96, 0x7a, 0xaf, 0x99, 0xa9, 0xb2, 0x9a, 0xb8, 0x58, 0x4a,
		0xaa, 0x57, 0xc3, 0x25, 0xf5, 0xa3, 0x6f, 0xe0, 0x86, 0x2c, 0xb8, 0xa5, 0x9b, 0xca, 0xbc, 0x99,
		0xd8, 0x2f, 0xc0, 0xf6, 0x6a, 0xb8, 0x50, 0x17, 0xfa, 0xc9, 0x82, 0x65, 0xbb, 0xfc, 0xd5, 0xdc,
		0xd4, 0xf7, 0x83, 0xd8, 0x76, 0x85, 0x5b, 0x7d, 0xaf, 0x86, 0xab, 0x58, 0x42, 0xdf, 0x5b, 0x70,
		0xeb, 0xa0, 0xdc, 0x6d, 0x5f, 0xb7, 0x92, 0x66, 0x77, 0x2d, 0xf6, 0xaa, 0xe4, 0x23, 0xa1, 0x57,
		0xc3, 0x65, 0x2d, 0xe8, 0x38, 0x89, 0xf2, 0x2f, 0x31, 0xdd, 0xa8, 0x52, 0x71, 0xaa, 0xf0, 0x88,
		0x0b, 0xe3, 0x54, 0xc1, 0x12, 0xf2, 0x61, 0xde, 0x2e, 0x7a, 0xb7, 0x98, 0xe9, 0xfe, 0x61, 0x72,
		0x64, 0x45, 0xe0, 0x5e, 0x0d, 0x17, 0x6b, 0x43, 0x3f, 0x5a, 0x70, 0xc7, 0x2e, 0xfb, 0xd8, 0xd1,
		0x7d, 0xb2, 0xd9, 0xbd, 0x9f, 0xb5, 0x5d, 0xee, 0x68, 0xca, 0x5b, 0x41, 0x7f, 0x58, 0xb0, 0x2e,
		0xce, 0xf8, 0x70, 0xd2, 0xcd, 0xb8, 0xd9, 0xfd, 0x64, 0xec, 0x49, 0x55, 0xd0, 0xd3, 0xab, 0xe1,
		0x33, 0xfb, 0x80, 0x86, 0xb0, 0x20, 0x0a, 0xaf, 0xe9, 0xe6, 0xc3, 0xc2, 0xd2, 0xc8, 0xcb, 0x22,
		0x74, 0xaf, 0x86, 0xdf, 0xa2, 0x0f, 0xfd, 0x6a, 0xc1, 0x3d, 0xbb, 0xe2, 0xa5, 0xdc, 0x4c, 0x91,
		0xf5, 0x51, 0xf1, 0x57, 0x93, 0xef, 0xd5, 0x70, 0x65, 0x9b, 0xe8, 0x67, 0x0b, 0x56, 0x64, 0x95,
		0x0b, 0x90, 0x9e, 0x59, 0xcd, 0xee, 0xc3, 0x4c, 0x7b, 0x2c, 0x2b, 0xdc, 0xab, 0xe1, 0x6a, 0xd6,
		0xd0, 0x6f, 0x16, 0xdc, 0x97, 0x55, 0x5f, 0xb8, 0x66, 0x72, 0x3e, 0x4e, 0x7c, 0xac, 0xaa, 0xa0,
		0x57, 0xc3, 0xd5, 0xad, 0xea, 0x43, 0x0f, 0x2a, 0xbe, 0x44, 0xcd, 0xf8, 0x4e, 0x0e, 0xbd, 0xea,
		0x4b, 0x36, 0x3c, 0xf4, 0xaa, 0x36, 0x3f, 0x6d, 0x01, 0xa4, 0x56, 0x2b, 0x5f, 0x2e, 0xbf, 0x74,
		0xd5, 0x20, 0xd8, 0x0f, 0x7d, 0x58, 0x53, 0xd4, 0x1f, 0x72, 0x41, 0x3c, 0x97, 0x27, 0x3f, 0x57,
		0xf4, 0x47, 0x60, 0xf3, 0x21, 0x79, 0xbf, 0xae, 0x57, 0x0f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff,
		0x72, 0x37, 0x8a, 0x09, 0x92, 0x16, 0x00, 0x00,
	},
	// common/replication.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xcd, 0x6e, 0x23, 0x45,
		0x10, 0xce, 0xf8, 0x2f, 0x76, 0xd9, 0xb1, 0xb3, 0x9d, 0x6c, 0x32, 0x32, 0x1b, 0xb0, 0x46, 0xbb,
		0x2b, 0x23, 0xd8, 0xac, 0xe4, 0x85, 0x65, 0xc5, 0x01, 0xb1, 0x1b, 0x07, 0xd9, 0x12, 0x01, 0xd4,
		0x09, 0xbb, 0x12, 0xcb, 0xa5, 0xe3, 0x69, 0xc7, 0xa3, 0xd8, 0xd3, 0x56, 0x77, 0x8f, 0x17, 0x1f,
		0x78, 0x13, 0x1e, 0x81, 0x0b, 0x57, 0x4e, 0xdc, 0x78, 0x0c, 0x1e, 0x80, 0x97, 0x40, 0xfd, 0x33,
		0xf6, 0xcc, 0x78, 0xe2, 0x03, 0x12, 0x17, 0x2e, 0xc9, 0x74, 0xd5, 0x57, 0xd5, 0x5d, 0x5f, 0x57,
		0x55, 0x97, 0xc1, 0x1d, 0xb1, 0xd9, 0x8c, 0x85, 0x4f, 0x39, 0x9d, 0x4f, 0x83, 0x11, 0x91, 0x01,
		0x0b, 0x4f, 0xe7, 0x9c, 0x49, 0x86, 0x2a, 0x46, 0xd3, 0xbe, 0x47, 0xc3, 0x68, 0x26, 0x9e, 0xea,
		0xbf, 0x46, 0xd5, 0x3e, 0xb0, 0x46, 0xe6, 0x5f, 0x46, 0xe8, 0xb3, 0x19, 0x09, 0x62, 0xe1, 0xa1,
		0x15, 0x4e, 0x02, 0x21, 0x19, 0x5f, 0x1a, 0xa9, 0xf7, 0x06, 0xaa, 0x7d, 0x22, 0xc9, 0xab, 0x29,
		0xbb, 0x46, 0x9f, 0x41, 0xe3, 0x3c, 0x1c, 0x31, 0x3f, 0x08, 0x6f, 0xae, 0x96, 0x73, 0xea, 0x3a,
		0x1d, 0xa7, 0xdb, 0xec, 0x1d, 0x9c, 0x9a, 0xfd, 0x92, 0x2a, 0x9c, 0x02, 0x22, 0x04, 0x25, 0xe5,
		0xc4, 0x2d, 0x74, 0x9c, 0x6e, 0x03, 0xeb, 0x6f, 0xef, 0x02, 0x5a, 0x78, 0x1d, 0xc8, 0x30, 0x1c,
		0x33, 0xe4, 0xc2, 0xee, 0x82, 0x72, 0x11, 0xb0, 0x50, 0xbb, 0x2e, 0xe2, 0x78, 0x89, 0x3a, 0x50,
		0x9f, 0x12, 0x21, 0xcf, 0x17, 0x34, 0x94, 0x43, 0x5f, 0xfb, 0x29, 0xe2, 0xa4, 0xc8, 0xfb, 0xbb,
		0x00, 0x87, 0x7d, 0x1d, 0xce, 0x15, 0x11, 0xb7, 0x2f, 0xa5, 0xe4, 0xc1, 0x75, 0x24, 0xa9, 0x40,
		0x5f, 0x42, 0xcb, 0x84, 0xf9, 0xed, 0x9c, 0x72, 0xbd, 0x97, 0x3d, 0xf7, 0x91, 0x3d, 0x77, 0x3f,
		0xad, 0xc5, 0x59, 0x38, 0x6a, 0x42, 0x21, 0x30, 0x7b, 0xd6, 0x70, 0x21, 0xf0, 0xd1, 0x63, 0x28,
		0x05, 0xe1, 0x98, 0xb9, 0xc5, 0x8e, 0xd3, 0xad, 0xf7, 0xd0, 0xa9, 0xa5, 0xd6, 0xf8, 0x51, 0x81,
		0x60, 0xad, 0x47, 0xcf, 0xa0, 0x32, 0x62, 0xe1, 0x38, 0xb8, 0x71, 0x4b, 0x1a, 0xf9, 0x5e, 0x1a,
		0x79, 0xa6, 0x75, 0x91, 0xdd, 0xd5, 0x42, 0xd1, 0x15, 0xdc, 0x4b, 0xdc, 0xaf, 0xc1, 0xb8, 0x65,
		0x6d, 0xff, 0x38, 0x6d, 0x8f, 0xb3, 0xb0, 0xd8, 0xd5, 0xa6, 0x03, 0xf4, 0x10, 0xf6, 0x8c, 0xff,
		0xd7, 0x96, 0xdf, 0x8a, 0x66, 0x30, 0x2d, 0x44, 0x5d, 0x68, 0x8d, 0x49, 0x30, 0x65, 0x0b, 0xca,
		0x63, 0xdc, 0xae, 0xc6, 0x65, 0xc5, 0xde, 0xef, 0x65, 0xb8, 0x3f, 0x30, 0x79, 0x92, 0xa1, 0xfb,
		0x31, 0x34, 0x25, 0xe1, 0x37, 0x54, 0x9e, 0x4d, 0x23, 0x21, 0x29, 0x17, 0xae, 0xd3, 0x29, 0x76,
		0x6b, 0x38, 0x23, 0x45, 0x6d, 0xa8, 0x1a, 0x9e, 0x87, 0x31, 0xb5, 0xab, 0x35, 0x7a, 0x1f, 0xe0,
		0x1d, 0xe3, 0xb7, 0xe3, 0x29, 0x7b, 0x37, 0xf4, 0x35, 0xcd, 0x35, 0x9c, 0x90, 0xa0, 0x43, 0x28,
		0xf3, 0x48, 0x19, 0x96, 0xb4, 0xca, 0x2c, 0x90, 0x07, 0x8d, 0x71, 0xc0, 0xd7, 0x49, 0x52, 0xd6,
		0x47, 0x4f, 0xc9, 0x54, 0x1e, 0x85, 0xf4, 0xa7, 0x15, 0xc4, 0xb0, 0x90, 0x14, 0x25, 0x73, 0x70,
		0x37, 0x9d, 0x83, 0x3f, 0x42, 0x8b, 0xa7, 0x13, 0xd6, 0xad, 0x76, 0x8a, 0xdd, 0x7a, 0xaf, 0x17,
		0xdf, 0x4b, 0x2e, 0x23, 0xa7, 0x99, 0x2c, 0x3f, 0x0f, 0x25, 0x5f, 0xe2, 0xac, 0x2b, 0xf4, 0x21,
		0xec, 0xda, 0xc2, 0x73, 0x6b, 0xfa, 0xb6, 0x5b, 0x19, 0xaf, 0x38, 0xd6, 0xa3, 0x4f, 0x61, 0x2f,
		0xa4, 0xef, 0x70, 0x14, 0x5a, 0x8d, 0x0b, 0xf9, 0x06, 0x69, 0x14, 0xfa, 0x18, 0xee, 0x51, 0x15,
		0xe4, 0xa5, 0x64, 0x9c, 0xc6, 0xf7, 0x5b, 0xef, 0x38, 0xdd, 0x32, 0xde, 0x54, 0xa0, 0x17, 0x70,
		0x6c, 0xcc, 0xcf, 0x37, 0x6c, 0x1a, 0xda, 0xe6, 0x2e, 0xb5, 0xca, 0x35, 0x4e, 0x05, 0x95, 0x6f,
		0xec, 0x85, 0xb9, 0x7b, 0x1d, 0xa7, 0x5b, 0xc5, 0x69, 0x21, 0x7a, 0x00, 0x35, 0xe3, 0xe0, 0x9b,
		0xfe, 0x99, 0xdb, 0xd4, 0x88, 0xb5, 0xa0, 0xfd, 0x16, 0x0e, 0xf3, 0x68, 0x43, 0xfb, 0x50, 0xbc,
		0xa5, 0x4b, 0x5d, 0xc0, 0x35, 0xac, 0x3e, 0xd1, 0x13, 0x28, 0x2f, 0xc8, 0x34, 0xa2, 0x3a, 0x89,
		0xea, 0xbd, 0xe3, 0x98, 0x84, 0x8c, 0x39, 0x36, 0xa8, 0xcf, 0x0b, 0x2f, 0x1c, 0xef, 0x2f, 0x07,
		0x4e, 0x2c, 0x29, 0x17, 0x54, 0x12, 0x9f, 0x48, 0xf2, 0xff, 0x4a, 0x62, 0xef, 0x67, 0x38, 0xb9,
		0x5c, 0x86, 0xa3, 0xcb, 0x09, 0xe1, 0xfe, 0xa5, 0x24, 0x32, 0x12, 0x99, 0x00, 0x1f, 0xc2, 0x9e,
		0x60, 0x11, 0x1f, 0x51, 0x1b, 0x8a, 0x65, 0x34, 0x2d, 0x54, 0xb5, 0x20, 0x94, 0x8b, 0x55, 0xc7,
		0x8d, 0x97, 0xea, 0xf6, 0x64, 0x30, 0xa3, 0x42, 0x92, 0xd9, 0x5c, 0xc7, 0x56, 0xc4, 0x6b, 0x81,
		0xf7, 0x47, 0x09, 0xda, 0x6a, 0xff, 0x97, 0x23, 0x19, 0x2c, 0x02, 0x99, 0x6d, 0x11, 0x49, 0xd6,
		0x9c, 0xad, 0xac, 0x15, 0xee, 0x66, 0xad, 0x98, 0x64, 0x2d, 0x51, 0xb4, 0xa5, 0x8d, 0x87, 0x43,
		0x8c, 0x26, 0xd4, 0x8f, 0xa6, 0xd4, 0x5f, 0xd1, 0x99, 0x14, 0x69, 0x2a, 0xe2, 0xe5, 0x55, 0x30,
		0xa3, 0x71, 0x6b, 0x4c, 0x09, 0x55, 0xc0, 0x42, 0x12, 0x2e, 0xb5, 0x17, 0xd3, 0x18, 0xd6, 0x02,
		0xbd, 0x8b, 0x59, 0x68, 0x0f, 0x55, 0xbb, 0xcb, 0x5a, 0xa4, 0x8a, 0x4f, 0xbd, 0x56, 0x03, 0x4a,
		0xb8, 0xbc, 0xa6, 0x44, 0x6a, 0x5c, 0x4d, 0xe3, 0x36, 0x15, 0x2a, 0x1e, 0x9f, 0x4a, 0x12, 0x4c,
		0x85, 0xae, 0xed, 0x06, 0x8e, 0x97, 0x4a, 0x43, 0xa4, 0xa4, 0xb3, 0xb9, 0xb4, 0xa5, 0x1b, 0x2f,
		0xe3, 0x1d, 0xbe, 0x22, 0xc1, 0x34, 0xe2, 0x14, 0x53, 0x22, 0x6c, 0xa9, 0xd6, 0xf0, 0xa6, 0x02,
		0x9d, 0x02, 0x52, 0x42, 0x55, 0x8e, 0x94, 0x0f, 0x7d, 0x1a, 0xca, 0x40, 0x2e, 0x75, 0xa5, 0xd6,
		0x70, 0x8e, 0x26, 0xc6, 0x5b, 0x27, 0x7d, 0x7b, 0xb8, 0xa6, 0x3e, 0x5c, 0x8e, 0x06, 0x7d, 0x01,
		0x4d, 0x7b, 0x05, 0x71, 0x93, 0x6a, 0xe9, 0xfa, 0x3c, 0x8a, 0xeb, 0xf3, 0x75, 0x4a, 0x8b, 0x33,
		0x68, 0xef, 0xb7, 0x02, 0x1c, 0x27, 0xda, 0xe9, 0xeb, 0x5e, 0x22, 0x7f, 0x8e, 0xa0, 0x22, 0x89,
		0xb8, 0xb5, 0xd9, 0x53, 0xc4, 0x76, 0xf5, 0x1f, 0x54, 0xe3, 0xd7, 0x70, 0x90, 0x3e, 0xd7, 0x50,
		0xd2, 0x99, 0x70, 0xcb, 0xba, 0xed, 0xb7, 0xf3, 0x43, 0x51, 0x10, 0x9c, 0x67, 0x86, 0xba, 0x50,
		0xd1, 0x7d, 0x56, 0xe8, 0x14, 0xab, 0xf7, 0xf6, 0x57, 0xef, 0xb9, 0x1d, 0xb0, 0xb0, 0xd5, 0xa3,
		0x4f, 0xa0, 0x91, 0xe8, 0xae, 0x42, 0x27, 0x5c, 0x1e, 0x3e, 0x85, 0xf2, 0xfe, 0x2c, 0xa7, 0x46,
		0x2a, 0xc5, 0x1b, 0x7a, 0x0e, 0x55, 0xc5, 0x4e, 0x62, 0x5c, 0x6b, 0xdb, 0xb1, 0x27, 0x83, 0xd4,
		0x53, 0xdb, 0x0a, 0xab, 0xfa, 0x90, 0xe9, 0x05, 0x57, 0x86, 0x69, 0x53, 0xff, 0x29, 0x19, 0xc2,
		0x70, 0xe8, 0xe7, 0x4c, 0x5c, 0x76, 0x2e, 0x7a, 0x90, 0x9e, 0x56, 0xd2, 0x98, 0xc1, 0x0e, 0xce,
		0xb5, 0x45, 0xdf, 0xc3, 0xfd, 0x49, 0xde, 0x2b, 0x6a, 0x47, 0xa8, 0x93, 0xad, 0x4f, 0xed, 0x60,
		0x07, 0xe7, 0x5b, 0xa3, 0x19, 0x9c, 0x88, 0x6d, 0x0d, 0xd1, 0x4e, 0x58, 0x8f, 0x62, 0xf7, 0x5b,
		0xbb, 0xe7, 0x60, 0x07, 0x6f, 0xf7, 0x86, 0x7c, 0x68, 0x8b, 0x3b, 0xfb, 0x9f, 0xbd, 0x7d, 0x2f,
		0xb9, 0x57, 0x3e, 0x72, 0xb0, 0x83, 0xb7, 0xf8, 0x51, 0x41, 0x4d, 0xb6, 0x3d, 0x63, 0x36, 0x6d,
		0x1e, 0x65, 0x38, 0xcb, 0x07, 0xab, 0xa0, 0xb6, 0x7a, 0x43, 0x6f, 0xe1, 0x78, 0x92, 0x5f, 0x91,
		0xba, 0xe1, 0xd5, 0x7b, 0x1f, 0xe4, 0x5c, 0x4e, 0x12, 0x36, 0xd8, 0xc1, 0x77, 0x79, 0x78, 0xd5,
		0x00, 0x58, 0xaf, 0xbc, 0x5f, 0x1c, 0xd8, 0x4f, 0xe6, 0x27, 0xbb, 0xa5, 0xe1, 0xfa, 0x35, 0xea,
		0xeb, 0x4c, 0x2e, 0xc7, 0xaf, 0x51, 0x1f, 0x3d, 0x87, 0x23, 0xd5, 0x82, 0x30, 0x95, 0x3c, 0xa0,
		0x0b, 0xea, 0x5f, 0x50, 0x21, 0xc8, 0x0d, 0x5d, 0xa5, 0xed, 0x1d, 0xda, 0xd8, 0xee, 0x3b, 0xce,
		0x46, 0x54, 0x88, 0xa4, 0x5d, 0x71, 0x6d, 0xb7, 0xa9, 0xf5, 0x7e, 0x75, 0xe0, 0x20, 0x71, 0x3c,
		0xab, 0x10, 0xe8, 0x0c, 0xf6, 0x79, 0xba, 0xaa, 0xcc, 0xe0, 0x90, 0x3f, 0x96, 0x28, 0x3d, 0xde,
		0x30, 0xf8, 0xd7, 0xc1, 0xb8, 0xb0, 0x3b, 0x21, 0xe2, 0x82, 0x71, 0xaa, 0x4f, 0x5f, 0xc5, 0xf1,
		0xf2, 0xd5, 0x93, 0x1f, 0x3e, 0xba, 0x09, 0xe4, 0x24, 0xba, 0x56, 0x87, 0x78, 0xaa, 0x5e, 0x0b,
		0xc6, 0xc9, 0x34, 0x60, 0xab, 0xcf, 0x27, 0xfa, 0xa7, 0x9e, 0xfd, 0x89, 0x78, 0x5d, 0xd1, 0xab,
		0x67, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xa6, 0x84, 0x9c, 0x6f, 0x0e, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) WorkflowServiceYARPCClient {
			return NewWorkflowServiceYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
